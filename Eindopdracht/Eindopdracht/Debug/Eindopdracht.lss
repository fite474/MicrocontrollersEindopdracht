
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  0000114c  000011e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000114c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800138  00800138  00001218  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026fb  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000101b  00000000  00000000  00003c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001796  00000000  00000000  00004c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000564  00000000  00000000  000063bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000951  00000000  00000000  00006920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001192  00000000  00000000  00007271  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00008403  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	d6 c5       	rjmp	.+2988   	; 0xbd2 <__vector_9>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e4       	ldi	r30, 0x4C	; 76
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 33       	cpi	r26, 0x38	; 56
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a8 e3       	ldi	r26, 0x38	; 56
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 36       	cpi	r26, 0x60	; 96
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	ae d5       	rcall	.+2908   	; 0xc20 <main>
      c4:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <time>:
      ca:	fc 01       	movw	r30, r24
      cc:	0f b6       	in	r0, 0x3f	; 63
      ce:	f8 94       	cli
      d0:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <__system_time>
      d4:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <__system_time+0x1>
      d8:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__system_time+0x2>
      dc:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__system_time+0x3>
      e0:	0f be       	out	0x3f, r0	; 63
      e2:	30 97       	sbiw	r30, 0x00	; 0
      e4:	21 f0       	breq	.+8      	; 0xee <time+0x24>
      e6:	60 83       	st	Z, r22
      e8:	71 83       	std	Z+1, r23	; 0x01
      ea:	82 83       	std	Z+2, r24	; 0x02
      ec:	93 83       	std	Z+3, r25	; 0x03
      ee:	08 95       	ret

000000f0 <checkDirection>:
{
	//DDRB=0x01; // Set PB0 pin as output for display select
	//spi_masterInit(); // Initialize spi module
	//displayDriverInit(); // Initialize display chip
	
	DDRA = 0x0F;
      f0:	8f e0       	ldi	r24, 0x0F	; 15
      f2:	8a bb       	out	0x1a, r24	; 26

	if (PINA & 0x81 && moving != GOING_DOWN)
      f4:	89 b3       	in	r24, 0x19	; 25
      f6:	81 78       	andi	r24, 0x81	; 129
      f8:	51 f0       	breq	.+20     	; 0x10e <checkDirection+0x1e>
      fa:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
      fe:	81 30       	cpi	r24, 0x01	; 1
     100:	59 f1       	breq	.+86     	; 0x158 <checkDirection+0x68>
	{
		moving = GOING_UP;
     102:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <__data_end>
	}
	if (PINA & 0x82 && moving != GOING_UP)
     106:	89 b3       	in	r24, 0x19	; 25
     108:	82 78       	andi	r24, 0x82	; 130
     10a:	51 f5       	brne	.+84     	; 0x160 <checkDirection+0x70>
     10c:	0b c0       	rjmp	.+22     	; 0x124 <checkDirection+0x34>
     10e:	89 b3       	in	r24, 0x19	; 25
     110:	82 78       	andi	r24, 0x82	; 130
     112:	41 f0       	breq	.+16     	; 0x124 <checkDirection+0x34>
     114:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
     118:	88 23       	and	r24, r24
     11a:	11 f1       	breq	.+68     	; 0x160 <checkDirection+0x70>
	{
		moving = GOING_DOWN;
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
     122:	1e c0       	rjmp	.+60     	; 0x160 <checkDirection+0x70>
	}
	if (PINA & 0x84 && moving != GOING_RIGHT)
     124:	89 b3       	in	r24, 0x19	; 25
     126:	84 78       	andi	r24, 0x84	; 132
     128:	49 f0       	breq	.+18     	; 0x13c <checkDirection+0x4c>
     12a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
     12e:	83 30       	cpi	r24, 0x03	; 3
     130:	d9 f0       	breq	.+54     	; 0x168 <checkDirection+0x78>
	{
		moving = GOING_LEFT;
     132:	82 e0       	ldi	r24, 0x02	; 2
     134:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
	}
	if (PINA & 0x88 && moving != GOING_LEFT)
     138:	89 b3       	in	r24, 0x19	; 25
     13a:	0a c0       	rjmp	.+20     	; 0x150 <checkDirection+0x60>
     13c:	89 b3       	in	r24, 0x19	; 25
     13e:	88 78       	andi	r24, 0x88	; 136
     140:	39 f0       	breq	.+14     	; 0x150 <checkDirection+0x60>
     142:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
     146:	82 30       	cpi	r24, 0x02	; 2
     148:	19 f0       	breq	.+6      	; 0x150 <checkDirection+0x60>
	{
		moving = GOING_RIGHT;
     14a:	83 e0       	ldi	r24, 0x03	; 3
     14c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
	}
	
	return moving;
     150:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	08 95       	ret

	if (PINA & 0x81 && moving != GOING_DOWN)
	{
		moving = GOING_UP;
	}
	if (PINA & 0x82 && moving != GOING_UP)
     158:	89 b3       	in	r24, 0x19	; 25
     15a:	82 78       	andi	r24, 0x82	; 130
     15c:	f9 f6       	brne	.-66     	; 0x11c <checkDirection+0x2c>
     15e:	08 c0       	rjmp	.+16     	; 0x170 <checkDirection+0x80>
	{
		moving = GOING_DOWN;
	}
	if (PINA & 0x84 && moving != GOING_RIGHT)
     160:	89 b3       	in	r24, 0x19	; 25
     162:	84 78       	andi	r24, 0x84	; 132
     164:	31 f7       	brne	.-52     	; 0x132 <checkDirection+0x42>
     166:	ea cf       	rjmp	.-44     	; 0x13c <checkDirection+0x4c>
	{
		moving = GOING_LEFT;
	}
	if (PINA & 0x88 && moving != GOING_LEFT)
     168:	89 b3       	in	r24, 0x19	; 25
     16a:	88 78       	andi	r24, 0x88	; 136
     16c:	71 f7       	brne	.-36     	; 0x14a <checkDirection+0x5a>
     16e:	f0 cf       	rjmp	.-32     	; 0x150 <checkDirection+0x60>
	}
	if (PINA & 0x82 && moving != GOING_UP)
	{
		moving = GOING_DOWN;
	}
	if (PINA & 0x84 && moving != GOING_RIGHT)
     170:	89 b3       	in	r24, 0x19	; 25
     172:	84 78       	andi	r24, 0x84	; 132
     174:	f1 f6       	brne	.-68     	; 0x132 <checkDirection+0x42>
     176:	e2 cf       	rjmp	.-60     	; 0x13c <checkDirection+0x4c>

00000178 <menuDirection>:
{
	//DDRB=0x01; // Set PB0 pin as output for display select
	//spi_masterInit(); // Initialize spi module
	//displayDriverInit(); // Initialize display chip
	
	DDRA = 0x0F;
     178:	8f e0       	ldi	r24, 0x0F	; 15
     17a:	8a bb       	out	0x1a, r24	; 26

	if (PINA & 0x81)
     17c:	89 b3       	in	r24, 0x19	; 25
     17e:	81 78       	andi	r24, 0x81	; 129
     180:	49 f4       	brne	.+18     	; 0x194 <menuDirection+0x1c>
	{
		return GOING_UP;
	}
	if (PINA & 0x82)
     182:	89 b3       	in	r24, 0x19	; 25
     184:	82 78       	andi	r24, 0x82	; 130
     186:	49 f4       	brne	.+18     	; 0x19a <menuDirection+0x22>
	{
		return GOING_DOWN;
	}
	if (PINA & 0x88)
     188:	89 b3       	in	r24, 0x19	; 25
     18a:	88 78       	andi	r24, 0x88	; 136
     18c:	49 f4       	brne	.+18     	; 0x1a0 <menuDirection+0x28>
	{
		return GOING_RIGHT;
	}
	
	return WAITING;
     18e:	84 e0       	ldi	r24, 0x04	; 4
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	08 95       	ret
	
	DDRA = 0x0F;

	if (PINA & 0x81)
	{
		return GOING_UP;
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	08 95       	ret
	}
	if (PINA & 0x82)
	{
		return GOING_DOWN;
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	08 95       	ret
	}
	if (PINA & 0x88)
	{
		return GOING_RIGHT;
     1a0:	83 e0       	ldi	r24, 0x03	; 3
     1a2:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	return WAITING;
	
	
}
     1a4:	08 95       	ret

000001a6 <drawImage>:
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
     1a6:	ee e4       	ldi	r30, 0x4E	; 78
     1a8:	f1 e0       	ldi	r31, 0x01	; 1
     1aa:	10 82       	st	Z, r1
     1ac:	86 e6       	ldi	r24, 0x66	; 102
     1ae:	81 83       	std	Z+1, r24	; 0x01
     1b0:	82 83       	std	Z+2, r24	; 0x02
     1b2:	13 82       	std	Z+3, r1	; 0x03
     1b4:	9c e3       	ldi	r25, 0x3C	; 60
     1b6:	94 83       	std	Z+4, r25	; 0x04
     1b8:	85 83       	std	Z+5, r24	; 0x05
     1ba:	83 ec       	ldi	r24, 0xC3	; 195
     1bc:	86 83       	std	Z+6, r24	; 0x06
     1be:	17 82       	std	Z+7, r1	; 0x07
     1c0:	08 95       	ret

000001c2 <drawCounting>:
     1c2:	82 30       	cpi	r24, 0x02	; 2
     1c4:	91 05       	cpc	r25, r1
     1c6:	99 f0       	breq	.+38     	; 0x1ee <drawCounting+0x2c>
     1c8:	83 30       	cpi	r24, 0x03	; 3
     1ca:	91 05       	cpc	r25, r1
     1cc:	19 f0       	breq	.+6      	; 0x1d4 <drawCounting+0x12>
     1ce:	01 97       	sbiw	r24, 0x01	; 1
     1d0:	51 f5       	brne	.+84     	; 0x226 <drawCounting+0x64>
     1d2:	1b c0       	rjmp	.+54     	; 0x20a <drawCounting+0x48>
     1d4:	ee e4       	ldi	r30, 0x4E	; 78
     1d6:	f1 e0       	ldi	r31, 0x01	; 1
     1d8:	8e e7       	ldi	r24, 0x7E	; 126
     1da:	80 83       	st	Z, r24
     1dc:	81 83       	std	Z+1, r24	; 0x01
     1de:	96 e0       	ldi	r25, 0x06	; 6
     1e0:	92 83       	std	Z+2, r25	; 0x02
     1e2:	83 83       	std	Z+3, r24	; 0x03
     1e4:	84 83       	std	Z+4, r24	; 0x04
     1e6:	95 83       	std	Z+5, r25	; 0x05
     1e8:	86 83       	std	Z+6, r24	; 0x06
     1ea:	87 83       	std	Z+7, r24	; 0x07
     1ec:	08 95       	ret
     1ee:	ee e4       	ldi	r30, 0x4E	; 78
     1f0:	f1 e0       	ldi	r31, 0x01	; 1
     1f2:	8e e7       	ldi	r24, 0x7E	; 126
     1f4:	80 83       	st	Z, r24
     1f6:	81 83       	std	Z+1, r24	; 0x01
     1f8:	96 e0       	ldi	r25, 0x06	; 6
     1fa:	92 83       	std	Z+2, r25	; 0x02
     1fc:	83 83       	std	Z+3, r24	; 0x03
     1fe:	84 83       	std	Z+4, r24	; 0x04
     200:	90 e6       	ldi	r25, 0x60	; 96
     202:	95 83       	std	Z+5, r25	; 0x05
     204:	86 83       	std	Z+6, r24	; 0x06
     206:	87 83       	std	Z+7, r24	; 0x07
     208:	08 95       	ret
     20a:	ee e4       	ldi	r30, 0x4E	; 78
     20c:	f1 e0       	ldi	r31, 0x01	; 1
     20e:	88 e1       	ldi	r24, 0x18	; 24
     210:	80 83       	st	Z, r24
     212:	98 e3       	ldi	r25, 0x38	; 56
     214:	91 83       	std	Z+1, r25	; 0x01
     216:	98 e7       	ldi	r25, 0x78	; 120
     218:	92 83       	std	Z+2, r25	; 0x02
     21a:	83 83       	std	Z+3, r24	; 0x03
     21c:	84 83       	std	Z+4, r24	; 0x04
     21e:	85 83       	std	Z+5, r24	; 0x05
     220:	8e e7       	ldi	r24, 0x7E	; 126
     222:	86 83       	std	Z+6, r24	; 0x06
     224:	87 83       	std	Z+7, r24	; 0x07
     226:	08 95       	ret

00000228 <displaySetPixel>:
     228:	e8 2f       	mov	r30, r24
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	e2 5b       	subi	r30, 0xB2	; 178
     22e:	fe 4f       	sbci	r31, 0xFE	; 254
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	02 c0       	rjmp	.+4      	; 0x23a <displaySetPixel+0x12>
     236:	88 0f       	add	r24, r24
     238:	99 1f       	adc	r25, r25
     23a:	6a 95       	dec	r22
     23c:	e2 f7       	brpl	.-8      	; 0x236 <displaySetPixel+0xe>
     23e:	90 81       	ld	r25, Z
     240:	89 2b       	or	r24, r25
     242:	80 83       	st	Z, r24
     244:	08 95       	ret

00000246 <setStartLocation>:
     246:	ea e4       	ldi	r30, 0x4A	; 74
     248:	f1 e0       	ldi	r31, 0x01	; 1
     24a:	91 83       	std	Z+1, r25	; 0x01
     24c:	80 83       	st	Z, r24
     24e:	73 83       	std	Z+3, r23	; 0x03
     250:	62 83       	std	Z+2, r22	; 0x02
     252:	88 e0       	ldi	r24, 0x08	; 8
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	a5 d5       	rcall	.+2890   	; 0xda2 <malloc>
     258:	fc 01       	movw	r30, r24
     25a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <locationList+0x1>
     25e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <locationList>
     262:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <currentLocation>
     266:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <currentLocation+0x1>
     26a:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <currentLocation+0x2>
     26e:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <currentLocation+0x3>
     272:	80 83       	st	Z, r24
     274:	91 83       	std	Z+1, r25	; 0x01
     276:	a2 83       	std	Z+2, r26	; 0x02
     278:	b3 83       	std	Z+3, r27	; 0x03
     27a:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <counter>
     27e:	30 91 3a 01 	lds	r19, 0x013A	; 0x80013a <counter+0x1>
     282:	35 83       	std	Z+5, r19	; 0x05
     284:	24 83       	std	Z+4, r18	; 0x04
     286:	17 82       	std	Z+7, r1	; 0x07
     288:	16 82       	std	Z+6, r1	; 0x06
     28a:	2f 5f       	subi	r18, 0xFF	; 255
     28c:	3f 4f       	sbci	r19, 0xFF	; 255
     28e:	30 93 3a 01 	sts	0x013A, r19	; 0x80013a <counter+0x1>
     292:	20 93 39 01 	sts	0x0139, r18	; 0x800139 <counter>
     296:	08 95       	ret

00000298 <displayClrPixel>:
     298:	e8 2f       	mov	r30, r24
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	e2 5b       	subi	r30, 0xB2	; 178
     29e:	fe 4f       	sbci	r31, 0xFE	; 254
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <displayClrPixel+0x12>
     2a6:	88 0f       	add	r24, r24
     2a8:	99 1f       	adc	r25, r25
     2aa:	6a 95       	dec	r22
     2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <displayClrPixel+0xe>
     2ae:	90 81       	ld	r25, Z
     2b0:	89 27       	eor	r24, r25
     2b2:	80 83       	st	Z, r24
     2b4:	08 95       	ret

000002b6 <displayClr>:
     2b6:	ee e4       	ldi	r30, 0x4E	; 78
     2b8:	f1 e0       	ldi	r31, 0x01	; 1
     2ba:	86 e5       	ldi	r24, 0x56	; 86
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	11 92       	st	Z+, r1
     2c0:	e8 17       	cp	r30, r24
     2c2:	f9 07       	cpc	r31, r25
     2c4:	e1 f7       	brne	.-8      	; 0x2be <displayClr+0x8>
     2c6:	08 95       	ret

000002c8 <twi_init>:
     2c8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     2cc:	80 e2       	ldi	r24, 0x20	; 32
     2ce:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     2d2:	08 95       	ret

000002d4 <twi_start>:
     2d4:	84 ea       	ldi	r24, 0xA4	; 164
     2d6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     2da:	e4 e7       	ldi	r30, 0x74	; 116
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	80 81       	ld	r24, Z
     2e0:	88 23       	and	r24, r24
     2e2:	ec f7       	brge	.-6      	; 0x2de <twi_start+0xa>
     2e4:	08 95       	ret

000002e6 <twi_tx>:
}

void twi_tx(unsigned char data)
{
	//transmit 8 bits data
	TWDR = data;
     2e6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
     2ea:	84 e8       	ldi	r24, 0x84	; 132
     2ec:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
     2f0:	e4 e7       	ldi	r30, 0x74	; 116
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	88 23       	and	r24, r24
     2f8:	ec f7       	brge	.-6      	; 0x2f4 <twi_tx+0xe>
}
     2fa:	08 95       	ret

000002fc <displayInitHT16K33>:
	}
}


void displayInitHT16K33(uint8_t i2c_address) 
{
     2fc:	0f 93       	push	r16
     2fe:	1f 93       	push	r17
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	c8 2f       	mov	r28, r24
							// System setup page 30 ht16k33 datasheet
	twi_start();
     306:	e6 df       	rcall	.-52     	; 0x2d4 <twi_start>
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
     308:	8c 2f       	mov	r24, r28
     30a:	ed df       	rcall	.-38     	; 0x2e6 <twi_tx>
	twi_tx(0x21);			// Internal osc on (page 10 HT16K33)
     30c:	81 e2       	ldi	r24, 0x21	; 33
     30e:	eb df       	rcall	.-42     	; 0x2e6 <twi_tx>
     310:	04 e7       	ldi	r16, 0x74	; 116
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
     312:	10 e0       	ldi	r17, 0x00	; 0
     314:	d4 e9       	ldi	r29, 0x94	; 148
     316:	f8 01       	movw	r30, r16
     318:	d0 83       	st	Z, r29
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
	twi_tx(0x21);			// Internal osc on (page 10 HT16K33)
	twi_stop();
		
							// ROW/INT set. Page 31 ht16k33 datasheet
	twi_start();
     31a:	dc df       	rcall	.-72     	; 0x2d4 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
     31c:	8c 2f       	mov	r24, r28
     31e:	e3 df       	rcall	.-58     	; 0x2e6 <twi_tx>
	twi_tx(0xA0);			// HT16K33 pins all output (default)
     320:	80 ea       	ldi	r24, 0xA0	; 160
     322:	e1 df       	rcall	.-62     	; 0x2e6 <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
     324:	f8 01       	movw	r30, r16
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xA0);			// HT16K33 pins all output (default)
	twi_stop();

							// Dimming set
	twi_start();
     326:	d0 83       	st	Z, r29
	twi_tx(i2c_address);	// Display I2C address + R/W bit
     328:	d5 df       	rcall	.-86     	; 0x2d4 <twi_start>
     32a:	8c 2f       	mov	r24, r28
	twi_tx(0xE1);			// Display Dimming 2/16 duty cycle
     32c:	dc df       	rcall	.-72     	; 0x2e6 <twi_tx>
     32e:	81 ee       	ldi	r24, 0xE1	; 225
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
     330:	da df       	rcall	.-76     	; 0x2e6 <twi_tx>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xE1);			// Display Dimming 2/16 duty cycle
	twi_stop();

							// Display set
	twi_start();
     332:	f8 01       	movw	r30, r16
	twi_tx(i2c_address);	// Display I2C address + R/W bit
     334:	d0 83       	st	Z, r29
     336:	ce df       	rcall	.-100    	; 0x2d4 <twi_start>
	twi_tx(0x81);			// Display ON, Blinking OFF
     338:	8c 2f       	mov	r24, r28
     33a:	d5 df       	rcall	.-86     	; 0x2e6 <twi_tx>
     33c:	81 e8       	ldi	r24, 0x81	; 129
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
     33e:	d3 df       	rcall	.-90     	; 0x2e6 <twi_tx>
     340:	f8 01       	movw	r30, r16
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0x81);			// Display ON, Blinking OFF
	twi_stop();
	
							// Beeld een patroon af op display (test)
	twi_start();
     342:	d0 83       	st	Z, r29
	twi_tx(i2c_address);
     344:	c7 df       	rcall	.-114    	; 0x2d4 <twi_start>
     346:	8c 2f       	mov	r24, r28
	twi_tx(0x00);
     348:	ce df       	rcall	.-100    	; 0x2e6 <twi_tx>
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	cc df       	rcall	.-104    	; 0x2e6 <twi_tx>
     34e:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t a = 0x55;
     350:	c5 e5       	ldi	r28, 0x55	; 85
	for( uint8_t idx = 0; idx < 8; idx++ ) {
		a ^= 0xFF;
     352:	c0 95       	com	r28
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
     354:	8c 2f       	mov	r24, r28
     356:	80 fb       	bst	r24, 0
     358:	87 95       	ror	r24
     35a:	87 f9       	bld	r24, 7
     35c:	c4 df       	rcall	.-120    	; 0x2e6 <twi_tx>
     35e:	80 e0       	ldi	r24, 0x00	; 0
		twi_tx( 0x00);
     360:	c2 df       	rcall	.-124    	; 0x2e6 <twi_tx>
     362:	d1 50       	subi	r29, 0x01	; 1
     364:	b1 f7       	brne	.-20     	; 0x352 <displayInitHT16K33+0x56>
     366:	84 e9       	ldi	r24, 0x94	; 148
							// Beeld een patroon af op display (test)
	twi_start();
	twi_tx(i2c_address);
	twi_tx(0x00);
	uint8_t a = 0x55;
	for( uint8_t idx = 0; idx < 8; idx++ ) {
     368:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
}
     370:	1f 91       	pop	r17
     372:	0f 91       	pop	r16
     374:	08 95       	ret

00000376 <displayInit>:
     376:	a8 df       	rcall	.-176    	; 0x2c8 <twi_init>
     378:	84 ee       	ldi	r24, 0xE4	; 228


void displayInit(void) 
{
	twi_init();							// Enable TWI interface
	displayInitHT16K33(D0_I2C_ADDR);	// Iit display
     37a:	c0 df       	rcall	.-128    	; 0x2fc <displayInitHT16K33>
	locationList = NULL;
     37c:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <locationList+0x1>
     380:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <locationList>
	
	srand((unsigned)time(&t));
     384:	82 e4       	ldi	r24, 0x42	; 66
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	a0 de       	rcall	.-704    	; 0xca <time>
     38a:	cb 01       	movw	r24, r22
	rand(),rand(),rand();
     38c:	75 d6       	rcall	.+3306   	; 0x1078 <srand>
     38e:	71 d6       	rcall	.+3298   	; 0x1072 <rand>
     390:	70 d6       	rcall	.+3296   	; 0x1072 <rand>
     392:	6f c6       	rjmp	.+3294   	; 0x1072 <rand>
     394:	08 95       	ret

00000396 <update>:
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
								//writeLedDisplay(x+y * 100);
	buf[x] = buf[x] ^ newByte;
}

void update( void )
{
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
								// Second display
	twi_start();
     39e:	9a df       	rcall	.-204    	; 0x2d4 <twi_start>
	twi_tx(D0_I2C_ADDR);
     3a0:	84 ee       	ldi	r24, 0xE4	; 228
     3a2:	a1 df       	rcall	.-190    	; 0x2e6 <twi_tx>
	twi_tx(0x00);
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	9f df       	rcall	.-194    	; 0x2e6 <twi_tx>
     3a8:	c6 e5       	ldi	r28, 0x56	; 86
     3aa:	d1 e0       	ldi	r29, 0x01	; 1
     3ac:	0e e4       	ldi	r16, 0x4E	; 78
     3ae:	11 e0       	ldi	r17, 0x01	; 1
     3b0:	8a 91       	ld	r24, -Y
	for( uint8_t idx = 0; idx < 8; idx++ ) {
		uint8_t a = buf[7 + 0 * 8 - idx];
     3b2:	80 fb       	bst	r24, 0
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
     3b4:	87 95       	ror	r24
     3b6:	87 f9       	bld	r24, 7
     3b8:	96 df       	rcall	.-212    	; 0x2e6 <twi_tx>
		twi_tx( 0x00);
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	94 df       	rcall	.-216    	; 0x2e6 <twi_tx>
     3be:	c0 17       	cp	r28, r16
{
								// Second display
	twi_start();
	twi_tx(D0_I2C_ADDR);
	twi_tx(0x00);
	for( uint8_t idx = 0; idx < 8; idx++ ) {
     3c0:	d1 07       	cpc	r29, r17
     3c2:	b1 f7       	brne	.-20     	; 0x3b0 <update+0x1a>
     3c4:	84 e9       	ldi	r24, 0x94	; 148
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
     3c6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     3ca:	df 91       	pop	r29
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
}
     3cc:	cf 91       	pop	r28
     3ce:	1f 91       	pop	r17
     3d0:	0f 91       	pop	r16
     3d2:	08 95       	ret

000003d4 <displayDrawStart>:
     3d4:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <locationList>
}


void displayDrawStart()
{
	displaySetPixel(locationList->location.x,locationList->location.y);
     3d8:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <locationList+0x1>
     3dc:	62 81       	ldd	r22, Z+2	; 0x02
     3de:	80 81       	ld	r24, Z
     3e0:	23 df       	rcall	.-442    	; 0x228 <displaySetPixel>
	update();
     3e2:	d9 cf       	rjmp	.-78     	; 0x396 <update>
     3e4:	08 95       	ret

000003e6 <getLocationListSize>:
     3e6:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <locationList>
	while( 0 == (TWCR & 0x80) );
}

int getLocationListSize(void)
{
	LocationList *locationlist = locationList;
     3ea:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <locationList+0x1>
	int locationListSize = 0;
	while (locationlist != NULL){
     3ee:	30 97       	sbiw	r30, 0x00	; 0
     3f0:	49 f0       	breq	.+18     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	90 e0       	ldi	r25, 0x00	; 0
		locationListSize++;
     3f6:	01 96       	adiw	r24, 0x01	; 1
		locationlist = locationlist->next;
     3f8:	06 80       	ldd	r0, Z+6	; 0x06
     3fa:	f7 81       	ldd	r31, Z+7	; 0x07
     3fc:	e0 2d       	mov	r30, r0

int getLocationListSize(void)
{
	LocationList *locationlist = locationList;
	int locationListSize = 0;
	while (locationlist != NULL){
     3fe:	30 97       	sbiw	r30, 0x00	; 0
     400:	d1 f7       	brne	.-12     	; 0x3f6 <getLocationListSize+0x10>
     402:	08 95       	ret
}

int getLocationListSize(void)
{
	LocationList *locationlist = locationList;
	int locationListSize = 0;
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	90 e0       	ldi	r25, 0x00	; 0
	while (locationlist != NULL){
		locationListSize++;
		locationlist = locationlist->next;
	}
	return locationListSize;
}
     408:	08 95       	ret

0000040a <increaseSnakeSize>:

void increaseSnakeSize(void)
{
	maxSnakeSize++;
     40a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <maxSnakeSize>
     40e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <maxSnakeSize+0x1>
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <maxSnakeSize+0x1>
     418:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <maxSnakeSize>
     41c:	08 95       	ret

0000041e <addCandy>:
	//calculateNewScoreAppleCollected();
}

void addCandy(void)
{
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
	
	//int random = (rand() % 8);

	
	rand(),rand(),rand(),rand(),rand(),rand();
     422:	27 d6       	rcall	.+3150   	; 0x1072 <rand>
     424:	26 d6       	rcall	.+3148   	; 0x1072 <rand>
     426:	25 d6       	rcall	.+3146   	; 0x1072 <rand>
     428:	24 d6       	rcall	.+3144   	; 0x1072 <rand>
     42a:	23 d6       	rcall	.+3142   	; 0x1072 <rand>
     42c:	22 d6       	rcall	.+3140   	; 0x1072 <rand>
	
	int x = (rand() % 8);
     42e:	21 d6       	rcall	.+3138   	; 0x1072 <rand>
     430:	87 70       	andi	r24, 0x07	; 7
     432:	90 78       	andi	r25, 0x80	; 128
     434:	99 23       	and	r25, r25
     436:	24 f4       	brge	.+8      	; 0x440 <addCandy+0x22>
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	88 6f       	ori	r24, 0xF8	; 248
     43c:	9f 6f       	ori	r25, 0xFF	; 255
     43e:	01 96       	adiw	r24, 0x01	; 1
     440:	ec 01       	movw	r28, r24
	int y = (rand() % 8);
     442:	17 d6       	rcall	.+3118   	; 0x1072 <rand>
     444:	87 70       	andi	r24, 0x07	; 7
     446:	90 78       	andi	r25, 0x80	; 128
     448:	99 23       	and	r25, r25
     44a:	24 f4       	brge	.+8      	; 0x454 <addCandy+0x36>
     44c:	01 97       	sbiw	r24, 0x01	; 1
     44e:	88 6f       	ori	r24, 0xF8	; 248
     450:	9f 6f       	ori	r25, 0xFF	; 255
     452:	01 96       	adiw	r24, 0x01	; 1
     454:	bc 01       	movw	r22, r24
     456:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <locationList>
	LocationList *locationlist = locationList;
     45a:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <locationList+0x1>
     45e:	30 97       	sbiw	r30, 0x00	; 0
	while(locationlist != NULL){
     460:	59 f1       	breq	.+86     	; 0x4b8 <addCandy+0x9a>
     462:	20 81       	ld	r18, Z
		if(locationlist->location.x == x && locationlist->location.y == y){
     464:	31 81       	ldd	r19, Z+1	; 0x01
     466:	2c 17       	cp	r18, r28
     468:	3d 07       	cpc	r19, r29
     46a:	09 f5       	brne	.+66     	; 0x4ae <addCandy+0x90>
     46c:	82 81       	ldd	r24, Z+2	; 0x02
     46e:	93 81       	ldd	r25, Z+3	; 0x03
     470:	86 17       	cp	r24, r22
     472:	97 07       	cpc	r25, r23
			rand(),rand();
     474:	d9 f4       	brne	.+54     	; 0x4ac <addCandy+0x8e>
     476:	fd d5       	rcall	.+3066   	; 0x1072 <rand>
     478:	fc d5       	rcall	.+3064   	; 0x1072 <rand>
     47a:	fb d5       	rcall	.+3062   	; 0x1072 <rand>
			x = (rand() % 8);
     47c:	87 70       	andi	r24, 0x07	; 7
     47e:	90 78       	andi	r25, 0x80	; 128
     480:	99 23       	and	r25, r25
     482:	24 f4       	brge	.+8      	; 0x48c <addCandy+0x6e>
     484:	01 97       	sbiw	r24, 0x01	; 1
     486:	88 6f       	ori	r24, 0xF8	; 248
     488:	9f 6f       	ori	r25, 0xFF	; 255
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	ec 01       	movw	r28, r24
     48e:	f1 d5       	rcall	.+3042   	; 0x1072 <rand>
			y = (rand() % 8);
     490:	87 70       	andi	r24, 0x07	; 7
     492:	90 78       	andi	r25, 0x80	; 128
     494:	99 23       	and	r25, r25
     496:	24 f4       	brge	.+8      	; 0x4a0 <addCandy+0x82>
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	88 6f       	ori	r24, 0xF8	; 248
     49c:	9f 6f       	ori	r25, 0xFF	; 255
     49e:	01 96       	adiw	r24, 0x01	; 1
     4a0:	bc 01       	movw	r22, r24
     4a2:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <locationList>
			locationlist = locationList;
     4a6:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <locationList+0x1>
     4aa:	01 c0       	rjmp	.+2      	; 0x4ae <addCandy+0x90>
     4ac:	e9 01       	movw	r28, r18
     4ae:	06 80       	ldd	r0, Z+6	; 0x06
     4b0:	f7 81       	ldd	r31, Z+7	; 0x07
		}
		locationlist = locationlist->next;
     4b2:	e0 2d       	mov	r30, r0
	rand(),rand(),rand(),rand(),rand(),rand();
	
	int x = (rand() % 8);
	int y = (rand() % 8);
	LocationList *locationlist = locationList;
	while(locationlist != NULL){
     4b4:	30 97       	sbiw	r30, 0x00	; 0
     4b6:	a9 f6       	brne	.-86     	; 0x462 <addCandy+0x44>
			y = (rand() % 8);
			locationlist = locationList;
		}
		locationlist = locationlist->next;
	}
	candy.x = x;
     4b8:	e6 e4       	ldi	r30, 0x46	; 70
     4ba:	f1 e0       	ldi	r31, 0x01	; 1
     4bc:	d1 83       	std	Z+1, r29	; 0x01
     4be:	c0 83       	st	Z, r28
	candy.y = y;
     4c0:	73 83       	std	Z+3, r23	; 0x03
     4c2:	62 83       	std	Z+2, r22	; 0x02
	displaySetPixel(x,y);
     4c4:	8c 2f       	mov	r24, r28
     4c6:	b0 de       	rcall	.-672    	; 0x228 <displaySetPixel>
     4c8:	66 df       	rcall	.-308    	; 0x396 <update>
	update();
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
}
     4ce:	08 95       	ret

000004d0 <checkForCollision>:
     4d0:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <locationList>

int checkForCollision(int x, int y)
{
	LocationList *locationlist = locationList;
     4d4:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <locationList+0x1>
	while(locationlist != NULL){
     4d8:	30 97       	sbiw	r30, 0x00	; 0
     4da:	91 f0       	breq	.+36     	; 0x500 <checkForCollision+0x30>
		if(locationlist->location.x == x && locationlist->location.y == y){
     4dc:	20 81       	ld	r18, Z
     4de:	31 81       	ldd	r19, Z+1	; 0x01
     4e0:	28 17       	cp	r18, r24
     4e2:	39 07       	cpc	r19, r25
     4e4:	29 f4       	brne	.+10     	; 0x4f0 <checkForCollision+0x20>
     4e6:	22 81       	ldd	r18, Z+2	; 0x02
     4e8:	33 81       	ldd	r19, Z+3	; 0x03
     4ea:	26 17       	cp	r18, r22
     4ec:	37 07       	cpc	r19, r23
     4ee:	59 f0       	breq	.+22     	; 0x506 <checkForCollision+0x36>
			return 1;
		}
		locationlist = locationlist->next;
     4f0:	06 80       	ldd	r0, Z+6	; 0x06
     4f2:	f7 81       	ldd	r31, Z+7	; 0x07
     4f4:	e0 2d       	mov	r30, r0
}

int checkForCollision(int x, int y)
{
	LocationList *locationlist = locationList;
	while(locationlist != NULL){
     4f6:	30 97       	sbiw	r30, 0x00	; 0
     4f8:	89 f7       	brne	.-30     	; 0x4dc <checkForCollision+0xc>
		if(locationlist->location.x == x && locationlist->location.y == y){
			return 1;
		}
		locationlist = locationlist->next;
	}
	return 0;
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	08 95       	ret
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	08 95       	ret
int checkForCollision(int x, int y)
{
	LocationList *locationlist = locationList;
	while(locationlist != NULL){
		if(locationlist->location.x == x && locationlist->location.y == y){
			return 1;
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
		}
		locationlist = locationlist->next;
	}
	return 0;
}
     50a:	08 95       	ret

0000050c <resetDisplay>:

void resetDisplay(void)
{
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
	LocationList *locationlist = locationList;
     510:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <locationList>
     514:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <locationList+0x1>
	while(locationList == NULL){
     518:	00 97       	sbiw	r24, 0x00	; 0
     51a:	99 f4       	brne	.+38     	; 0x542 <resetDisplay+0x36>
	}
	return 0;
}

void resetDisplay(void)
{
     51c:	d8 2f       	mov	r29, r24
     51e:	c9 2f       	mov	r28, r25
     520:	ed 2f       	mov	r30, r29
     522:	fc 2f       	mov	r31, r28
     524:	01 c0       	rjmp	.+2      	; 0x528 <resetDisplay+0x1c>
	LocationList *locationlist = locationList;
	while(locationList == NULL){
		while(locationlist->next != NULL){
		locationlist = locationlist->next;
     526:	f9 01       	movw	r30, r18

void resetDisplay(void)
{
	LocationList *locationlist = locationList;
	while(locationList == NULL){
		while(locationlist->next != NULL){
     528:	26 81       	ldd	r18, Z+6	; 0x06
     52a:	37 81       	ldd	r19, Z+7	; 0x07
     52c:	21 15       	cp	r18, r1
     52e:	31 05       	cpc	r19, r1
     530:	d1 f7       	brne	.-12     	; 0x526 <resetDisplay+0x1a>
		locationlist = locationlist->next;
		}
		free(locationlist);
     532:	cf 01       	movw	r24, r30
     534:	ce d4       	rcall	.+2460   	; 0xed2 <free>
}

void resetDisplay(void)
{
	LocationList *locationlist = locationList;
	while(locationList == NULL){
     536:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <locationList>
     53a:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <locationList+0x1>
     53e:	89 2b       	or	r24, r25
     540:	79 f3       	breq	.-34     	; 0x520 <resetDisplay+0x14>
		}
		free(locationlist);
		locationlist = NULL;
		locationlist = locationList;
	}
	maxSnakeSize = 4;
     542:	84 e0       	ldi	r24, 0x04	; 4
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <maxSnakeSize+0x1>
     54a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <maxSnakeSize>
}
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <moveToNewLocation>:


int moveToNewLocation(int x, int y)
{
     554:	6f 92       	push	r6
     556:	7f 92       	push	r7
     558:	8f 92       	push	r8
     55a:	9f 92       	push	r9
     55c:	af 92       	push	r10
     55e:	bf 92       	push	r11
     560:	cf 92       	push	r12
     562:	df 92       	push	r13
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	6c 01       	movw	r12, r24
     572:	5b 01       	movw	r10, r22
	
	if(x == candy.x && y == candy.y){
     574:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <candy>
     578:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <candy+0x1>
     57c:	8c 15       	cp	r24, r12
     57e:	9d 05       	cpc	r25, r13
     580:	51 f4       	brne	.+20     	; 0x596 <moveToNewLocation+0x42>
     582:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <candy+0x2>
     586:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <candy+0x3>
     58a:	86 17       	cp	r24, r22
     58c:	97 07       	cpc	r25, r23
     58e:	19 f4       	brne	.+6      	; 0x596 <moveToNewLocation+0x42>
		increaseSnakeSize();
     590:	3c df       	rcall	.-392    	; 0x40a <increaseSnakeSize>
		addCandy();
     592:	45 df       	rcall	.-374    	; 0x41e <addCandy>
		calculateNewScoreAppleCollected();
     594:	c7 d1       	rcall	.+910    	; 0x924 <calculateNewScoreAppleCollected>
	}
	if(!checkForCollision(x,y)){
     596:	b5 01       	movw	r22, r10
     598:	c6 01       	movw	r24, r12
     59a:	9a df       	rcall	.-204    	; 0x4d0 <checkForCollision>
     59c:	89 2b       	or	r24, r25
     59e:	09 f0       	breq	.+2      	; 0x5a2 <moveToNewLocation+0x4e>
	Location location;
	location.x = x;
	location.y = y;
	calculateNewScoreMovement();
     5a0:	9a c0       	rjmp	.+308    	; 0x6d6 <moveToNewLocation+0x182>
     5a2:	d3 d1       	rcall	.+934    	; 0x94a <calculateNewScoreMovement>
	// add sound
	int size = getLocationListSize();
     5a4:	20 df       	rcall	.-448    	; 0x3e6 <getLocationListSize>
     5a6:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <maxSnakeSize>
	if(size < maxSnakeSize){
     5aa:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <maxSnakeSize+0x1>
     5ae:	82 17       	cp	r24, r18
     5b0:	93 07       	cpc	r25, r19
     5b2:	6c f5       	brge	.+90     	; 0x60e <moveToNewLocation+0xba>
		displaySetPixel(x,y);
     5b4:	6a 2d       	mov	r22, r10
     5b6:	8c 2d       	mov	r24, r12
     5b8:	37 de       	rcall	.-914    	; 0x228 <displaySetPixel>
     5ba:	c0 91 56 01 	lds	r28, 0x0156	; 0x800156 <locationList>
		LocationList *locactionlist = locationList;
     5be:	d0 91 57 01 	lds	r29, 0x0157	; 0x800157 <locationList+0x1>
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <moveToNewLocation+0x72>
		while(locactionlist->next != NULL){
     5c4:	ec 01       	movw	r28, r24
     5c6:	8e 81       	ldd	r24, Y+6	; 0x06
     5c8:	9f 81       	ldd	r25, Y+7	; 0x07
     5ca:	00 97       	sbiw	r24, 0x00	; 0
     5cc:	d9 f7       	brne	.-10     	; 0x5c4 <moveToNewLocation+0x70>
			locactionlist = locactionlist->next;
		}
		
		LocationList *newLocation = (LocationList *)malloc(sizeof(LocationList));
     5ce:	88 e0       	ldi	r24, 0x08	; 8
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	e7 d3       	rcall	.+1998   	; 0xda2 <malloc>
     5d4:	fc 01       	movw	r30, r24
     5d6:	d1 82       	std	Z+1, r13	; 0x01
		newLocation->location = location;
     5d8:	c0 82       	st	Z, r12
     5da:	b3 82       	std	Z+3, r11	; 0x03
     5dc:	a2 82       	std	Z+2, r10	; 0x02
     5de:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <counter>
		newLocation->number = counter;
     5e2:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <counter+0x1>
     5e6:	95 83       	std	Z+5, r25	; 0x05
     5e8:	84 83       	std	Z+4, r24	; 0x04
     5ea:	17 82       	std	Z+7, r1	; 0x07
		//writeLedDisplay(counter);
		newLocation->next = NULL;
     5ec:	16 82       	std	Z+6, r1	; 0x06
     5ee:	ff 83       	std	Y+7, r31	; 0x07
		locactionlist->next = newLocation;
     5f0:	ee 83       	std	Y+6, r30	; 0x06
     5f2:	01 96       	adiw	r24, 0x01	; 1
		
		counter++;
     5f4:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <counter+0x1>
     5f8:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <counter>
     5fc:	ea e4       	ldi	r30, 0x4A	; 74
		currentLocation.x = x;
     5fe:	f1 e0       	ldi	r31, 0x01	; 1
     600:	d1 82       	std	Z+1, r13	; 0x01
     602:	c0 82       	st	Z, r12
		currentLocation.y = y;
     604:	b3 82       	std	Z+3, r11	; 0x03
     606:	a2 82       	std	Z+2, r10	; 0x02
	}else
	{
		displayClr();
		return 0;
	}
	return 1;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	73 c0       	rjmp	.+230    	; 0x6f4 <moveToNewLocation+0x1a0>
		counter++;
		currentLocation.x = x;
		currentLocation.y = y;
	}else{
		//writeLedDisplay(2);
		displaySetPixel(x,y);
     60e:	6a 2d       	mov	r22, r10
     610:	8c 2d       	mov	r24, r12
     612:	0a de       	rcall	.-1004   	; 0x228 <displaySetPixel>
     614:	e0 90 56 01 	lds	r14, 0x0156	; 0x800156 <locationList>
		LocationList *locationlist = locationList;
     618:	f0 90 57 01 	lds	r15, 0x0157	; 0x800157 <locationList+0x1>
     61c:	f7 01       	movw	r30, r14
		int minimal = locationlist->number;
     61e:	44 81       	ldd	r20, Z+4	; 0x04
     620:	55 81       	ldd	r21, Z+5	; 0x05
     622:	e1 14       	cp	r14, r1
		int locationCounter = 0;
		int position = 0;
		while(locationlist != NULL){
     624:	f1 04       	cpc	r15, r1
     626:	59 f4       	brne	.+22     	; 0x63e <moveToNewLocation+0xea>
     628:	81 e0       	ldi	r24, 0x01	; 1
			previousLocation = locationlist;
			locationlist = locationlist->next;
			locationCounter++;
			
		}
		return 1;
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	63 c0       	rjmp	.+198    	; 0x6f4 <moveToNewLocation+0x1a0>
     62e:	2c 81       	ldd	r18, Y+4	; 0x04
		LocationList *locationlist = locationList;
		int minimal = locationlist->number;
		int locationCounter = 0;
		int position = 0;
		while(locationlist != NULL){
			if(locationlist->number < minimal){
     630:	3d 81       	ldd	r19, Y+5	; 0x05
     632:	24 17       	cp	r18, r20
     634:	35 07       	cpc	r19, r21
     636:	44 f4       	brge	.+16     	; 0x648 <moveToNewLocation+0xf4>
     638:	4c 01       	movw	r8, r24
				minimal = locationlist->number;
				position = locationCounter;
			}
			locationCounter++;
     63a:	a9 01       	movw	r20, r18
		LocationList *locationlist = locationList;
		int minimal = locationlist->number;
		int locationCounter = 0;
		int position = 0;
		while(locationlist != NULL){
			if(locationlist->number < minimal){
     63c:	05 c0       	rjmp	.+10     	; 0x648 <moveToNewLocation+0xf4>
     63e:	e7 01       	movw	r28, r14
		displaySetPixel(x,y);
		LocationList *locationlist = locationList;
		int minimal = locationlist->number;
		int locationCounter = 0;
		int position = 0;
		while(locationlist != NULL){
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	81 2c       	mov	r8, r1
     646:	91 2c       	mov	r9, r1
     648:	01 96       	adiw	r24, 0x01	; 1
			if(locationlist->number < minimal){
				minimal = locationlist->number;
				position = locationCounter;
			}
			locationCounter++;
     64a:	0e 80       	ldd	r0, Y+6	; 0x06
			locationlist = locationlist->next;
     64c:	df 81       	ldd	r29, Y+7	; 0x07
     64e:	c0 2d       	mov	r28, r0
     650:	20 97       	sbiw	r28, 0x00	; 0
		displaySetPixel(x,y);
		LocationList *locationlist = locationList;
		int minimal = locationlist->number;
		int locationCounter = 0;
		int position = 0;
		while(locationlist != NULL){
     652:	69 f7       	brne	.-38     	; 0x62e <moveToNewLocation+0xda>
     654:	44 c0       	rjmp	.+136    	; 0x6de <moveToNewLocation+0x18a>
     656:	88 16       	cp	r8, r24
		locationlist = locationList;
		locationCounter = 0;
		LocationList *newLocation = (LocationList *)malloc(sizeof(LocationList));
		LocationList *previousLocation = NULL; 
		while(locationlist != NULL){
			if(locationCounter == position){
     658:	99 06       	cpc	r9, r25
     65a:	91 f5       	brne	.+100    	; 0x6c0 <moveToNewLocation+0x16c>
     65c:	02 c0       	rjmp	.+4      	; 0x662 <moveToNewLocation+0x10e>
			}
			locationCounter++;
			locationlist = locationlist->next;
		}
		
		locationlist = locationList;
     65e:	87 01       	movw	r16, r14
		locationCounter = 0;
		LocationList *newLocation = (LocationList *)malloc(sizeof(LocationList));
		LocationList *previousLocation = NULL; 
     660:	7e 01       	movw	r14, r28
		while(locationlist != NULL){
			if(locationCounter == position){
				displayClrPixel(locationlist->location.x,locationlist->location.y);
     662:	f8 01       	movw	r30, r16
     664:	62 81       	ldd	r22, Z+2	; 0x02
     666:	80 81       	ld	r24, Z
     668:	17 de       	rcall	.-978    	; 0x298 <displayClrPixel>
     66a:	f3 01       	movw	r30, r6
			//	writeLedDisplay(p->number);
				newLocation->location = location;
     66c:	d1 82       	std	Z+1, r13	; 0x01
     66e:	c0 82       	st	Z, r12
     670:	b3 82       	std	Z+3, r11	; 0x03
     672:	a2 82       	std	Z+2, r10	; 0x02
     674:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <counter>
				newLocation->number = counter;
     678:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <counter+0x1>
     67c:	95 83       	std	Z+5, r25	; 0x05
     67e:	84 83       	std	Z+4, r24	; 0x04
     680:	f8 01       	movw	r30, r16
				newLocation->next = locationlist->next;
     682:	26 81       	ldd	r18, Z+6	; 0x06
     684:	37 81       	ldd	r19, Z+7	; 0x07
     686:	f3 01       	movw	r30, r6
     688:	37 83       	std	Z+7, r19	; 0x07
     68a:	26 83       	std	Z+6, r18	; 0x06
				counter++;
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <counter+0x1>
     692:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <counter>
				free(locationlist);
     696:	c8 01       	movw	r24, r16
     698:	1c d4       	rcall	.+2104   	; 0xed2 <free>
     69a:	89 28       	or	r8, r9
				if(position == 0){
     69c:	29 f4       	brne	.+10     	; 0x6a8 <moveToNewLocation+0x154>
     69e:	70 92 57 01 	sts	0x0157, r7	; 0x800157 <locationList+0x1>
					locationList = newLocation;	
     6a2:	60 92 56 01 	sts	0x0156, r6	; 0x800156 <locationList>
     6a6:	03 c0       	rjmp	.+6      	; 0x6ae <moveToNewLocation+0x15a>
     6a8:	f7 01       	movw	r30, r14
				}else{
					previousLocation->next = newLocation;
     6aa:	77 82       	std	Z+7, r7	; 0x07
     6ac:	66 82       	std	Z+6, r6	; 0x06
     6ae:	ea e4       	ldi	r30, 0x4A	; 74
				}
				currentLocation.x = x;
     6b0:	f1 e0       	ldi	r31, 0x01	; 1
     6b2:	d1 82       	std	Z+1, r13	; 0x01
     6b4:	c0 82       	st	Z, r12
     6b6:	b3 82       	std	Z+3, r11	; 0x03
				currentLocation.y = y;
     6b8:	a2 82       	std	Z+2, r10	; 0x02
     6ba:	81 e0       	ldi	r24, 0x01	; 1
			previousLocation = locationlist;
			locationlist = locationlist->next;
			locationCounter++;
			
		}
		return 1;
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	1a c0       	rjmp	.+52     	; 0x6f4 <moveToNewLocation+0x1a0>
				}else{
					previousLocation->next = newLocation;
				}
				currentLocation.x = x;
				currentLocation.y = y;
				break;
     6c0:	78 01       	movw	r14, r16
			}
			previousLocation = locationlist;
			locationlist = locationlist->next;
     6c2:	f7 01       	movw	r30, r14
     6c4:	06 81       	ldd	r16, Z+6	; 0x06
     6c6:	17 81       	ldd	r17, Z+7	; 0x07
			locationCounter++;
     6c8:	01 96       	adiw	r24, 0x01	; 1
		
		locationlist = locationList;
		locationCounter = 0;
		LocationList *newLocation = (LocationList *)malloc(sizeof(LocationList));
		LocationList *previousLocation = NULL; 
		while(locationlist != NULL){
     6ca:	01 15       	cp	r16, r1
     6cc:	11 05       	cpc	r17, r1
			previousLocation = locationlist;
			locationlist = locationlist->next;
			locationCounter++;
			
		}
		return 1;
     6ce:	19 f6       	brne	.-122    	; 0x656 <moveToNewLocation+0x102>
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	90 e0       	ldi	r25, 0x00	; 0
		}
	}else
	{
		displayClr();
     6d4:	0f c0       	rjmp	.+30     	; 0x6f4 <moveToNewLocation+0x1a0>
     6d6:	ef dd       	rcall	.-1058   	; 0x2b6 <displayClr>
		return 0;
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0b c0       	rjmp	.+22     	; 0x6f4 <moveToNewLocation+0x1a0>
			locationlist = locationlist->next;
		}
		
		locationlist = locationList;
		locationCounter = 0;
		LocationList *newLocation = (LocationList *)malloc(sizeof(LocationList));
     6de:	88 e0       	ldi	r24, 0x08	; 8
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	5f d3       	rcall	.+1726   	; 0xda2 <malloc>
     6e4:	3c 01       	movw	r6, r24
     6e6:	81 14       	cp	r8, r1
		LocationList *previousLocation = NULL; 
		while(locationlist != NULL){
			if(locationCounter == position){
     6e8:	91 04       	cpc	r9, r1
     6ea:	09 f4       	brne	.+2      	; 0x6ee <moveToNewLocation+0x19a>
     6ec:	b8 cf       	rjmp	.-144    	; 0x65e <moveToNewLocation+0x10a>
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	e7 cf       	rjmp	.-50     	; 0x6c2 <moveToNewLocation+0x16e>
     6f4:	df 91       	pop	r29
	{
		displayClr();
		return 0;
	}
	return 1;
}
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	df 90       	pop	r13
     702:	cf 90       	pop	r12
     704:	bf 90       	pop	r11
     706:	af 90       	pop	r10
     708:	9f 90       	pop	r9
     70a:	8f 90       	pop	r8
     70c:	7f 90       	pop	r7
     70e:	6f 90       	pop	r6
     710:	08 95       	ret

00000712 <moveSnakeUp>:
     712:	ea e4       	ldi	r30, 0x4A	; 74
		
int moveSnakeUp(){
	
	int x = currentLocation.x;
     714:	f1 e0       	ldi	r31, 0x01	; 1
     716:	80 81       	ld	r24, Z
     718:	91 81       	ldd	r25, Z+1	; 0x01
	int y = currentLocation.y;
     71a:	62 81       	ldd	r22, Z+2	; 0x02
     71c:	73 81       	ldd	r23, Z+3	; 0x03
	
	x--;
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	10 f4       	brcc	.+4      	; 0x726 <moveSnakeUp+0x14>
	if(x == -1){
		x = 7;
     722:	87 e0       	ldi	r24, 0x07	; 7
     724:	90 e0       	ldi	r25, 0x00	; 0
	}
	if(moveToNewLocation(x,y)){
     726:	16 df       	rcall	.-468    	; 0x554 <moveToNewLocation>
     728:	00 97       	sbiw	r24, 0x00	; 0
     72a:	19 f0       	breq	.+6      	; 0x732 <moveSnakeUp+0x20>
		update();
     72c:	34 de       	rcall	.-920    	; 0x396 <update>
     72e:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	08 95       	ret

00000734 <moveSnakeDown>:
	}else{
		return 0;
	}
	
}
     734:	ea e4       	ldi	r30, 0x4A	; 74
int moveSnakeDown(){
	int x = currentLocation.x;
     736:	f1 e0       	ldi	r31, 0x01	; 1
     738:	80 81       	ld	r24, Z
     73a:	91 81       	ldd	r25, Z+1	; 0x01
	int y = currentLocation.y;
     73c:	62 81       	ldd	r22, Z+2	; 0x02
     73e:	73 81       	ldd	r23, Z+3	; 0x03
	
	x++;
     740:	01 96       	adiw	r24, 0x01	; 1
	if(x == 8){
     742:	88 30       	cpi	r24, 0x08	; 8
     744:	91 05       	cpc	r25, r1
     746:	11 f4       	brne	.+4      	; 0x74c <moveSnakeDown+0x18>
		x = 0;
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
	}
	if(moveToNewLocation(x,y)){
     74c:	03 df       	rcall	.-506    	; 0x554 <moveToNewLocation>
     74e:	00 97       	sbiw	r24, 0x00	; 0
     750:	19 f0       	breq	.+6      	; 0x758 <moveSnakeDown+0x24>
		update();
     752:	21 de       	rcall	.-958    	; 0x396 <update>
     754:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	08 95       	ret

0000075a <moveSnakeLeft>:
	}else{
		return 0;
	}
}
     75a:	ea e4       	ldi	r30, 0x4A	; 74

int moveSnakeLeft(){
	int x = currentLocation.x;
     75c:	f1 e0       	ldi	r31, 0x01	; 1
     75e:	80 81       	ld	r24, Z
     760:	91 81       	ldd	r25, Z+1	; 0x01
	int y = currentLocation.y;
     762:	62 81       	ldd	r22, Z+2	; 0x02
     764:	73 81       	ldd	r23, Z+3	; 0x03

	y++;
     766:	6f 5f       	subi	r22, 0xFF	; 255
     768:	7f 4f       	sbci	r23, 0xFF	; 255
	if(y == 8){
     76a:	68 30       	cpi	r22, 0x08	; 8
     76c:	71 05       	cpc	r23, r1
     76e:	11 f4       	brne	.+4      	; 0x774 <moveSnakeLeft+0x1a>
		y = 0;
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	70 e0       	ldi	r23, 0x00	; 0
	}
	if(moveToNewLocation(x,y)){
     774:	ef de       	rcall	.-546    	; 0x554 <moveToNewLocation>
     776:	00 97       	sbiw	r24, 0x00	; 0
     778:	19 f0       	breq	.+6      	; 0x780 <moveSnakeLeft+0x26>
		update();
     77a:	0d de       	rcall	.-998    	; 0x396 <update>
     77c:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	08 95       	ret

00000782 <moveSnakeRight>:
		}else{
		return 0;
	}
}
     782:	ea e4       	ldi	r30, 0x4A	; 74

int moveSnakeRight(){
	int x = currentLocation.x;
     784:	f1 e0       	ldi	r31, 0x01	; 1
     786:	80 81       	ld	r24, Z
     788:	91 81       	ldd	r25, Z+1	; 0x01
	int y = currentLocation.y;
     78a:	62 81       	ldd	r22, Z+2	; 0x02
     78c:	73 81       	ldd	r23, Z+3	; 0x03
	
	y--;
     78e:	61 50       	subi	r22, 0x01	; 1
     790:	71 09       	sbc	r23, r1
     792:	10 f4       	brcc	.+4      	; 0x798 <moveSnakeRight+0x16>
	if(y == -1){
		y = 7;
     794:	67 e0       	ldi	r22, 0x07	; 7
     796:	70 e0       	ldi	r23, 0x00	; 0
	}
	if(moveToNewLocation(x,y)){
     798:	dd de       	rcall	.-582    	; 0x554 <moveToNewLocation>
     79a:	00 97       	sbiw	r24, 0x00	; 0
     79c:	19 f0       	breq	.+6      	; 0x7a4 <moveSnakeRight+0x22>
		update();
     79e:	fb dd       	rcall	.-1034   	; 0x396 <update>
     7a0:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	08 95       	ret

000007a6 <spi_masterInit>:
		}else{
		return 0;
	}
     7a6:	8f ef       	ldi	r24, 0xFF	; 255
void displayOff(void)
{
	spi_slaveSelect(0);		// Select display chip
	spi_write(0x0C);		// Register 0B: Shutdown register
	spi_write(0x00);		// -> 1 = Normal operation
	spi_slaveDeSelect(0);	// Deselect display chip
     7a8:	87 bb       	out	0x17, r24	; 23
     7aa:	bb 98       	cbi	0x17, 3	; 23
     7ac:	c0 9a       	sbi	0x18, 0	; 24
     7ae:	82 e5       	ldi	r24, 0x52	; 82
     7b0:	8d b9       	out	0x0d, r24	; 13
     7b2:	08 95       	ret

000007b4 <spi_write>:
     7b4:	8f b9       	out	0x0f, r24	; 15
     7b6:	77 9b       	sbis	0x0e, 7	; 14
     7b8:	fe cf       	rjmp	.-4      	; 0x7b6 <spi_write+0x2>
     7ba:	08 95       	ret

000007bc <spi_slaveSelect>:
     7bc:	98 b3       	in	r25, 0x18	; 24
     7be:	21 e0       	ldi	r18, 0x01	; 1
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <spi_slaveSelect+0xc>
     7c4:	22 0f       	add	r18, r18
     7c6:	33 1f       	adc	r19, r19
     7c8:	8a 95       	dec	r24
     7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <spi_slaveSelect+0x8>
     7cc:	20 95       	com	r18
     7ce:	29 23       	and	r18, r25
     7d0:	28 bb       	out	0x18, r18	; 24
     7d2:	08 95       	ret

000007d4 <spi_slaveDeSelect>:
     7d4:	98 b3       	in	r25, 0x18	; 24
     7d6:	21 e0       	ldi	r18, 0x01	; 1
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <spi_slaveDeSelect+0xc>
     7dc:	22 0f       	add	r18, r18
     7de:	33 1f       	adc	r19, r19
     7e0:	8a 95       	dec	r24
     7e2:	e2 f7       	brpl	.-8      	; 0x7dc <spi_slaveDeSelect+0x8>
     7e4:	29 2b       	or	r18, r25
     7e6:	28 bb       	out	0x18, r18	; 24
     7e8:	08 95       	ret

000007ea <displayDriverInit>:
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	e7 df       	rcall	.-50     	; 0x7bc <spi_slaveSelect>
     7ee:	89 e0       	ldi	r24, 0x09	; 9
     7f0:	e1 df       	rcall	.-62     	; 0x7b4 <spi_write>
     7f2:	8f ef       	ldi	r24, 0xFF	; 255
     7f4:	df df       	rcall	.-66     	; 0x7b4 <spi_write>
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	ed df       	rcall	.-38     	; 0x7d4 <spi_slaveDeSelect>
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	df df       	rcall	.-66     	; 0x7bc <spi_slaveSelect>
     7fe:	8a e0       	ldi	r24, 0x0A	; 10
     800:	d9 df       	rcall	.-78     	; 0x7b4 <spi_write>
     802:	8f e0       	ldi	r24, 0x0F	; 15
     804:	d7 df       	rcall	.-82     	; 0x7b4 <spi_write>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	e5 df       	rcall	.-54     	; 0x7d4 <spi_slaveDeSelect>
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	d7 df       	rcall	.-82     	; 0x7bc <spi_slaveSelect>
     80e:	8b e0       	ldi	r24, 0x0B	; 11
     810:	d1 df       	rcall	.-94     	; 0x7b4 <spi_write>
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	cf df       	rcall	.-98     	; 0x7b4 <spi_write>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	dd df       	rcall	.-70     	; 0x7d4 <spi_slaveDeSelect>
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	cf df       	rcall	.-98     	; 0x7bc <spi_slaveSelect>
     81e:	8c e0       	ldi	r24, 0x0C	; 12
     820:	c9 df       	rcall	.-110    	; 0x7b4 <spi_write>
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	c7 df       	rcall	.-114    	; 0x7b4 <spi_write>
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	d5 cf       	rjmp	.-86     	; 0x7d4 <spi_slaveDeSelect>
     82a:	08 95       	ret

0000082c <spi_writeWord>:
}

void spi_writeWord(unsigned char adress, unsigned char data )
{
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	d8 2f       	mov	r29, r24
     832:	c6 2f       	mov	r28, r22
	spi_slaveSelect(0);		// Select display chip
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	c2 df       	rcall	.-124    	; 0x7bc <spi_slaveSelect>
	spi_write(adress);		// digit adress: (digit place)
     838:	8d 2f       	mov	r24, r29
     83a:	bc df       	rcall	.-136    	; 0x7b4 <spi_write>
	spi_write(data);		// digit value: 0
     83c:	8c 2f       	mov	r24, r28
     83e:	ba df       	rcall	.-140    	; 0x7b4 <spi_write>
	spi_slaveDeSelect(0);	// Deselect display chip
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	c8 df       	rcall	.-112    	; 0x7d4 <spi_slaveDeSelect>
     844:	df 91       	pop	r29
}
     846:	cf 91       	pop	r28
     848:	08 95       	ret

0000084a <clearDisplay>:
     84a:	cf 93       	push	r28
	}
}

void clearDisplay(void)
{
	for (char i =1; i<=4; i++)
     84c:	c1 e0       	ldi	r28, 0x01	; 1
	{
		spi_writeWord(i, 0);
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	8c 2f       	mov	r24, r28
     852:	ec df       	rcall	.-40     	; 0x82c <spi_writeWord>
	}
}

void clearDisplay(void)
{
	for (char i =1; i<=4; i++)
     854:	cf 5f       	subi	r28, 0xFF	; 255
     856:	c5 30       	cpi	r28, 0x05	; 5
     858:	d1 f7       	brne	.-12     	; 0x84e <clearDisplay+0x4>
	{
		spi_writeWord(i, 0);
	}
}
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <writeLedDisplay>:
	spi_write(data);		// digit value: 0
	spi_slaveDeSelect(0);	// Deselect display chip
}

void writeLedDisplay(int value)
{
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	08 2f       	mov	r16, r24
     868:	19 2f       	mov	r17, r25
	clearDisplay();
     86a:	ef df       	rcall	.-34     	; 0x84a <clearDisplay>
     86c:	c0 2f       	mov	r28, r16
     86e:	d1 2f       	mov	r29, r17
     870:	c0 31       	cpi	r28, 0x10	; 16
     872:	87 e2       	ldi	r24, 0x27	; 39
     874:	d8 07       	cpc	r29, r24
     876:	14 f0       	brlt	.+4      	; 0x87c <writeLedDisplay+0x1e>
     878:	cf e0       	ldi	r28, 0x0F	; 15
     87a:	d7 e2       	ldi	r29, 0x27	; 39
	if(value > 9999){
		value = 9999;
	}
	if(value < 0)
     87c:	dd 23       	and	r29, r29
     87e:	54 f5       	brge	.+84     	; 0x8d4 <writeLedDisplay+0x76>
		if(value < -999)
		{
			value = -999;
		}

		int tempValue = abs(value);
     880:	c9 31       	cpi	r28, 0x19	; 25
     882:	8c ef       	ldi	r24, 0xFC	; 252
     884:	d8 07       	cpc	r29, r24
     886:	14 f4       	brge	.+4      	; 0x88c <writeLedDisplay+0x2e>
     888:	c9 e1       	ldi	r28, 0x19	; 25
     88a:	dc ef       	ldi	r29, 0xFC	; 252
     88c:	8e 01       	movw	r16, r28
     88e:	dd 23       	and	r29, r29
     890:	24 f4       	brge	.+8      	; 0x89a <writeLedDisplay+0x3c>
     892:	00 27       	eor	r16, r16
     894:	11 27       	eor	r17, r17
     896:	0c 1b       	sub	r16, r28
     898:	1d 0b       	sbc	r17, r29
		int num3 = (tempValue / 1) % 10;
		int num2 = (tempValue / 10) % 10;
		int num1 = (tempValue / 100) % 10;

		spi_writeWord(4, 10);
     89a:	6a e0       	ldi	r22, 0x0A	; 10
     89c:	84 e0       	ldi	r24, 0x04	; 4
     89e:	c6 df       	rcall	.-116    	; 0x82c <spi_writeWord>
		spi_writeWord(3, num1);
     8a0:	c8 01       	movw	r24, r16
     8a2:	64 e6       	ldi	r22, 0x64	; 100
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	56 d2       	rcall	.+1196   	; 0xd54 <__divmodhi4>
     8a8:	cb 01       	movw	r24, r22
     8aa:	ca e0       	ldi	r28, 0x0A	; 10
     8ac:	d0 e0       	ldi	r29, 0x00	; 0
     8ae:	be 01       	movw	r22, r28
     8b0:	51 d2       	rcall	.+1186   	; 0xd54 <__divmodhi4>
     8b2:	68 2f       	mov	r22, r24
     8b4:	83 e0       	ldi	r24, 0x03	; 3
     8b6:	ba df       	rcall	.-140    	; 0x82c <spi_writeWord>
		spi_writeWord(2, num2);
     8b8:	c8 01       	movw	r24, r16
     8ba:	be 01       	movw	r22, r28
     8bc:	4b d2       	rcall	.+1174   	; 0xd54 <__divmodhi4>
     8be:	18 2f       	mov	r17, r24
     8c0:	cb 01       	movw	r24, r22
     8c2:	be 01       	movw	r22, r28
     8c4:	47 d2       	rcall	.+1166   	; 0xd54 <__divmodhi4>
     8c6:	68 2f       	mov	r22, r24
     8c8:	82 e0       	ldi	r24, 0x02	; 2
     8ca:	b0 df       	rcall	.-160    	; 0x82c <spi_writeWord>
		spi_writeWord(1, num3);
     8cc:	61 2f       	mov	r22, r17
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	ad df       	rcall	.-166    	; 0x82c <spi_writeWord>
     8d2:	23 c0       	rjmp	.+70     	; 0x91a <writeLedDisplay+0xbc>
		int num4 = (value / 1) % 10;
		int num3 = (value / 10) % 10;
		int num2 = (value / 100) % 10;
		int num1 = (value / 1000) % 10;

		spi_writeWord(4, num1);
     8d4:	ce 01       	movw	r24, r28
     8d6:	68 ee       	ldi	r22, 0xE8	; 232
     8d8:	73 e0       	ldi	r23, 0x03	; 3
     8da:	3c d2       	rcall	.+1144   	; 0xd54 <__divmodhi4>
     8dc:	cb 01       	movw	r24, r22
     8de:	0a e0       	ldi	r16, 0x0A	; 10
     8e0:	10 e0       	ldi	r17, 0x00	; 0
     8e2:	b8 01       	movw	r22, r16
     8e4:	37 d2       	rcall	.+1134   	; 0xd54 <__divmodhi4>
     8e6:	68 2f       	mov	r22, r24
     8e8:	84 e0       	ldi	r24, 0x04	; 4
     8ea:	a0 df       	rcall	.-192    	; 0x82c <spi_writeWord>
		spi_writeWord(3, num2);
     8ec:	ce 01       	movw	r24, r28
     8ee:	64 e6       	ldi	r22, 0x64	; 100
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	30 d2       	rcall	.+1120   	; 0xd54 <__divmodhi4>
     8f4:	cb 01       	movw	r24, r22
     8f6:	b8 01       	movw	r22, r16
     8f8:	2d d2       	rcall	.+1114   	; 0xd54 <__divmodhi4>
     8fa:	68 2f       	mov	r22, r24
     8fc:	83 e0       	ldi	r24, 0x03	; 3
     8fe:	96 df       	rcall	.-212    	; 0x82c <spi_writeWord>
		spi_writeWord(2, num3);
     900:	ce 01       	movw	r24, r28
     902:	b8 01       	movw	r22, r16
     904:	27 d2       	rcall	.+1102   	; 0xd54 <__divmodhi4>
     906:	c8 2f       	mov	r28, r24
     908:	cb 01       	movw	r24, r22
     90a:	b8 01       	movw	r22, r16
     90c:	23 d2       	rcall	.+1094   	; 0xd54 <__divmodhi4>
     90e:	68 2f       	mov	r22, r24
     910:	82 e0       	ldi	r24, 0x02	; 2
     912:	8c df       	rcall	.-232    	; 0x82c <spi_writeWord>
     914:	6c 2f       	mov	r22, r28
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	89 df       	rcall	.-238    	; 0x82c <spi_writeWord>
		spi_writeWord(1, num4);
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
	}
}
     922:	08 95       	ret

00000924 <calculateNewScoreAppleCollected>:
     924:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <score>
     928:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <score+0x1>
	}
}

void calculateNewScoreAppleCollected()
{
	score += 20;
     92c:	44 96       	adiw	r24, 0x14	; 20
     92e:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <score+0x1>
     932:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <score>
	writeLedDisplay(score);
     936:	93 cf       	rjmp	.-218    	; 0x85e <writeLedDisplay>
     938:	08 95       	ret

0000093a <resetScore>:
}

void resetScore(){
	score = 0;
     93a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <score+0x1>
     93e:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <score>
	writeLedDisplay(score);
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	8b cf       	rjmp	.-234    	; 0x85e <writeLedDisplay>
     948:	08 95       	ret

0000094a <calculateNewScoreMovement>:
}

void calculateNewScoreMovement()
{
     94a:	08 95       	ret

0000094c <menu>:

int gameSpeed = 0;
int tick = 0;
int check = 1;

void menu(){
     94c:	0f 93       	push	r16
     94e:	1f 93       	push	r17
     950:	cf 93       	push	r28
	int inMenu = 1;
	int position = 0;
	lcd_write_command(12);
     952:	8c e0       	ldi	r24, 0x0C	; 12
     954:	c4 d1       	rcall	.+904    	; 0xcde <lcd_write_command>
int tick = 0;
int check = 1;

void menu(){
	int inMenu = 1;
	int position = 0;
     956:	00 e0       	ldi	r16, 0x00	; 0
     958:	10 e0       	ldi	r17, 0x00	; 0
	lcd_write_command(12);
	while(inMenu){
		lcd_write_command(2);
     95a:	82 e0       	ldi	r24, 0x02	; 2
     95c:	c0 d1       	rcall	.+896    	; 0xcde <lcd_write_command>
		lcd_write_command(1);
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	be d1       	rcall	.+892    	; 0xcde <lcd_write_command>
     962:	01 15       	cp	r16, r1
	
		if(position == 0){
     964:	11 05       	cpc	r17, r1
     966:	71 f4       	brne	.+28     	; 0x984 <menu+0x38>
			lcd_write_string("> Easy");
     968:	8f e0       	ldi	r24, 0x0F	; 15
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	aa d1       	rcall	.+852    	; 0xcc2 <lcd_write_string>
			lcd_write_command(168);
     96e:	88 ea       	ldi	r24, 0xA8	; 168
     970:	b6 d1       	rcall	.+876    	; 0xcde <lcd_write_command>
			lcd_write_string(" ");
     972:	86 e1       	ldi	r24, 0x16	; 22
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	a5 d1       	rcall	.+842    	; 0xcc2 <lcd_write_string>
			lcd_write_command(168);
     978:	88 ea       	ldi	r24, 0xA8	; 168
     97a:	b1 d1       	rcall	.+866    	; 0xcde <lcd_write_command>
     97c:	88 e1       	ldi	r24, 0x18	; 24
			lcd_write_string("  Normal");
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	a0 d1       	rcall	.+832    	; 0xcc2 <lcd_write_string>
     982:	21 c0       	rjmp	.+66     	; 0x9c6 <menu+0x7a>
     984:	01 30       	cpi	r16, 0x01	; 1
		}else
		if(position == 1){
     986:	11 05       	cpc	r17, r1
     988:	71 f4       	brne	.+28     	; 0x9a6 <menu+0x5a>
			lcd_write_string("> Normal");
     98a:	81 e2       	ldi	r24, 0x21	; 33
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	99 d1       	rcall	.+818    	; 0xcc2 <lcd_write_string>
			lcd_write_command(168);
     990:	88 ea       	ldi	r24, 0xA8	; 168
     992:	a5 d1       	rcall	.+842    	; 0xcde <lcd_write_command>
			lcd_write_string(" ");
     994:	86 e1       	ldi	r24, 0x16	; 22
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	94 d1       	rcall	.+808    	; 0xcc2 <lcd_write_string>
     99a:	88 ea       	ldi	r24, 0xA8	; 168
			lcd_write_command(168);
     99c:	a0 d1       	rcall	.+832    	; 0xcde <lcd_write_command>
     99e:	8a e2       	ldi	r24, 0x2A	; 42
			lcd_write_string("  Hard");
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	8f d1       	rcall	.+798    	; 0xcc2 <lcd_write_string>
     9a4:	10 c0       	rjmp	.+32     	; 0x9c6 <menu+0x7a>
     9a6:	02 30       	cpi	r16, 0x02	; 2
		}else
		if(position == 2){
     9a8:	11 05       	cpc	r17, r1
     9aa:	69 f4       	brne	.+26     	; 0x9c6 <menu+0x7a>
			lcd_write_string("  Normal");
     9ac:	88 e1       	ldi	r24, 0x18	; 24
     9ae:	91 e0       	ldi	r25, 0x01	; 1
     9b0:	88 d1       	rcall	.+784    	; 0xcc2 <lcd_write_string>
			lcd_write_command(168);
     9b2:	88 ea       	ldi	r24, 0xA8	; 168
     9b4:	94 d1       	rcall	.+808    	; 0xcde <lcd_write_command>
     9b6:	86 e1       	ldi	r24, 0x16	; 22
			lcd_write_string(" ");
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	83 d1       	rcall	.+774    	; 0xcc2 <lcd_write_string>
     9bc:	88 ea       	ldi	r24, 0xA8	; 168
			lcd_write_command(168);
     9be:	8f d1       	rcall	.+798    	; 0xcde <lcd_write_command>
     9c0:	81 e3       	ldi	r24, 0x31	; 49
     9c2:	91 e0       	ldi	r25, 0x01	; 1
			lcd_write_string("> Hard");
     9c4:	7e d1       	rcall	.+764    	; 0xcc2 <lcd_write_string>
     9c6:	84 ef       	ldi	r24, 0xF4	; 244
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	b3 d1       	rcall	.+870    	; 0xd32 <wait>
		}
		wait(500);
     9cc:	d5 db       	rcall	.-2134   	; 0x178 <menuDirection>
     9ce:	c8 2f       	mov	r28, r24
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	e1 f3       	breq	.-8      	; 0x9cc <menu+0x80>
		enum eStatus move = WAITING;
		while(move == WAITING){
			move = menuDirection();		
     9d4:	84 ef       	ldi	r24, 0xF4	; 244
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	ac d1       	rcall	.+856    	; 0xd32 <wait>
			lcd_write_command(168);
			lcd_write_string("> Hard");
		}
		wait(500);
		enum eStatus move = WAITING;
		while(move == WAITING){
     9da:	c1 30       	cpi	r28, 0x01	; 1
     9dc:	79 f1       	breq	.+94     	; 0xa3c <menu+0xf0>
			move = menuDirection();		
		}
		wait(500);
     9de:	18 f0       	brcs	.+6      	; 0x9e6 <menu+0x9a>
     9e0:	c3 30       	cpi	r28, 0x03	; 3
     9e2:	41 f0       	breq	.+16     	; 0x9f4 <menu+0xa8>
     9e4:	ba cf       	rjmp	.-140    	; 0x95a <menu+0xe>
	
		

		switch(move){
     9e6:	01 15       	cp	r16, r1
     9e8:	11 05       	cpc	r17, r1
     9ea:	09 f4       	brne	.+2      	; 0x9ee <menu+0xa2>
     9ec:	b6 cf       	rjmp	.-148    	; 0x95a <menu+0xe>
     9ee:	01 50       	subi	r16, 0x01	; 1
     9f0:	11 09       	sbc	r17, r1
			case GOING_UP :{
				if(position != 0){
     9f2:	b3 cf       	rjmp	.-154    	; 0x95a <menu+0xe>
     9f4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <gStatus>
     9f8:	01 15       	cp	r16, r1
					position--;
     9fa:	11 05       	cpc	r17, r1
     9fc:	39 f4       	brne	.+14     	; 0xa0c <menu+0xc0>
     9fe:	88 ee       	ldi	r24, 0xE8	; 232
				}
				break;
			}
			case GOING_RIGHT :{
				inMenu = 0;
				gStatus = COUNTING;
     a00:	93 e0       	ldi	r25, 0x03	; 3
     a02:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <gameSpeed+0x1>
				if(position == 0)
     a06:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <gameSpeed>
					gameSpeed = 1000;
     a0a:	13 c0       	rjmp	.+38     	; 0xa32 <menu+0xe6>
     a0c:	01 30       	cpi	r16, 0x01	; 1
     a0e:	11 05       	cpc	r17, r1
     a10:	39 f4       	brne	.+14     	; 0xa20 <menu+0xd4>
     a12:	84 ef       	ldi	r24, 0xF4	; 244
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <gameSpeed+0x1>
				else if(position == 1)
     a1a:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <gameSpeed>
					gameSpeed = 500;
     a1e:	09 c0       	rjmp	.+18     	; 0xa32 <menu+0xe6>
     a20:	02 30       	cpi	r16, 0x02	; 2
     a22:	11 05       	cpc	r17, r1
     a24:	31 f4       	brne	.+12     	; 0xa32 <menu+0xe6>
     a26:	88 ec       	ldi	r24, 0xC8	; 200
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <gameSpeed+0x1>
				else if(position == 2)
     a2e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <gameSpeed>
					gameSpeed = 200;
     a32:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <tick+0x1>
     a36:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <tick>
     a3a:	07 c0       	rjmp	.+14     	; 0xa4a <menu+0xfe>
     a3c:	02 30       	cpi	r16, 0x02	; 2
				tick = 0;
     a3e:	11 05       	cpc	r17, r1
     a40:	09 f4       	brne	.+2      	; 0xa44 <menu+0xf8>
     a42:	8b cf       	rjmp	.-234    	; 0x95a <menu+0xe>
     a44:	0f 5f       	subi	r16, 0xFF	; 255
				break;
			}
		}
	}
	//wait(1000);
}
     a46:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			case GOING_LEFT :{
				break;
			}
			case GOING_DOWN :{
				if (position != 2)
     a48:	88 cf       	rjmp	.-240    	; 0x95a <menu+0xe>
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
				{
					position++;
     a50:	08 95       	ret

00000a52 <gameOver>:
     a52:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <tick>
				break;
			}
		}
	}
	//wait(1000);
}
     a56:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <tick+0x1>
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	91 05       	cpc	r25, r1

void gameOver(){
	
	if(1 == tick)
     a5e:	21 f4       	brne	.+8      	; 0xa68 <gameOver+0x16>
	{
		drawImage();
     a60:	a2 db       	rcall	.-2236   	; 0x1a6 <drawImage>
		update();
     a62:	99 dc       	rcall	.-1742   	; 0x396 <update>
		beepGameOver();
     a64:	4d c1       	rjmp	.+666    	; 0xd00 <beepGameOver>
     a66:	08 95       	ret
     a68:	89 3b       	cpi	r24, 0xB9	; 185
	}else
	if(tick > 3000)
     a6a:	9b 40       	sbci	r25, 0x0B	; 11
     a6c:	84 f0       	brlt	.+32     	; 0xa8e <gameOver+0x3c>
     a6e:	83 e0       	ldi	r24, 0x03	; 3
	{
		gStatus = MENU;
     a70:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <gStatus>
		resetDisplay();
		resetScore();
     a74:	4b dd       	rcall	.-1386   	; 0x50c <resetDisplay>
     a76:	61 df       	rcall	.-318    	; 0x93a <resetScore>
		displayClr();
     a78:	1e dc       	rcall	.-1988   	; 0x2b6 <displayClr>
		update();
     a7a:	8d dc       	rcall	.-1766   	; 0x396 <update>
     a7c:	64 e0       	ldi	r22, 0x04	; 4
		setStartLocation(4,4);
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	84 e0       	ldi	r24, 0x04	; 4
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	e0 db       	rcall	.-2112   	; 0x246 <setStartLocation>
     a86:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <tick+0x1>
		tick = 0;
     a8a:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <tick>
     a8e:	08 95       	ret

00000a90 <playing>:
     a90:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <check>
	}
	
}

void playing(){
	if(check)
     a94:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <check+0x1>
     a98:	89 2b       	or	r24, r25
     a9a:	59 f0       	breq	.+22     	; 0xab2 <playing+0x22>
	{
		enum eStatus newStatus = checkDirection();
     a9c:	29 db       	rcall	.-2478   	; 0xf0 <checkDirection>
		if(status != newStatus)
     a9e:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <status>
     aa2:	89 17       	cp	r24, r25
     aa4:	31 f0       	breq	.+12     	; 0xab2 <playing+0x22>
		{
			check = 0;
     aa6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <check+0x1>
     aaa:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <check>
			status = newStatus;
     aae:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <status>
		}
	}
	if (tick == gameSpeed)
     ab2:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <tick>
     ab6:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <tick+0x1>
     aba:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <gameSpeed>
     abe:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <gameSpeed+0x1>
     ac2:	28 17       	cp	r18, r24
     ac4:	39 07       	cpc	r19, r25
     ac6:	79 f5       	brne	.+94     	; 0xb26 <playing+0x96>
	{
		tick = 0;
     ac8:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <tick+0x1>
     acc:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <tick>
		switch (status)
     ad0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <status>
     ad4:	81 30       	cpi	r24, 0x01	; 1
     ad6:	69 f0       	breq	.+26     	; 0xaf2 <playing+0x62>
     ad8:	28 f0       	brcs	.+10     	; 0xae4 <playing+0x54>
     ada:	82 30       	cpi	r24, 0x02	; 2
     adc:	89 f0       	breq	.+34     	; 0xb00 <playing+0x70>
     ade:	83 30       	cpi	r24, 0x03	; 3
     ae0:	b1 f0       	breq	.+44     	; 0xb0e <playing+0x7e>
		{
			case GOING_UP:
			if(!moveSnakeUp())
     ae2:	1b c0       	rjmp	.+54     	; 0xb1a <playing+0x8a>
     ae4:	16 de       	rcall	.-980    	; 0x712 <moveSnakeUp>
     ae6:	89 2b       	or	r24, r25
     ae8:	c1 f4       	brne	.+48     	; 0xb1a <playing+0x8a>
			{
				gStatus = GAMEOVER;
     aea:	82 e0       	ldi	r24, 0x02	; 2
     aec:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <gStatus>
			}
			break;
			
			
			case GOING_DOWN :
			if(!moveSnakeDown())
     af0:	14 c0       	rjmp	.+40     	; 0xb1a <playing+0x8a>
     af2:	20 de       	rcall	.-960    	; 0x734 <moveSnakeDown>
     af4:	89 2b       	or	r24, r25
     af6:	89 f4       	brne	.+34     	; 0xb1a <playing+0x8a>
			{
				gStatus = GAMEOVER;
     af8:	82 e0       	ldi	r24, 0x02	; 2
     afa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <gStatus>
			}
			break;
			
			
			case GOING_LEFT:
			if(!moveSnakeLeft())
     afe:	0d c0       	rjmp	.+26     	; 0xb1a <playing+0x8a>
     b00:	2c de       	rcall	.-936    	; 0x75a <moveSnakeLeft>
     b02:	89 2b       	or	r24, r25
     b04:	51 f4       	brne	.+20     	; 0xb1a <playing+0x8a>
			{
				gStatus = GAMEOVER;
     b06:	82 e0       	ldi	r24, 0x02	; 2
     b08:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <gStatus>
			}
			break;
			
			
			case GOING_RIGHT:
			if(!moveSnakeRight())
     b0c:	06 c0       	rjmp	.+12     	; 0xb1a <playing+0x8a>
     b0e:	39 de       	rcall	.-910    	; 0x782 <moveSnakeRight>
     b10:	89 2b       	or	r24, r25
     b12:	19 f4       	brne	.+6      	; 0xb1a <playing+0x8a>
			{
				gStatus = GAMEOVER;
     b14:	82 e0       	ldi	r24, 0x02	; 2
     b16:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <gStatus>
			
			
			case WAITING:
			break;
		}
		check = 1;
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <check+0x1>
     b22:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <check>
     b26:	08 95       	ret

00000b28 <counting>:
	}
}

void counting(){
	if(tick == 700)
     b28:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <tick>
     b2c:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <tick+0x1>
     b30:	8c 3b       	cpi	r24, 0xBC	; 188
     b32:	22 e0       	ldi	r18, 0x02	; 2
     b34:	92 07       	cpc	r25, r18
     b36:	39 f4       	brne	.+14     	; 0xb46 <counting+0x1e>
	{
		beepOn();
     b38:	de d0       	rcall	.+444    	; 0xcf6 <beepOn>
		drawCounting(3);
     b3a:	83 e0       	ldi	r24, 0x03	; 3
     b3c:	90 e0       	ldi	r25, 0x00	; 0
		update();
     b3e:	41 db       	rcall	.-2430   	; 0x1c2 <drawCounting>
     b40:	2a dc       	rcall	.-1964   	; 0x396 <update>
		beepOff();
     b42:	dc c0       	rjmp	.+440    	; 0xcfc <beepOff>
     b44:	08 95       	ret
     b46:	88 37       	cpi	r24, 0x78	; 120
	}else
	if(tick == 1400)
     b48:	25 e0       	ldi	r18, 0x05	; 5
     b4a:	92 07       	cpc	r25, r18
     b4c:	39 f4       	brne	.+14     	; 0xb5c <counting+0x34>
	{
		beepOn();
     b4e:	d3 d0       	rcall	.+422    	; 0xcf6 <beepOn>
		drawCounting(2);
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	36 db       	rcall	.-2452   	; 0x1c2 <drawCounting>
     b56:	1f dc       	rcall	.-1986   	; 0x396 <update>
		update();
     b58:	d1 c0       	rjmp	.+418    	; 0xcfc <beepOff>
		beepOff();
     b5a:	08 95       	ret
     b5c:	84 33       	cpi	r24, 0x34	; 52
	}else
	if(tick == 2100)
     b5e:	28 e0       	ldi	r18, 0x08	; 8
     b60:	92 07       	cpc	r25, r18
	{
		beepOn();
     b62:	39 f4       	brne	.+14     	; 0xb72 <counting+0x4a>
     b64:	c8 d0       	rcall	.+400    	; 0xcf6 <beepOn>
		drawCounting(1);
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	90 e0       	ldi	r25, 0x00	; 0
		update();
     b6a:	2b db       	rcall	.-2474   	; 0x1c2 <drawCounting>
		beepOff();
     b6c:	14 dc       	rcall	.-2008   	; 0x396 <update>
     b6e:	c6 c0       	rjmp	.+396    	; 0xcfc <beepOff>
     b70:	08 95       	ret
	}else
	if (tick == 2800)
     b72:	80 3f       	cpi	r24, 0xF0	; 240
     b74:	9a 40       	sbci	r25, 0x0A	; 10
     b76:	89 f4       	brne	.+34     	; 0xb9a <counting+0x72>
	{
		beepOn();
     b78:	be d0       	rcall	.+380    	; 0xcf6 <beepOn>
     b7a:	9d db       	rcall	.-2246   	; 0x2b6 <displayClr>
		displayClr();
     b7c:	2b dc       	rcall	.-1962   	; 0x3d4 <displayDrawStart>
     b7e:	4f dc       	rcall	.-1890   	; 0x41e <addCandy>
		displayDrawStart();
     b80:	0a dc       	rcall	.-2028   	; 0x396 <update>
     b82:	bc d0       	rcall	.+376    	; 0xcfc <beepOff>
		addCandy();
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <gStatus>
		update();
     b8a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <check+0x1>
		beepOff();
     b8e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <check>
		gStatus = PLAYING;
     b92:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <tick+0x1>
		check = 0;
     b96:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <tick>
     b9a:	08 95       	ret

00000b9c <startGame>:
     b9c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <gStatus>
		tick = 0;
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	31 f0       	breq	.+12     	; 0xbb0 <startGame+0x14>
     ba4:	38 f0       	brcs	.+14     	; 0xbb4 <startGame+0x18>
     ba6:	82 30       	cpi	r24, 0x02	; 2
}


void startGame()
{
	switch(gStatus)
     ba8:	39 f0       	breq	.+14     	; 0xbb8 <startGame+0x1c>
     baa:	83 30       	cpi	r24, 0x03	; 3
     bac:	39 f0       	breq	.+14     	; 0xbbc <startGame+0x20>
     bae:	07 c0       	rjmp	.+14     	; 0xbbe <startGame+0x22>
	{
		case PLAYING :
		{
			playing();
     bb0:	6f df       	rcall	.-290    	; 0xa90 <playing>
		}
		
		
		case COUNTING :
		{
			counting();
     bb2:	05 c0       	rjmp	.+10     	; 0xbbe <startGame+0x22>
			break;
     bb4:	b9 df       	rcall	.-142    	; 0xb28 <counting>
		}
		
		
		case GAMEOVER :
		{
			gameOver();
     bb6:	03 c0       	rjmp	.+6      	; 0xbbe <startGame+0x22>
			break;
     bb8:	4c df       	rcall	.-360    	; 0xa52 <gameOver>
		}
		case MENU :
		{
			menu();
     bba:	01 c0       	rjmp	.+2      	; 0xbbe <startGame+0x22>
     bbc:	c7 de       	rcall	.-626    	; 0x94c <menu>
			break;
		}
	}
	tick++;
     bbe:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <tick>
     bc2:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <tick+0x1>
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <tick+0x1>
     bcc:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <tick>
     bd0:	08 95       	ret

00000bd2 <__vector_9>:
#include "headers/sound.h"
#include "headers/game.h"
#include "headers/screen.h"

ISR( TIMER2_COMP_vect )
{
     bd2:	1f 92       	push	r1
     bd4:	0f 92       	push	r0
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	0f 92       	push	r0
     bda:	11 24       	eor	r1, r1
     bdc:	0b b6       	in	r0, 0x3b	; 59
     bde:	0f 92       	push	r0
     be0:	2f 93       	push	r18
     be2:	3f 93       	push	r19
     be4:	4f 93       	push	r20
     be6:	5f 93       	push	r21
     be8:	6f 93       	push	r22
     bea:	7f 93       	push	r23
     bec:	8f 93       	push	r24
     bee:	9f 93       	push	r25
     bf0:	af 93       	push	r26
     bf2:	bf 93       	push	r27
     bf4:	ef 93       	push	r30
     bf6:	ff 93       	push	r31
	startGame();
     bf8:	d1 df       	rcall	.-94     	; 0xb9c <startGame>
}
     bfa:	ff 91       	pop	r31
     bfc:	ef 91       	pop	r30
     bfe:	bf 91       	pop	r27
     c00:	af 91       	pop	r26
     c02:	9f 91       	pop	r25
     c04:	8f 91       	pop	r24
     c06:	7f 91       	pop	r23
     c08:	6f 91       	pop	r22
     c0a:	5f 91       	pop	r21
     c0c:	4f 91       	pop	r20
     c0e:	3f 91       	pop	r19
     c10:	2f 91       	pop	r18
     c12:	0f 90       	pop	r0
     c14:	0b be       	out	0x3b, r0	; 59
     c16:	0f 90       	pop	r0
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	0f 90       	pop	r0
     c1c:	1f 90       	pop	r1
     c1e:	18 95       	reti

00000c20 <main>:


int main(void)
{
								//initializatie voor het scoreBord
	DDRB=0x01;					// Set PB0 pin as output for display select
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	87 bb       	out	0x17, r24	; 23
	spi_masterInit();			// Initialize spi module
     c24:	c0 dd       	rcall	.-1152   	; 0x7a6 <spi_masterInit>
	displayDriverInit();		// Initialize display chip
     c26:	e1 dd       	rcall	.-1086   	; 0x7ea <displayDriverInit>
	displayInit();
     c28:	a6 db       	rcall	.-2228   	; 0x376 <displayInit>
	wait(500);
     c2a:	84 ef       	ldi	r24, 0xF4	; 244
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	81 d0       	rcall	.+258    	; 0xd32 <wait>
	DDRA = 0x0F;
     c30:	8f e0       	ldi	r24, 0x0F	; 15
     c32:	8a bb       	out	0x1a, r24	; 26
	init_4bits_mode();
     c34:	22 d0       	rcall	.+68     	; 0xc7a <init_4bits_mode>
     c36:	81 de       	rcall	.-766    	; 0x93a <resetScore>
	resetScore();
     c38:	64 e0       	ldi	r22, 0x04	; 4
	//DDRC = 0xff;
	
	// DDRE = 0xff;     
	setStartLocation(4,4);
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	84 e0       	ldi	r24, 0x04	; 4
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	02 db       	rcall	.-2556   	; 0x246 <setStartLocation>
     c42:	87 e0       	ldi	r24, 0x07	; 7
     c44:	83 bd       	out	0x23, r24	; 35


	    OCR2 = 519;
     c46:	88 e0       	ldi	r24, 0x08	; 8
     c48:	85 bd       	out	0x25, r24	; 37
	    TCCR2 = 1<<WGM21;
     c4a:	87 b7       	in	r24, 0x37	; 55
     c4c:	84 68       	ori	r24, 0x84	; 132
	    
	    TIMSK = TIMSK | 1<<TOIE1 | 1<<OCIE2;
     c4e:	87 bf       	out	0x37, r24	; 55
     c50:	85 b5       	in	r24, 0x25	; 37
     c52:	85 60       	ori	r24, 0x05	; 5
	    TCCR2 |= 1<<CS22 | 0<<CS21 | 1<<CS20;
     c54:	85 bd       	out	0x25, r24	; 37
     c56:	14 bc       	out	0x24, r1	; 36
     c58:	78 94       	sei
	    TCNT2 = 0;
     c5a:	ff cf       	rjmp	.-2      	; 0xc5a <main+0x3a>

00000c5c <lcd_strobe_lcd_e>:
void lcd_write_data(unsigned char byte);
void lcd_write_command(unsigned char byte);

void lcd_strobe_lcd_e(void)
{
	PORTC |= (1<<LCD_E);	// E high
     c5c:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c5e:	8f ec       	ldi	r24, 0xCF	; 207
     c60:	97 e0       	ldi	r25, 0x07	; 7
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <lcd_strobe_lcd_e+0x6>
     c66:	00 c0       	rjmp	.+0      	; 0xc68 <lcd_strobe_lcd_e+0xc>
     c68:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTC &= ~(1<<LCD_E);  	// E low
     c6a:	ab 98       	cbi	0x15, 3	; 21
     c6c:	8f ec       	ldi	r24, 0xCF	; 207
     c6e:	97 e0       	ldi	r25, 0x07	; 7
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	f1 f7       	brne	.-4      	; 0xc70 <lcd_strobe_lcd_e+0x14>
     c74:	00 c0       	rjmp	.+0      	; 0xc76 <lcd_strobe_lcd_e+0x1a>
     c76:	00 00       	nop
     c78:	08 95       	ret

00000c7a <init_4bits_mode>:
	_delay_ms(1);			// nodig?
}

void init_4bits_mode(void)
{
     c7a:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
     c80:	15 ba       	out	0x15, r1	; 21

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
     c82:	c0 e2       	ldi	r28, 0x20	; 32
     c84:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
     c86:	ea df       	rcall	.-44     	; 0xc5c <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
	lcd_strobe_lcd_e();
     c88:	c5 bb       	out	0x15, r28	; 21
     c8a:	e8 df       	rcall	.-48     	; 0xc5c <lcd_strobe_lcd_e>
	PORTC = 0x80;
     c8c:	80 e8       	ldi	r24, 0x80	; 128
	lcd_strobe_lcd_e();
     c8e:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
     c90:	e5 df       	rcall	.-54     	; 0xc5c <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
     c92:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
     c94:	e3 df       	rcall	.-58     	; 0xc5c <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
     c96:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
     c98:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
     c9a:	e0 df       	rcall	.-64     	; 0xc5c <lcd_strobe_lcd_e>
     c9c:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x60;
     c9e:	de df       	rcall	.-68     	; 0xc5c <lcd_strobe_lcd_e>
     ca0:	80 e6       	ldi	r24, 0x60	; 96
	lcd_strobe_lcd_e();
     ca2:	85 bb       	out	0x15, r24	; 21
     ca4:	db df       	rcall	.-74     	; 0xc5c <lcd_strobe_lcd_e>

}
     ca6:	cf 91       	pop	r28
     ca8:	08 95       	ret

00000caa <lcd_write_data>:
		lcd_write_data(*str);
	}
}

void lcd_write_data(unsigned char byte)
{
     caa:	cf 93       	push	r28
     cac:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
     cae:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
     cb0:	aa 9a       	sbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
     cb2:	d4 df       	rcall	.-88     	; 0xc5c <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
     cb4:	c2 95       	swap	r28
     cb6:	c0 7f       	andi	r28, 0xF0	; 240
     cb8:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
	lcd_strobe_lcd_e();
     cba:	aa 9a       	sbi	0x15, 2	; 21
     cbc:	cf df       	rcall	.-98     	; 0xc5c <lcd_strobe_lcd_e>
}
     cbe:	cf 91       	pop	r28
     cc0:	08 95       	ret

00000cc2 <lcd_write_string>:
	lcd_strobe_lcd_e();

}

void lcd_write_string(char *str)
{
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
     cc8:	88 81       	ld	r24, Y
     cca:	88 23       	and	r24, r24
     ccc:	29 f0       	breq	.+10     	; 0xcd8 <lcd_write_string+0x16>
     cce:	21 96       	adiw	r28, 0x01	; 1
		lcd_write_data(*str);
     cd0:	ec df       	rcall	.-40     	; 0xcaa <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
     cd2:	89 91       	ld	r24, Y+
     cd4:	81 11       	cpse	r24, r1
     cd6:	fc cf       	rjmp	.-8      	; 0xcd0 <lcd_write_string+0xe>
		lcd_write_data(*str);
	}
}
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	08 95       	ret

00000cde <lcd_write_command>:
	PORTC |= (1<<LCD_RS);
	lcd_strobe_lcd_e();
}

void lcd_write_command(unsigned char byte)
{
     cde:	cf 93       	push	r28
     ce0:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
     ce2:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<LCD_RS);
     ce4:	aa 98       	cbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
     ce6:	ba df       	rcall	.-140    	; 0xc5c <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
     ce8:	c2 95       	swap	r28
     cea:	c0 7f       	andi	r28, 0xF0	; 240
     cec:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<LCD_RS);
	lcd_strobe_lcd_e();
     cee:	aa 98       	cbi	0x15, 2	; 21
     cf0:	b5 df       	rcall	.-150    	; 0xc5c <lcd_strobe_lcd_e>
}
     cf2:	cf 91       	pop	r28
     cf4:	08 95       	ret

00000cf6 <beepOn>:

#define F_CPU 2000  // change this value to change the sound produced by the beep

void beepOn(void)
{
	 PORTE = 0xff;        // Turn ON the Buzzer conneted to PORTC
     cf6:	8f ef       	ldi	r24, 0xFF	; 255
     cf8:	83 b9       	out	0x03, r24	; 3
     cfa:	08 95       	ret

00000cfc <beepOff>:
}

void beepOff(void)
{
	  PORTE = 0x00;        // Turn OFF the Buzzer connected to PORTC
     cfc:	13 b8       	out	0x03, r1	; 3
     cfe:	08 95       	ret

00000d00 <beepGameOver>:

}

void beepGameOver()
{
     d00:	cf 93       	push	r28
		PORTE = 0xff;        // Turn ON the Buzzer conneted to PORTC
     d02:	cf ef       	ldi	r28, 0xFF	; 255
     d04:	c3 b9       	out	0x03, r28	; 3
		wait(300);
     d06:	8c e2       	ldi	r24, 0x2C	; 44
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	13 d0       	rcall	.+38     	; 0xd32 <wait>
	    PORTE = 0x00;
     d0c:	13 b8       	out	0x03, r1	; 3
	    wait(500);        // Turn OFF the Buzzer connected to PORTC
     d0e:	84 ef       	ldi	r24, 0xF4	; 244
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	0f d0       	rcall	.+30     	; 0xd32 <wait>
	  	PORTE = 0xff;        // Turn ON the Buzzer conneted to PORTC
     d14:	c3 b9       	out	0x03, r28	; 3
	  	wait(500);
     d16:	84 ef       	ldi	r24, 0xF4	; 244
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	0b d0       	rcall	.+22     	; 0xd32 <wait>
	    PORTE = 0x00;        // Turn OFF the Buzzer connected to PORTC
		wait(500);
     d1c:	13 b8       	out	0x03, r1	; 3
     d1e:	84 ef       	ldi	r24, 0xF4	; 244
     d20:	91 e0       	ldi	r25, 0x01	; 1
		PORTE = 0xff;        // Turn ON the Buzzer conneted to PORTC
     d22:	07 d0       	rcall	.+14     	; 0xd32 <wait>
	    wait(2000);
     d24:	c3 b9       	out	0x03, r28	; 3
     d26:	80 ed       	ldi	r24, 0xD0	; 208
     d28:	97 e0       	ldi	r25, 0x07	; 7
     d2a:	03 d0       	rcall	.+6      	; 0xd32 <wait>
		PORTE = 0x00;        // Turn OFF the Buzzer connected to PORTC
     d2c:	13 b8       	out	0x03, r1	; 3
	  

     d2e:	cf 91       	pop	r28
     d30:	08 95       	ret

00000d32 <wait>:
#include <avr/io.h>
#include <util/delay.h>

void wait( int ms )
{
	for (int i=0; i<ms; i++)
     d32:	18 16       	cp	r1, r24
     d34:	19 06       	cpc	r1, r25
     d36:	6c f4       	brge	.+26     	; 0xd52 <wait+0x20>
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	ef ec       	ldi	r30, 0xCF	; 207
     d3e:	f7 e0       	ldi	r31, 0x07	; 7
     d40:	31 97       	sbiw	r30, 0x01	; 1
     d42:	f1 f7       	brne	.-4      	; 0xd40 <wait+0xe>
     d44:	00 c0       	rjmp	.+0      	; 0xd46 <wait+0x14>
     d46:	00 00       	nop
     d48:	2f 5f       	subi	r18, 0xFF	; 255
     d4a:	3f 4f       	sbci	r19, 0xFF	; 255
     d4c:	82 17       	cp	r24, r18
     d4e:	93 07       	cpc	r25, r19
     d50:	a9 f7       	brne	.-22     	; 0xd3c <wait+0xa>
     d52:	08 95       	ret

00000d54 <__divmodhi4>:
     d54:	97 fb       	bst	r25, 7
     d56:	07 2e       	mov	r0, r23
     d58:	16 f4       	brtc	.+4      	; 0xd5e <__divmodhi4+0xa>
     d5a:	00 94       	com	r0
     d5c:	06 d0       	rcall	.+12     	; 0xd6a <__divmodhi4_neg1>
     d5e:	77 fd       	sbrc	r23, 7
     d60:	08 d0       	rcall	.+16     	; 0xd72 <__divmodhi4_neg2>
     d62:	0b d0       	rcall	.+22     	; 0xd7a <__udivmodhi4>
     d64:	07 fc       	sbrc	r0, 7
     d66:	05 d0       	rcall	.+10     	; 0xd72 <__divmodhi4_neg2>
     d68:	3e f4       	brtc	.+14     	; 0xd78 <__divmodhi4_exit>

00000d6a <__divmodhi4_neg1>:
     d6a:	90 95       	com	r25
     d6c:	81 95       	neg	r24
     d6e:	9f 4f       	sbci	r25, 0xFF	; 255
     d70:	08 95       	ret

00000d72 <__divmodhi4_neg2>:
     d72:	70 95       	com	r23
     d74:	61 95       	neg	r22
     d76:	7f 4f       	sbci	r23, 0xFF	; 255

00000d78 <__divmodhi4_exit>:
     d78:	08 95       	ret

00000d7a <__udivmodhi4>:
     d7a:	aa 1b       	sub	r26, r26
     d7c:	bb 1b       	sub	r27, r27
     d7e:	51 e1       	ldi	r21, 0x11	; 17
     d80:	07 c0       	rjmp	.+14     	; 0xd90 <__udivmodhi4_ep>

00000d82 <__udivmodhi4_loop>:
     d82:	aa 1f       	adc	r26, r26
     d84:	bb 1f       	adc	r27, r27
     d86:	a6 17       	cp	r26, r22
     d88:	b7 07       	cpc	r27, r23
     d8a:	10 f0       	brcs	.+4      	; 0xd90 <__udivmodhi4_ep>
     d8c:	a6 1b       	sub	r26, r22
     d8e:	b7 0b       	sbc	r27, r23

00000d90 <__udivmodhi4_ep>:
     d90:	88 1f       	adc	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	5a 95       	dec	r21
     d96:	a9 f7       	brne	.-22     	; 0xd82 <__udivmodhi4_loop>
     d98:	80 95       	com	r24
     d9a:	90 95       	com	r25
     d9c:	bc 01       	movw	r22, r24
     d9e:	cd 01       	movw	r24, r26
     da0:	08 95       	ret

00000da2 <malloc>:
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	82 30       	cpi	r24, 0x02	; 2
     dac:	91 05       	cpc	r25, r1
     dae:	10 f4       	brcc	.+4      	; 0xdb4 <malloc+0x12>
     db0:	82 e0       	ldi	r24, 0x02	; 2
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <__flp>
     db8:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <__flp+0x1>
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	a0 e0       	ldi	r26, 0x00	; 0
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	30 97       	sbiw	r30, 0x00	; 0
     dc6:	19 f1       	breq	.+70     	; 0xe0e <malloc+0x6c>
     dc8:	40 81       	ld	r20, Z
     dca:	51 81       	ldd	r21, Z+1	; 0x01
     dcc:	02 81       	ldd	r16, Z+2	; 0x02
     dce:	13 81       	ldd	r17, Z+3	; 0x03
     dd0:	48 17       	cp	r20, r24
     dd2:	59 07       	cpc	r21, r25
     dd4:	c8 f0       	brcs	.+50     	; 0xe08 <malloc+0x66>
     dd6:	84 17       	cp	r24, r20
     dd8:	95 07       	cpc	r25, r21
     dda:	69 f4       	brne	.+26     	; 0xdf6 <malloc+0x54>
     ddc:	10 97       	sbiw	r26, 0x00	; 0
     dde:	31 f0       	breq	.+12     	; 0xdec <malloc+0x4a>
     de0:	12 96       	adiw	r26, 0x02	; 2
     de2:	0c 93       	st	X, r16
     de4:	12 97       	sbiw	r26, 0x02	; 2
     de6:	13 96       	adiw	r26, 0x03	; 3
     de8:	1c 93       	st	X, r17
     dea:	27 c0       	rjmp	.+78     	; 0xe3a <malloc+0x98>
     dec:	00 93 5a 01 	sts	0x015A, r16	; 0x80015a <__flp>
     df0:	10 93 5b 01 	sts	0x015B, r17	; 0x80015b <__flp+0x1>
     df4:	22 c0       	rjmp	.+68     	; 0xe3a <malloc+0x98>
     df6:	21 15       	cp	r18, r1
     df8:	31 05       	cpc	r19, r1
     dfa:	19 f0       	breq	.+6      	; 0xe02 <malloc+0x60>
     dfc:	42 17       	cp	r20, r18
     dfe:	53 07       	cpc	r21, r19
     e00:	18 f4       	brcc	.+6      	; 0xe08 <malloc+0x66>
     e02:	9a 01       	movw	r18, r20
     e04:	bd 01       	movw	r22, r26
     e06:	ef 01       	movw	r28, r30
     e08:	df 01       	movw	r26, r30
     e0a:	f8 01       	movw	r30, r16
     e0c:	db cf       	rjmp	.-74     	; 0xdc4 <malloc+0x22>
     e0e:	21 15       	cp	r18, r1
     e10:	31 05       	cpc	r19, r1
     e12:	f9 f0       	breq	.+62     	; 0xe52 <malloc+0xb0>
     e14:	28 1b       	sub	r18, r24
     e16:	39 0b       	sbc	r19, r25
     e18:	24 30       	cpi	r18, 0x04	; 4
     e1a:	31 05       	cpc	r19, r1
     e1c:	80 f4       	brcc	.+32     	; 0xe3e <malloc+0x9c>
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	9b 81       	ldd	r25, Y+3	; 0x03
     e22:	61 15       	cp	r22, r1
     e24:	71 05       	cpc	r23, r1
     e26:	21 f0       	breq	.+8      	; 0xe30 <malloc+0x8e>
     e28:	fb 01       	movw	r30, r22
     e2a:	93 83       	std	Z+3, r25	; 0x03
     e2c:	82 83       	std	Z+2, r24	; 0x02
     e2e:	04 c0       	rjmp	.+8      	; 0xe38 <malloc+0x96>
     e30:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <__flp+0x1>
     e34:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__flp>
     e38:	fe 01       	movw	r30, r28
     e3a:	32 96       	adiw	r30, 0x02	; 2
     e3c:	44 c0       	rjmp	.+136    	; 0xec6 <malloc+0x124>
     e3e:	fe 01       	movw	r30, r28
     e40:	e2 0f       	add	r30, r18
     e42:	f3 1f       	adc	r31, r19
     e44:	81 93       	st	Z+, r24
     e46:	91 93       	st	Z+, r25
     e48:	22 50       	subi	r18, 0x02	; 2
     e4a:	31 09       	sbc	r19, r1
     e4c:	39 83       	std	Y+1, r19	; 0x01
     e4e:	28 83       	st	Y, r18
     e50:	3a c0       	rjmp	.+116    	; 0xec6 <malloc+0x124>
     e52:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <__brkval>
     e56:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <__brkval+0x1>
     e5a:	23 2b       	or	r18, r19
     e5c:	41 f4       	brne	.+16     	; 0xe6e <malloc+0xcc>
     e5e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     e62:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     e66:	30 93 59 01 	sts	0x0159, r19	; 0x800159 <__brkval+0x1>
     e6a:	20 93 58 01 	sts	0x0158, r18	; 0x800158 <__brkval>
     e6e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     e72:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     e76:	21 15       	cp	r18, r1
     e78:	31 05       	cpc	r19, r1
     e7a:	41 f4       	brne	.+16     	; 0xe8c <malloc+0xea>
     e7c:	2d b7       	in	r18, 0x3d	; 61
     e7e:	3e b7       	in	r19, 0x3e	; 62
     e80:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     e84:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     e88:	24 1b       	sub	r18, r20
     e8a:	35 0b       	sbc	r19, r21
     e8c:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <__brkval>
     e90:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <__brkval+0x1>
     e94:	e2 17       	cp	r30, r18
     e96:	f3 07       	cpc	r31, r19
     e98:	a0 f4       	brcc	.+40     	; 0xec2 <malloc+0x120>
     e9a:	2e 1b       	sub	r18, r30
     e9c:	3f 0b       	sbc	r19, r31
     e9e:	28 17       	cp	r18, r24
     ea0:	39 07       	cpc	r19, r25
     ea2:	78 f0       	brcs	.+30     	; 0xec2 <malloc+0x120>
     ea4:	ac 01       	movw	r20, r24
     ea6:	4e 5f       	subi	r20, 0xFE	; 254
     ea8:	5f 4f       	sbci	r21, 0xFF	; 255
     eaa:	24 17       	cp	r18, r20
     eac:	35 07       	cpc	r19, r21
     eae:	48 f0       	brcs	.+18     	; 0xec2 <malloc+0x120>
     eb0:	4e 0f       	add	r20, r30
     eb2:	5f 1f       	adc	r21, r31
     eb4:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <__brkval+0x1>
     eb8:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <__brkval>
     ebc:	81 93       	st	Z+, r24
     ebe:	91 93       	st	Z+, r25
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <malloc+0x124>
     ec2:	e0 e0       	ldi	r30, 0x00	; 0
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	cf 01       	movw	r24, r30
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	08 95       	ret

00000ed2 <free>:
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	09 f4       	brne	.+2      	; 0xedc <free+0xa>
     eda:	81 c0       	rjmp	.+258    	; 0xfde <free+0x10c>
     edc:	fc 01       	movw	r30, r24
     ede:	32 97       	sbiw	r30, 0x02	; 2
     ee0:	13 82       	std	Z+3, r1	; 0x03
     ee2:	12 82       	std	Z+2, r1	; 0x02
     ee4:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <__flp>
     ee8:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <__flp+0x1>
     eec:	10 97       	sbiw	r26, 0x00	; 0
     eee:	81 f4       	brne	.+32     	; 0xf10 <free+0x3e>
     ef0:	20 81       	ld	r18, Z
     ef2:	31 81       	ldd	r19, Z+1	; 0x01
     ef4:	82 0f       	add	r24, r18
     ef6:	93 1f       	adc	r25, r19
     ef8:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <__brkval>
     efc:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <__brkval+0x1>
     f00:	28 17       	cp	r18, r24
     f02:	39 07       	cpc	r19, r25
     f04:	51 f5       	brne	.+84     	; 0xf5a <free+0x88>
     f06:	f0 93 59 01 	sts	0x0159, r31	; 0x800159 <__brkval+0x1>
     f0a:	e0 93 58 01 	sts	0x0158, r30	; 0x800158 <__brkval>
     f0e:	67 c0       	rjmp	.+206    	; 0xfde <free+0x10c>
     f10:	ed 01       	movw	r28, r26
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	ce 17       	cp	r28, r30
     f18:	df 07       	cpc	r29, r31
     f1a:	40 f4       	brcc	.+16     	; 0xf2c <free+0x5a>
     f1c:	4a 81       	ldd	r20, Y+2	; 0x02
     f1e:	5b 81       	ldd	r21, Y+3	; 0x03
     f20:	9e 01       	movw	r18, r28
     f22:	41 15       	cp	r20, r1
     f24:	51 05       	cpc	r21, r1
     f26:	f1 f0       	breq	.+60     	; 0xf64 <free+0x92>
     f28:	ea 01       	movw	r28, r20
     f2a:	f5 cf       	rjmp	.-22     	; 0xf16 <free+0x44>
     f2c:	d3 83       	std	Z+3, r29	; 0x03
     f2e:	c2 83       	std	Z+2, r28	; 0x02
     f30:	40 81       	ld	r20, Z
     f32:	51 81       	ldd	r21, Z+1	; 0x01
     f34:	84 0f       	add	r24, r20
     f36:	95 1f       	adc	r25, r21
     f38:	c8 17       	cp	r28, r24
     f3a:	d9 07       	cpc	r29, r25
     f3c:	59 f4       	brne	.+22     	; 0xf54 <free+0x82>
     f3e:	88 81       	ld	r24, Y
     f40:	99 81       	ldd	r25, Y+1	; 0x01
     f42:	84 0f       	add	r24, r20
     f44:	95 1f       	adc	r25, r21
     f46:	02 96       	adiw	r24, 0x02	; 2
     f48:	91 83       	std	Z+1, r25	; 0x01
     f4a:	80 83       	st	Z, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	9b 81       	ldd	r25, Y+3	; 0x03
     f50:	93 83       	std	Z+3, r25	; 0x03
     f52:	82 83       	std	Z+2, r24	; 0x02
     f54:	21 15       	cp	r18, r1
     f56:	31 05       	cpc	r19, r1
     f58:	29 f4       	brne	.+10     	; 0xf64 <free+0x92>
     f5a:	f0 93 5b 01 	sts	0x015B, r31	; 0x80015b <__flp+0x1>
     f5e:	e0 93 5a 01 	sts	0x015A, r30	; 0x80015a <__flp>
     f62:	3d c0       	rjmp	.+122    	; 0xfde <free+0x10c>
     f64:	e9 01       	movw	r28, r18
     f66:	fb 83       	std	Y+3, r31	; 0x03
     f68:	ea 83       	std	Y+2, r30	; 0x02
     f6a:	49 91       	ld	r20, Y+
     f6c:	59 91       	ld	r21, Y+
     f6e:	c4 0f       	add	r28, r20
     f70:	d5 1f       	adc	r29, r21
     f72:	ec 17       	cp	r30, r28
     f74:	fd 07       	cpc	r31, r29
     f76:	61 f4       	brne	.+24     	; 0xf90 <free+0xbe>
     f78:	80 81       	ld	r24, Z
     f7a:	91 81       	ldd	r25, Z+1	; 0x01
     f7c:	84 0f       	add	r24, r20
     f7e:	95 1f       	adc	r25, r21
     f80:	02 96       	adiw	r24, 0x02	; 2
     f82:	e9 01       	movw	r28, r18
     f84:	99 83       	std	Y+1, r25	; 0x01
     f86:	88 83       	st	Y, r24
     f88:	82 81       	ldd	r24, Z+2	; 0x02
     f8a:	93 81       	ldd	r25, Z+3	; 0x03
     f8c:	9b 83       	std	Y+3, r25	; 0x03
     f8e:	8a 83       	std	Y+2, r24	; 0x02
     f90:	e0 e0       	ldi	r30, 0x00	; 0
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	12 96       	adiw	r26, 0x02	; 2
     f96:	8d 91       	ld	r24, X+
     f98:	9c 91       	ld	r25, X
     f9a:	13 97       	sbiw	r26, 0x03	; 3
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	19 f0       	breq	.+6      	; 0xfa6 <free+0xd4>
     fa0:	fd 01       	movw	r30, r26
     fa2:	dc 01       	movw	r26, r24
     fa4:	f7 cf       	rjmp	.-18     	; 0xf94 <free+0xc2>
     fa6:	8d 91       	ld	r24, X+
     fa8:	9c 91       	ld	r25, X
     faa:	11 97       	sbiw	r26, 0x01	; 1
     fac:	9d 01       	movw	r18, r26
     fae:	2e 5f       	subi	r18, 0xFE	; 254
     fb0:	3f 4f       	sbci	r19, 0xFF	; 255
     fb2:	82 0f       	add	r24, r18
     fb4:	93 1f       	adc	r25, r19
     fb6:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <__brkval>
     fba:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <__brkval+0x1>
     fbe:	28 17       	cp	r18, r24
     fc0:	39 07       	cpc	r19, r25
     fc2:	69 f4       	brne	.+26     	; 0xfde <free+0x10c>
     fc4:	30 97       	sbiw	r30, 0x00	; 0
     fc6:	29 f4       	brne	.+10     	; 0xfd2 <free+0x100>
     fc8:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <__flp+0x1>
     fcc:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <__flp>
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <free+0x104>
     fd2:	13 82       	std	Z+3, r1	; 0x03
     fd4:	12 82       	std	Z+2, r1	; 0x02
     fd6:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <__brkval+0x1>
     fda:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <__brkval>
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	08 95       	ret

00000fe4 <do_rand>:
     fe4:	8f 92       	push	r8
     fe6:	9f 92       	push	r9
     fe8:	af 92       	push	r10
     fea:	bf 92       	push	r11
     fec:	cf 92       	push	r12
     fee:	df 92       	push	r13
     ff0:	ef 92       	push	r14
     ff2:	ff 92       	push	r15
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	ec 01       	movw	r28, r24
     ffa:	68 81       	ld	r22, Y
     ffc:	79 81       	ldd	r23, Y+1	; 0x01
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	9b 81       	ldd	r25, Y+3	; 0x03
    1002:	61 15       	cp	r22, r1
    1004:	71 05       	cpc	r23, r1
    1006:	81 05       	cpc	r24, r1
    1008:	91 05       	cpc	r25, r1
    100a:	21 f4       	brne	.+8      	; 0x1014 <do_rand+0x30>
    100c:	64 e2       	ldi	r22, 0x24	; 36
    100e:	79 ed       	ldi	r23, 0xD9	; 217
    1010:	8b e5       	ldi	r24, 0x5B	; 91
    1012:	97 e0       	ldi	r25, 0x07	; 7
    1014:	2d e1       	ldi	r18, 0x1D	; 29
    1016:	33 ef       	ldi	r19, 0xF3	; 243
    1018:	41 e0       	ldi	r20, 0x01	; 1
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	38 d0       	rcall	.+112    	; 0x108e <__divmodsi4>
    101e:	49 01       	movw	r8, r18
    1020:	5a 01       	movw	r10, r20
    1022:	9b 01       	movw	r18, r22
    1024:	ac 01       	movw	r20, r24
    1026:	a7 ea       	ldi	r26, 0xA7	; 167
    1028:	b1 e4       	ldi	r27, 0x41	; 65
    102a:	4d d0       	rcall	.+154    	; 0x10c6 <__muluhisi3>
    102c:	6b 01       	movw	r12, r22
    102e:	7c 01       	movw	r14, r24
    1030:	ac ee       	ldi	r26, 0xEC	; 236
    1032:	b4 ef       	ldi	r27, 0xF4	; 244
    1034:	a5 01       	movw	r20, r10
    1036:	94 01       	movw	r18, r8
    1038:	52 d0       	rcall	.+164    	; 0x10de <__mulohisi3>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	8c 0d       	add	r24, r12
    1040:	9d 1d       	adc	r25, r13
    1042:	ae 1d       	adc	r26, r14
    1044:	bf 1d       	adc	r27, r15
    1046:	b7 ff       	sbrs	r27, 7
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <do_rand+0x6c>
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	a1 09       	sbc	r26, r1
    104e:	b0 48       	sbci	r27, 0x80	; 128
    1050:	88 83       	st	Y, r24
    1052:	99 83       	std	Y+1, r25	; 0x01
    1054:	aa 83       	std	Y+2, r26	; 0x02
    1056:	bb 83       	std	Y+3, r27	; 0x03
    1058:	9f 77       	andi	r25, 0x7F	; 127
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	ff 90       	pop	r15
    1060:	ef 90       	pop	r14
    1062:	df 90       	pop	r13
    1064:	cf 90       	pop	r12
    1066:	bf 90       	pop	r11
    1068:	af 90       	pop	r10
    106a:	9f 90       	pop	r9
    106c:	8f 90       	pop	r8
    106e:	08 95       	ret

00001070 <rand_r>:
    1070:	b9 cf       	rjmp	.-142    	; 0xfe4 <do_rand>

00001072 <rand>:
    1072:	86 e0       	ldi	r24, 0x06	; 6
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	b6 cf       	rjmp	.-148    	; 0xfe4 <do_rand>

00001078 <srand>:
    1078:	a0 e0       	ldi	r26, 0x00	; 0
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    1080:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    1084:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1088:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    108c:	08 95       	ret

0000108e <__divmodsi4>:
    108e:	05 2e       	mov	r0, r21
    1090:	97 fb       	bst	r25, 7
    1092:	16 f4       	brtc	.+4      	; 0x1098 <__divmodsi4+0xa>
    1094:	00 94       	com	r0
    1096:	0f d0       	rcall	.+30     	; 0x10b6 <__negsi2>
    1098:	57 fd       	sbrc	r21, 7
    109a:	05 d0       	rcall	.+10     	; 0x10a6 <__divmodsi4_neg2>
    109c:	24 d0       	rcall	.+72     	; 0x10e6 <__udivmodsi4>
    109e:	07 fc       	sbrc	r0, 7
    10a0:	02 d0       	rcall	.+4      	; 0x10a6 <__divmodsi4_neg2>
    10a2:	46 f4       	brtc	.+16     	; 0x10b4 <__divmodsi4_exit>
    10a4:	08 c0       	rjmp	.+16     	; 0x10b6 <__negsi2>

000010a6 <__divmodsi4_neg2>:
    10a6:	50 95       	com	r21
    10a8:	40 95       	com	r20
    10aa:	30 95       	com	r19
    10ac:	21 95       	neg	r18
    10ae:	3f 4f       	sbci	r19, 0xFF	; 255
    10b0:	4f 4f       	sbci	r20, 0xFF	; 255
    10b2:	5f 4f       	sbci	r21, 0xFF	; 255

000010b4 <__divmodsi4_exit>:
    10b4:	08 95       	ret

000010b6 <__negsi2>:
    10b6:	90 95       	com	r25
    10b8:	80 95       	com	r24
    10ba:	70 95       	com	r23
    10bc:	61 95       	neg	r22
    10be:	7f 4f       	sbci	r23, 0xFF	; 255
    10c0:	8f 4f       	sbci	r24, 0xFF	; 255
    10c2:	9f 4f       	sbci	r25, 0xFF	; 255
    10c4:	08 95       	ret

000010c6 <__muluhisi3>:
    10c6:	31 d0       	rcall	.+98     	; 0x112a <__umulhisi3>
    10c8:	a5 9f       	mul	r26, r21
    10ca:	90 0d       	add	r25, r0
    10cc:	b4 9f       	mul	r27, r20
    10ce:	90 0d       	add	r25, r0
    10d0:	a4 9f       	mul	r26, r20
    10d2:	80 0d       	add	r24, r0
    10d4:	91 1d       	adc	r25, r1
    10d6:	11 24       	eor	r1, r1
    10d8:	08 95       	ret

000010da <__mulshisi3>:
    10da:	b7 ff       	sbrs	r27, 7
    10dc:	f4 cf       	rjmp	.-24     	; 0x10c6 <__muluhisi3>

000010de <__mulohisi3>:
    10de:	f3 df       	rcall	.-26     	; 0x10c6 <__muluhisi3>
    10e0:	82 1b       	sub	r24, r18
    10e2:	93 0b       	sbc	r25, r19
    10e4:	08 95       	ret

000010e6 <__udivmodsi4>:
    10e6:	a1 e2       	ldi	r26, 0x21	; 33
    10e8:	1a 2e       	mov	r1, r26
    10ea:	aa 1b       	sub	r26, r26
    10ec:	bb 1b       	sub	r27, r27
    10ee:	fd 01       	movw	r30, r26
    10f0:	0d c0       	rjmp	.+26     	; 0x110c <__udivmodsi4_ep>

000010f2 <__udivmodsi4_loop>:
    10f2:	aa 1f       	adc	r26, r26
    10f4:	bb 1f       	adc	r27, r27
    10f6:	ee 1f       	adc	r30, r30
    10f8:	ff 1f       	adc	r31, r31
    10fa:	a2 17       	cp	r26, r18
    10fc:	b3 07       	cpc	r27, r19
    10fe:	e4 07       	cpc	r30, r20
    1100:	f5 07       	cpc	r31, r21
    1102:	20 f0       	brcs	.+8      	; 0x110c <__udivmodsi4_ep>
    1104:	a2 1b       	sub	r26, r18
    1106:	b3 0b       	sbc	r27, r19
    1108:	e4 0b       	sbc	r30, r20
    110a:	f5 0b       	sbc	r31, r21

0000110c <__udivmodsi4_ep>:
    110c:	66 1f       	adc	r22, r22
    110e:	77 1f       	adc	r23, r23
    1110:	88 1f       	adc	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	1a 94       	dec	r1
    1116:	69 f7       	brne	.-38     	; 0x10f2 <__udivmodsi4_loop>
    1118:	60 95       	com	r22
    111a:	70 95       	com	r23
    111c:	80 95       	com	r24
    111e:	90 95       	com	r25
    1120:	9b 01       	movw	r18, r22
    1122:	ac 01       	movw	r20, r24
    1124:	bd 01       	movw	r22, r26
    1126:	cf 01       	movw	r24, r30
    1128:	08 95       	ret

0000112a <__umulhisi3>:
    112a:	a2 9f       	mul	r26, r18
    112c:	b0 01       	movw	r22, r0
    112e:	b3 9f       	mul	r27, r19
    1130:	c0 01       	movw	r24, r0
    1132:	a3 9f       	mul	r26, r19
    1134:	70 0d       	add	r23, r0
    1136:	81 1d       	adc	r24, r1
    1138:	11 24       	eor	r1, r1
    113a:	91 1d       	adc	r25, r1
    113c:	b2 9f       	mul	r27, r18
    113e:	70 0d       	add	r23, r0
    1140:	81 1d       	adc	r24, r1
    1142:	11 24       	eor	r1, r1
    1144:	91 1d       	adc	r25, r1
    1146:	08 95       	ret

00001148 <_exit>:
    1148:	f8 94       	cli

0000114a <__stop_program>:
    114a:	ff cf       	rjmp	.-2      	; 0x114a <__stop_program>
