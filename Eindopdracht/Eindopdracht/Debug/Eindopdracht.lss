
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000f6a  00000ffe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080010e  0080010e  0000100c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000103c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002083  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e23  00000000  00000000  000032ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001308  00000000  00000000  00004122  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  0000542c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000893  00000000  00000000  00005884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ebd  00000000  00000000  00006117  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00006fd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	7b c4       	rjmp	.+2294   	; 0x91c <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e6       	ldi	r30, 0x6A	; 106
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 33       	cpi	r26, 0x35	; 53
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	07 d5       	rcall	.+2574   	; 0xad2 <main>
  c4:	50 c7       	rjmp	.+3744   	; 0xf66 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <time>:
  c8:	fc 01       	movw	r30, r24
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <__system_time>
  d2:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <__system_time+0x1>
  d6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <__system_time+0x2>
  da:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <__system_time+0x3>
  de:	0f be       	out	0x3f, r0	; 63
  e0:	30 97       	sbiw	r30, 0x00	; 0
  e2:	21 f0       	breq	.+8      	; 0xec <time+0x24>
  e4:	60 83       	st	Z, r22
  e6:	71 83       	std	Z+1, r23	; 0x01
  e8:	82 83       	std	Z+2, r24	; 0x02
  ea:	93 83       	std	Z+3, r25	; 0x03
  ec:	08 95       	ret

000000ee <checkDirection>:
{
	//DDRB=0x01; // Set PB0 pin as output for display select
	//spi_masterInit(); // Initialize spi module
	//displayDriverInit(); // Initialize display chip
	
	DDRA = 0x0F;
  ee:	8f e0       	ldi	r24, 0x0F	; 15
  f0:	8a bb       	out	0x1a, r24	; 26

	if (PINA & 0x81 && moving != GOING_DOWN)
  f2:	89 b3       	in	r24, 0x19	; 25
  f4:	81 78       	andi	r24, 0x81	; 129
  f6:	51 f0       	breq	.+20     	; 0x10c <checkDirection+0x1e>
  f8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	59 f1       	breq	.+86     	; 0x156 <checkDirection+0x68>
	{
		moving = GOING_UP;
 100:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	}
	if (PINA & 0x82 && moving != GOING_UP)
 104:	89 b3       	in	r24, 0x19	; 25
 106:	82 78       	andi	r24, 0x82	; 130
 108:	51 f5       	brne	.+84     	; 0x15e <checkDirection+0x70>
 10a:	0b c0       	rjmp	.+22     	; 0x122 <checkDirection+0x34>
 10c:	89 b3       	in	r24, 0x19	; 25
 10e:	82 78       	andi	r24, 0x82	; 130
 110:	41 f0       	breq	.+16     	; 0x122 <checkDirection+0x34>
 112:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 116:	88 23       	and	r24, r24
 118:	11 f1       	breq	.+68     	; 0x15e <checkDirection+0x70>
	{
		moving = GOING_DOWN;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 120:	1e c0       	rjmp	.+60     	; 0x15e <checkDirection+0x70>
	}
	if (PINA & 0x84 && moving != GOING_RIGHT)
 122:	89 b3       	in	r24, 0x19	; 25
 124:	84 78       	andi	r24, 0x84	; 132
 126:	49 f0       	breq	.+18     	; 0x13a <checkDirection+0x4c>
 128:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 12c:	83 30       	cpi	r24, 0x03	; 3
 12e:	d9 f0       	breq	.+54     	; 0x166 <checkDirection+0x78>
	{
		moving = GOING_LEFT;
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	}
	if (PINA & 0x88 && moving != GOING_LEFT)
 136:	89 b3       	in	r24, 0x19	; 25
 138:	0a c0       	rjmp	.+20     	; 0x14e <checkDirection+0x60>
 13a:	89 b3       	in	r24, 0x19	; 25
 13c:	88 78       	andi	r24, 0x88	; 136
 13e:	39 f0       	breq	.+14     	; 0x14e <checkDirection+0x60>
 140:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	19 f0       	breq	.+6      	; 0x14e <checkDirection+0x60>
	{
		moving = GOING_RIGHT;
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	}
	
	return moving;
 14e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	08 95       	ret

	if (PINA & 0x81 && moving != GOING_DOWN)
	{
		moving = GOING_UP;
	}
	if (PINA & 0x82 && moving != GOING_UP)
 156:	89 b3       	in	r24, 0x19	; 25
 158:	82 78       	andi	r24, 0x82	; 130
 15a:	f9 f6       	brne	.-66     	; 0x11a <checkDirection+0x2c>
 15c:	08 c0       	rjmp	.+16     	; 0x16e <checkDirection+0x80>
	{
		moving = GOING_DOWN;
	}
	if (PINA & 0x84 && moving != GOING_RIGHT)
 15e:	89 b3       	in	r24, 0x19	; 25
 160:	84 78       	andi	r24, 0x84	; 132
 162:	31 f7       	brne	.-52     	; 0x130 <checkDirection+0x42>
 164:	ea cf       	rjmp	.-44     	; 0x13a <checkDirection+0x4c>
	{
		moving = GOING_LEFT;
	}
	if (PINA & 0x88 && moving != GOING_LEFT)
 166:	89 b3       	in	r24, 0x19	; 25
 168:	88 78       	andi	r24, 0x88	; 136
 16a:	71 f7       	brne	.-36     	; 0x148 <checkDirection+0x5a>
 16c:	f0 cf       	rjmp	.-32     	; 0x14e <checkDirection+0x60>
	}
	if (PINA & 0x82 && moving != GOING_UP)
	{
		moving = GOING_DOWN;
	}
	if (PINA & 0x84 && moving != GOING_RIGHT)
 16e:	89 b3       	in	r24, 0x19	; 25
 170:	84 78       	andi	r24, 0x84	; 132
 172:	f1 f6       	brne	.-68     	; 0x130 <checkDirection+0x42>
 174:	e2 cf       	rjmp	.-60     	; 0x13a <checkDirection+0x4c>

00000176 <drawImage>:
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 176:	e3 e2       	ldi	r30, 0x23	; 35
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	10 82       	st	Z, r1
 17c:	86 e6       	ldi	r24, 0x66	; 102
 17e:	81 83       	std	Z+1, r24	; 0x01
 180:	82 83       	std	Z+2, r24	; 0x02
 182:	13 82       	std	Z+3, r1	; 0x03
 184:	9c e3       	ldi	r25, 0x3C	; 60
 186:	94 83       	std	Z+4, r25	; 0x04
 188:	85 83       	std	Z+5, r24	; 0x05
 18a:	83 ec       	ldi	r24, 0xC3	; 195
 18c:	86 83       	std	Z+6, r24	; 0x06
 18e:	17 82       	std	Z+7, r1	; 0x07
 190:	08 95       	ret

00000192 <drawCounting>:
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	91 05       	cpc	r25, r1
 196:	99 f0       	breq	.+38     	; 0x1be <drawCounting+0x2c>
 198:	83 30       	cpi	r24, 0x03	; 3
 19a:	91 05       	cpc	r25, r1
 19c:	19 f0       	breq	.+6      	; 0x1a4 <drawCounting+0x12>
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	51 f5       	brne	.+84     	; 0x1f6 <drawCounting+0x64>
 1a2:	1b c0       	rjmp	.+54     	; 0x1da <drawCounting+0x48>
 1a4:	e3 e2       	ldi	r30, 0x23	; 35
 1a6:	f1 e0       	ldi	r31, 0x01	; 1
 1a8:	8e e7       	ldi	r24, 0x7E	; 126
 1aa:	80 83       	st	Z, r24
 1ac:	81 83       	std	Z+1, r24	; 0x01
 1ae:	96 e0       	ldi	r25, 0x06	; 6
 1b0:	92 83       	std	Z+2, r25	; 0x02
 1b2:	83 83       	std	Z+3, r24	; 0x03
 1b4:	84 83       	std	Z+4, r24	; 0x04
 1b6:	95 83       	std	Z+5, r25	; 0x05
 1b8:	86 83       	std	Z+6, r24	; 0x06
 1ba:	87 83       	std	Z+7, r24	; 0x07
 1bc:	08 95       	ret
 1be:	e3 e2       	ldi	r30, 0x23	; 35
 1c0:	f1 e0       	ldi	r31, 0x01	; 1
 1c2:	8e e7       	ldi	r24, 0x7E	; 126
 1c4:	80 83       	st	Z, r24
 1c6:	81 83       	std	Z+1, r24	; 0x01
 1c8:	96 e0       	ldi	r25, 0x06	; 6
 1ca:	92 83       	std	Z+2, r25	; 0x02
 1cc:	83 83       	std	Z+3, r24	; 0x03
 1ce:	84 83       	std	Z+4, r24	; 0x04
 1d0:	90 e6       	ldi	r25, 0x60	; 96
 1d2:	95 83       	std	Z+5, r25	; 0x05
 1d4:	86 83       	std	Z+6, r24	; 0x06
 1d6:	87 83       	std	Z+7, r24	; 0x07
 1d8:	08 95       	ret
 1da:	e3 e2       	ldi	r30, 0x23	; 35
 1dc:	f1 e0       	ldi	r31, 0x01	; 1
 1de:	88 e1       	ldi	r24, 0x18	; 24
 1e0:	80 83       	st	Z, r24
 1e2:	98 e3       	ldi	r25, 0x38	; 56
 1e4:	91 83       	std	Z+1, r25	; 0x01
 1e6:	98 e7       	ldi	r25, 0x78	; 120
 1e8:	92 83       	std	Z+2, r25	; 0x02
 1ea:	83 83       	std	Z+3, r24	; 0x03
 1ec:	84 83       	std	Z+4, r24	; 0x04
 1ee:	85 83       	std	Z+5, r24	; 0x05
 1f0:	8e e7       	ldi	r24, 0x7E	; 126
 1f2:	86 83       	std	Z+6, r24	; 0x06
 1f4:	87 83       	std	Z+7, r24	; 0x07
 1f6:	08 95       	ret

000001f8 <displaySetPixel>:
 1f8:	e8 2f       	mov	r30, r24
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	ed 5d       	subi	r30, 0xDD	; 221
 1fe:	fe 4f       	sbci	r31, 0xFE	; 254
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <displaySetPixel+0x12>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <displaySetPixel+0xe>
 20e:	90 81       	ld	r25, Z
 210:	89 2b       	or	r24, r25
 212:	80 83       	st	Z, r24
 214:	08 95       	ret

00000216 <setStartLocation>:
 216:	ef e1       	ldi	r30, 0x1F	; 31
 218:	f1 e0       	ldi	r31, 0x01	; 1
 21a:	91 83       	std	Z+1, r25	; 0x01
 21c:	80 83       	st	Z, r24
 21e:	73 83       	std	Z+3, r23	; 0x03
 220:	62 83       	std	Z+2, r22	; 0x02
 222:	88 e0       	ldi	r24, 0x08	; 8
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	cc d4       	rcall	.+2456   	; 0xbc0 <malloc>
 228:	fc 01       	movw	r30, r24
 22a:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <locationList+0x1>
 22e:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <locationList>
 232:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <currentLocation>
 236:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <currentLocation+0x1>
 23a:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <currentLocation+0x2>
 23e:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <currentLocation+0x3>
 242:	80 83       	st	Z, r24
 244:	91 83       	std	Z+1, r25	; 0x01
 246:	a2 83       	std	Z+2, r26	; 0x02
 248:	b3 83       	std	Z+3, r27	; 0x03
 24a:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <counter>
 24e:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <counter+0x1>
 252:	35 83       	std	Z+5, r19	; 0x05
 254:	24 83       	std	Z+4, r18	; 0x04
 256:	17 82       	std	Z+7, r1	; 0x07
 258:	16 82       	std	Z+6, r1	; 0x06
 25a:	2f 5f       	subi	r18, 0xFF	; 255
 25c:	3f 4f       	sbci	r19, 0xFF	; 255
 25e:	30 93 10 01 	sts	0x0110, r19	; 0x800110 <counter+0x1>
 262:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <counter>
 266:	08 95       	ret

00000268 <displayClrPixel>:
 268:	e8 2f       	mov	r30, r24
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	ed 5d       	subi	r30, 0xDD	; 221
 26e:	fe 4f       	sbci	r31, 0xFE	; 254
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <displayClrPixel+0x12>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <displayClrPixel+0xe>
 27e:	90 81       	ld	r25, Z
 280:	89 27       	eor	r24, r25
 282:	80 83       	st	Z, r24
 284:	08 95       	ret

00000286 <displayClr>:
 286:	e3 e2       	ldi	r30, 0x23	; 35
 288:	f1 e0       	ldi	r31, 0x01	; 1
 28a:	8b e2       	ldi	r24, 0x2B	; 43
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	11 92       	st	Z+, r1
 290:	e8 17       	cp	r30, r24
 292:	f9 07       	cpc	r31, r25
 294:	e1 f7       	brne	.-8      	; 0x28e <displayClr+0x8>
 296:	08 95       	ret

00000298 <twi_init>:
 298:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 29c:	80 e2       	ldi	r24, 0x20	; 32
 29e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 2a2:	08 95       	ret

000002a4 <twi_start>:
 2a4:	84 ea       	ldi	r24, 0xA4	; 164
 2a6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2aa:	e4 e7       	ldi	r30, 0x74	; 116
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	88 23       	and	r24, r24
 2b2:	ec f7       	brge	.-6      	; 0x2ae <twi_start+0xa>
 2b4:	08 95       	ret

000002b6 <twi_tx>:
}

void twi_tx(unsigned char data)
{
	//transmit 8 bits data
	TWDR = data;
 2b6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 2ba:	84 e8       	ldi	r24, 0x84	; 132
 2bc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
 2c0:	e4 e7       	ldi	r30, 0x74	; 116
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	88 23       	and	r24, r24
 2c8:	ec f7       	brge	.-6      	; 0x2c4 <twi_tx+0xe>
}
 2ca:	08 95       	ret

000002cc <displayInitHT16K33>:
	}
}


void displayInitHT16K33(uint8_t i2c_address) 
{
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	c8 2f       	mov	r28, r24
							// System setup page 30 ht16k33 datasheet
	twi_start();
 2d6:	e6 df       	rcall	.-52     	; 0x2a4 <twi_start>
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
 2d8:	8c 2f       	mov	r24, r28
 2da:	ed df       	rcall	.-38     	; 0x2b6 <twi_tx>
	twi_tx(0x21);			// Internal osc on (page 10 HT16K33)
 2dc:	81 e2       	ldi	r24, 0x21	; 33
 2de:	eb df       	rcall	.-42     	; 0x2b6 <twi_tx>
 2e0:	04 e7       	ldi	r16, 0x74	; 116
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 2e2:	10 e0       	ldi	r17, 0x00	; 0
 2e4:	d4 e9       	ldi	r29, 0x94	; 148
 2e6:	f8 01       	movw	r30, r16
 2e8:	d0 83       	st	Z, r29
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
	twi_tx(0x21);			// Internal osc on (page 10 HT16K33)
	twi_stop();
		
							// ROW/INT set. Page 31 ht16k33 datasheet
	twi_start();
 2ea:	dc df       	rcall	.-72     	; 0x2a4 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 2ec:	8c 2f       	mov	r24, r28
 2ee:	e3 df       	rcall	.-58     	; 0x2b6 <twi_tx>
	twi_tx(0xA0);			// HT16K33 pins all output (default)
 2f0:	80 ea       	ldi	r24, 0xA0	; 160
 2f2:	e1 df       	rcall	.-62     	; 0x2b6 <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 2f4:	f8 01       	movw	r30, r16
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xA0);			// HT16K33 pins all output (default)
	twi_stop();

							// Dimming set
	twi_start();
 2f6:	d0 83       	st	Z, r29
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 2f8:	d5 df       	rcall	.-86     	; 0x2a4 <twi_start>
 2fa:	8c 2f       	mov	r24, r28
	twi_tx(0xE1);			// Display Dimming 2/16 duty cycle
 2fc:	dc df       	rcall	.-72     	; 0x2b6 <twi_tx>
 2fe:	81 ee       	ldi	r24, 0xE1	; 225
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 300:	da df       	rcall	.-76     	; 0x2b6 <twi_tx>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xE1);			// Display Dimming 2/16 duty cycle
	twi_stop();

							// Display set
	twi_start();
 302:	f8 01       	movw	r30, r16
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 304:	d0 83       	st	Z, r29
 306:	ce df       	rcall	.-100    	; 0x2a4 <twi_start>
	twi_tx(0x81);			// Display ON, Blinking OFF
 308:	8c 2f       	mov	r24, r28
 30a:	d5 df       	rcall	.-86     	; 0x2b6 <twi_tx>
 30c:	81 e8       	ldi	r24, 0x81	; 129
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 30e:	d3 df       	rcall	.-90     	; 0x2b6 <twi_tx>
 310:	f8 01       	movw	r30, r16
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0x81);			// Display ON, Blinking OFF
	twi_stop();
	
							// Beeld een patroon af op display (test)
	twi_start();
 312:	d0 83       	st	Z, r29
	twi_tx(i2c_address);
 314:	c7 df       	rcall	.-114    	; 0x2a4 <twi_start>
 316:	8c 2f       	mov	r24, r28
	twi_tx(0x00);
 318:	ce df       	rcall	.-100    	; 0x2b6 <twi_tx>
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	cc df       	rcall	.-104    	; 0x2b6 <twi_tx>
 31e:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t a = 0x55;
 320:	c5 e5       	ldi	r28, 0x55	; 85
	for( uint8_t idx = 0; idx < 8; idx++ ) {
		a ^= 0xFF;
 322:	c0 95       	com	r28
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
 324:	8c 2f       	mov	r24, r28
 326:	80 fb       	bst	r24, 0
 328:	87 95       	ror	r24
 32a:	87 f9       	bld	r24, 7
 32c:	c4 df       	rcall	.-120    	; 0x2b6 <twi_tx>
 32e:	80 e0       	ldi	r24, 0x00	; 0
		twi_tx( 0x00);
 330:	c2 df       	rcall	.-124    	; 0x2b6 <twi_tx>
 332:	d1 50       	subi	r29, 0x01	; 1
 334:	b1 f7       	brne	.-20     	; 0x322 <displayInitHT16K33+0x56>
 336:	84 e9       	ldi	r24, 0x94	; 148
							// Beeld een patroon af op display (test)
	twi_start();
	twi_tx(i2c_address);
	twi_tx(0x00);
	uint8_t a = 0x55;
	for( uint8_t idx = 0; idx < 8; idx++ ) {
 338:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
}
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	08 95       	ret

00000346 <displayInit>:
 346:	a8 df       	rcall	.-176    	; 0x298 <twi_init>
 348:	84 ee       	ldi	r24, 0xE4	; 228


void displayInit(void) 
{
	twi_init();							// Enable TWI interface
	displayInitHT16K33(D0_I2C_ADDR);	// Iit display
 34a:	c0 df       	rcall	.-128    	; 0x2cc <displayInitHT16K33>
	locationList = NULL;
 34c:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <locationList+0x1>
 350:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <locationList>
	
	srand((unsigned)time(&t));
 354:	87 e1       	ldi	r24, 0x17	; 23
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	b7 de       	rcall	.-658    	; 0xc8 <time>
 35a:	cb 01       	movw	r24, r22
	rand(),rand(),rand();
 35c:	9c d5       	rcall	.+2872   	; 0xe96 <srand>
 35e:	98 d5       	rcall	.+2864   	; 0xe90 <rand>
 360:	97 d5       	rcall	.+2862   	; 0xe90 <rand>
 362:	96 c5       	rjmp	.+2860   	; 0xe90 <rand>
 364:	08 95       	ret

00000366 <update>:
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
								//writeLedDisplay(x+y * 100);
	buf[x] = buf[x] ^ newByte;
}

void update( void )
{
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
								// Second display
	twi_start();
 36e:	9a df       	rcall	.-204    	; 0x2a4 <twi_start>
	twi_tx(D0_I2C_ADDR);
 370:	84 ee       	ldi	r24, 0xE4	; 228
 372:	a1 df       	rcall	.-190    	; 0x2b6 <twi_tx>
	twi_tx(0x00);
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	9f df       	rcall	.-194    	; 0x2b6 <twi_tx>
 378:	cb e2       	ldi	r28, 0x2B	; 43
 37a:	d1 e0       	ldi	r29, 0x01	; 1
 37c:	03 e2       	ldi	r16, 0x23	; 35
 37e:	11 e0       	ldi	r17, 0x01	; 1
 380:	8a 91       	ld	r24, -Y
	for( uint8_t idx = 0; idx < 8; idx++ ) {
		uint8_t a = buf[7 + 0 * 8 - idx];
 382:	80 fb       	bst	r24, 0
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
 384:	87 95       	ror	r24
 386:	87 f9       	bld	r24, 7
 388:	96 df       	rcall	.-212    	; 0x2b6 <twi_tx>
		twi_tx( 0x00);
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	94 df       	rcall	.-216    	; 0x2b6 <twi_tx>
 38e:	c0 17       	cp	r28, r16
{
								// Second display
	twi_start();
	twi_tx(D0_I2C_ADDR);
	twi_tx(0x00);
	for( uint8_t idx = 0; idx < 8; idx++ ) {
 390:	d1 07       	cpc	r29, r17
 392:	b1 f7       	brne	.-20     	; 0x380 <update+0x1a>
 394:	84 e9       	ldi	r24, 0x94	; 148
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 396:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 39a:	df 91       	pop	r29
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
}
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	0f 91       	pop	r16
 3a2:	08 95       	ret

000003a4 <displayDrawStart>:
 3a4:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <locationList>
}


void displayDrawStart()
{
	displaySetPixel(locationList->location.x,locationList->location.y);
 3a8:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <locationList+0x1>
 3ac:	62 81       	ldd	r22, Z+2	; 0x02
 3ae:	80 81       	ld	r24, Z
 3b0:	23 df       	rcall	.-442    	; 0x1f8 <displaySetPixel>
	update();
 3b2:	d9 cf       	rjmp	.-78     	; 0x366 <update>
 3b4:	08 95       	ret

000003b6 <getLocationListSize>:
 3b6:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <locationList>
	while( 0 == (TWCR & 0x80) );
}

int getLocationListSize(void)
{
	LocationList *locationlist = locationList;
 3ba:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <locationList+0x1>
	int locationListSize = 0;
	while (locationlist != NULL){
 3be:	30 97       	sbiw	r30, 0x00	; 0
 3c0:	49 f0       	breq	.+18     	; 0x3d4 <getLocationListSize+0x1e>
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
		locationListSize++;
 3c6:	01 96       	adiw	r24, 0x01	; 1
		locationlist = locationlist->next;
 3c8:	06 80       	ldd	r0, Z+6	; 0x06
 3ca:	f7 81       	ldd	r31, Z+7	; 0x07
 3cc:	e0 2d       	mov	r30, r0

int getLocationListSize(void)
{
	LocationList *locationlist = locationList;
	int locationListSize = 0;
	while (locationlist != NULL){
 3ce:	30 97       	sbiw	r30, 0x00	; 0
 3d0:	d1 f7       	brne	.-12     	; 0x3c6 <getLocationListSize+0x10>
 3d2:	08 95       	ret
}

int getLocationListSize(void)
{
	LocationList *locationlist = locationList;
	int locationListSize = 0;
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
	while (locationlist != NULL){
		locationListSize++;
		locationlist = locationlist->next;
	}
	return locationListSize;
}
 3d8:	08 95       	ret

000003da <increaseSnakeSize>:

void increaseSnakeSize(void)
{
	maxSnakeSize++;
 3da:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <maxSnakeSize>
 3de:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <maxSnakeSize+0x1>
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <maxSnakeSize+0x1>
 3e8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <maxSnakeSize>
 3ec:	08 95       	ret

000003ee <addCandy>:
	//calculateNewScoreAppleCollected();
}

void addCandy(void)
{
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
	
	//int random = (rand() % 8);

	
	rand(),rand(),rand(),rand(),rand(),rand();
 3f2:	4e d5       	rcall	.+2716   	; 0xe90 <rand>
 3f4:	4d d5       	rcall	.+2714   	; 0xe90 <rand>
 3f6:	4c d5       	rcall	.+2712   	; 0xe90 <rand>
 3f8:	4b d5       	rcall	.+2710   	; 0xe90 <rand>
 3fa:	4a d5       	rcall	.+2708   	; 0xe90 <rand>
 3fc:	49 d5       	rcall	.+2706   	; 0xe90 <rand>
	
	int x = (rand() % 8);
 3fe:	48 d5       	rcall	.+2704   	; 0xe90 <rand>
 400:	87 70       	andi	r24, 0x07	; 7
 402:	90 78       	andi	r25, 0x80	; 128
 404:	99 23       	and	r25, r25
 406:	24 f4       	brge	.+8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	88 6f       	ori	r24, 0xF8	; 248
 40c:	9f 6f       	ori	r25, 0xFF	; 255
 40e:	01 96       	adiw	r24, 0x01	; 1
 410:	ec 01       	movw	r28, r24
	int y = (rand() % 8);
 412:	3e d5       	rcall	.+2684   	; 0xe90 <rand>
 414:	87 70       	andi	r24, 0x07	; 7
 416:	90 78       	andi	r25, 0x80	; 128
 418:	99 23       	and	r25, r25
 41a:	24 f4       	brge	.+8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	88 6f       	ori	r24, 0xF8	; 248
 420:	9f 6f       	ori	r25, 0xFF	; 255
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	bc 01       	movw	r22, r24
 426:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <locationList>
	LocationList *locationlist = locationList;
 42a:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <locationList+0x1>
 42e:	30 97       	sbiw	r30, 0x00	; 0
	while(locationlist != NULL){
 430:	59 f1       	breq	.+86     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 432:	20 81       	ld	r18, Z
		if(locationlist->location.x == x && locationlist->location.y == y){
 434:	31 81       	ldd	r19, Z+1	; 0x01
 436:	2c 17       	cp	r18, r28
 438:	3d 07       	cpc	r19, r29
 43a:	09 f5       	brne	.+66     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 43c:	82 81       	ldd	r24, Z+2	; 0x02
 43e:	93 81       	ldd	r25, Z+3	; 0x03
 440:	86 17       	cp	r24, r22
 442:	97 07       	cpc	r25, r23
			rand(),rand();
 444:	d9 f4       	brne	.+54     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 446:	24 d5       	rcall	.+2632   	; 0xe90 <rand>
 448:	23 d5       	rcall	.+2630   	; 0xe90 <rand>
 44a:	22 d5       	rcall	.+2628   	; 0xe90 <rand>
			x = (rand() % 8);
 44c:	87 70       	andi	r24, 0x07	; 7
 44e:	90 78       	andi	r25, 0x80	; 128
 450:	99 23       	and	r25, r25
 452:	24 f4       	brge	.+8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	88 6f       	ori	r24, 0xF8	; 248
 458:	9f 6f       	ori	r25, 0xFF	; 255
 45a:	01 96       	adiw	r24, 0x01	; 1
 45c:	ec 01       	movw	r28, r24
 45e:	18 d5       	rcall	.+2608   	; 0xe90 <rand>
			y = (rand() % 8);
 460:	87 70       	andi	r24, 0x07	; 7
 462:	90 78       	andi	r25, 0x80	; 128
 464:	99 23       	and	r25, r25
 466:	24 f4       	brge	.+8      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	88 6f       	ori	r24, 0xF8	; 248
 46c:	9f 6f       	ori	r25, 0xFF	; 255
 46e:	01 96       	adiw	r24, 0x01	; 1
 470:	bc 01       	movw	r22, r24
 472:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <locationList>
			locationlist = locationList;
 476:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <locationList+0x1>
 47a:	01 c0       	rjmp	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47c:	e9 01       	movw	r28, r18
 47e:	06 80       	ldd	r0, Z+6	; 0x06
 480:	f7 81       	ldd	r31, Z+7	; 0x07
		}
		locationlist = locationlist->next;
 482:	e0 2d       	mov	r30, r0
	rand(),rand(),rand(),rand(),rand(),rand();
	
	int x = (rand() % 8);
	int y = (rand() % 8);
	LocationList *locationlist = locationList;
	while(locationlist != NULL){
 484:	30 97       	sbiw	r30, 0x00	; 0
 486:	a9 f6       	brne	.-86     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
			y = (rand() % 8);
			locationlist = locationList;
		}
		locationlist = locationlist->next;
	}
	candy.x = x;
 488:	eb e1       	ldi	r30, 0x1B	; 27
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	d1 83       	std	Z+1, r29	; 0x01
 48e:	c0 83       	st	Z, r28
	candy.y = y;
 490:	73 83       	std	Z+3, r23	; 0x03
 492:	62 83       	std	Z+2, r22	; 0x02
	displaySetPixel(x,y);
 494:	8c 2f       	mov	r24, r28
 496:	b0 de       	rcall	.-672    	; 0x1f8 <displaySetPixel>
 498:	66 df       	rcall	.-308    	; 0x366 <update>
	update();
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
}
 49e:	08 95       	ret

000004a0 <checkForCollision>:
 4a0:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <locationList>

int checkForCollision(int x, int y)
{
	LocationList *locationlist = locationList;
 4a4:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <locationList+0x1>
	while(locationlist != NULL){
 4a8:	30 97       	sbiw	r30, 0x00	; 0
 4aa:	91 f0       	breq	.+36     	; 0x4d0 <checkForCollision+0x30>
		if(locationlist->location.x == x && locationlist->location.y == y){
 4ac:	20 81       	ld	r18, Z
 4ae:	31 81       	ldd	r19, Z+1	; 0x01
 4b0:	28 17       	cp	r18, r24
 4b2:	39 07       	cpc	r19, r25
 4b4:	29 f4       	brne	.+10     	; 0x4c0 <checkForCollision+0x20>
 4b6:	22 81       	ldd	r18, Z+2	; 0x02
 4b8:	33 81       	ldd	r19, Z+3	; 0x03
 4ba:	26 17       	cp	r18, r22
 4bc:	37 07       	cpc	r19, r23
 4be:	59 f0       	breq	.+22     	; 0x4d6 <checkForCollision+0x36>
			return 1;
		}
		locationlist = locationlist->next;
 4c0:	06 80       	ldd	r0, Z+6	; 0x06
 4c2:	f7 81       	ldd	r31, Z+7	; 0x07
 4c4:	e0 2d       	mov	r30, r0
}

int checkForCollision(int x, int y)
{
	LocationList *locationlist = locationList;
	while(locationlist != NULL){
 4c6:	30 97       	sbiw	r30, 0x00	; 0
 4c8:	89 f7       	brne	.-30     	; 0x4ac <checkForCollision+0xc>
		if(locationlist->location.x == x && locationlist->location.y == y){
			return 1;
		}
		locationlist = locationlist->next;
	}
	return 0;
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	08 95       	ret
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	08 95       	ret
int checkForCollision(int x, int y)
{
	LocationList *locationlist = locationList;
	while(locationlist != NULL){
		if(locationlist->location.x == x && locationlist->location.y == y){
			return 1;
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
		}
		locationlist = locationlist->next;
	}
	return 0;
}
 4da:	08 95       	ret

000004dc <resetDisplay>:

void resetDisplay(void)
{
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
	LocationList *locationlist = locationList;
 4e0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <locationList>
 4e4:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <locationList+0x1>
	while(locationList == NULL){
 4e8:	00 97       	sbiw	r24, 0x00	; 0
 4ea:	99 f4       	brne	.+38     	; 0x512 <resetDisplay+0x36>
	}
	return 0;
}

void resetDisplay(void)
{
 4ec:	d8 2f       	mov	r29, r24
 4ee:	c9 2f       	mov	r28, r25
 4f0:	ed 2f       	mov	r30, r29
 4f2:	fc 2f       	mov	r31, r28
 4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <resetDisplay+0x1c>
	LocationList *locationlist = locationList;
	while(locationList == NULL){
		while(locationlist->next != NULL){
		locationlist = locationlist->next;
 4f6:	f9 01       	movw	r30, r18

void resetDisplay(void)
{
	LocationList *locationlist = locationList;
	while(locationList == NULL){
		while(locationlist->next != NULL){
 4f8:	26 81       	ldd	r18, Z+6	; 0x06
 4fa:	37 81       	ldd	r19, Z+7	; 0x07
 4fc:	21 15       	cp	r18, r1
 4fe:	31 05       	cpc	r19, r1
 500:	d1 f7       	brne	.-12     	; 0x4f6 <resetDisplay+0x1a>
		locationlist = locationlist->next;
		}
		free(locationlist);
 502:	cf 01       	movw	r24, r30
 504:	f5 d3       	rcall	.+2026   	; 0xcf0 <free>
}

void resetDisplay(void)
{
	LocationList *locationlist = locationList;
	while(locationList == NULL){
 506:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <locationList>
 50a:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <locationList+0x1>
 50e:	89 2b       	or	r24, r25
 510:	79 f3       	breq	.-34     	; 0x4f0 <resetDisplay+0x14>
		}
		free(locationlist);
		locationlist = NULL;
		locationlist = locationList;
	}
	maxSnakeSize = 4;
 512:	84 e0       	ldi	r24, 0x04	; 4
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <maxSnakeSize+0x1>
 51a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <maxSnakeSize>
}
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	08 95       	ret

00000524 <moveToNewLocation>:


int moveToNewLocation(int x, int y)
{
 524:	6f 92       	push	r6
 526:	7f 92       	push	r7
 528:	8f 92       	push	r8
 52a:	9f 92       	push	r9
 52c:	af 92       	push	r10
 52e:	bf 92       	push	r11
 530:	cf 92       	push	r12
 532:	df 92       	push	r13
 534:	ef 92       	push	r14
 536:	ff 92       	push	r15
 538:	0f 93       	push	r16
 53a:	1f 93       	push	r17
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	6c 01       	movw	r12, r24
 542:	5b 01       	movw	r10, r22
	
	if(x == candy.x && y == candy.y){
 544:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <candy>
 548:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <candy+0x1>
 54c:	8c 15       	cp	r24, r12
 54e:	9d 05       	cpc	r25, r13
 550:	51 f4       	brne	.+20     	; 0x566 <moveToNewLocation+0x42>
 552:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <candy+0x2>
 556:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <candy+0x3>
 55a:	86 17       	cp	r24, r22
 55c:	97 07       	cpc	r25, r23
 55e:	19 f4       	brne	.+6      	; 0x566 <moveToNewLocation+0x42>
		increaseSnakeSize();
 560:	3c df       	rcall	.-392    	; 0x3da <increaseSnakeSize>
		addCandy();
 562:	45 df       	rcall	.-374    	; 0x3ee <addCandy>
		calculateNewScoreAppleCollected();
 564:	c7 d1       	rcall	.+910    	; 0x8f4 <calculateNewScoreAppleCollected>
	}
	if(!checkForCollision(x,y)){
 566:	b5 01       	movw	r22, r10
 568:	c6 01       	movw	r24, r12
 56a:	9a df       	rcall	.-204    	; 0x4a0 <checkForCollision>
 56c:	89 2b       	or	r24, r25
 56e:	09 f0       	breq	.+2      	; 0x572 <moveToNewLocation+0x4e>
	Location location;
	location.x = x;
	location.y = y;
	calculateNewScoreMovement();
 570:	9a c0       	rjmp	.+308    	; 0x6a6 <moveToNewLocation+0x182>
 572:	d3 d1       	rcall	.+934    	; 0x91a <calculateNewScoreMovement>
	// add sound
	int size = getLocationListSize();
 574:	20 df       	rcall	.-448    	; 0x3b6 <getLocationListSize>
 576:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <maxSnakeSize>
	if(size < maxSnakeSize){
 57a:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <maxSnakeSize+0x1>
 57e:	82 17       	cp	r24, r18
 580:	93 07       	cpc	r25, r19
 582:	6c f5       	brge	.+90     	; 0x5de <moveToNewLocation+0xba>
		displaySetPixel(x,y);
 584:	6a 2d       	mov	r22, r10
 586:	8c 2d       	mov	r24, r12
 588:	37 de       	rcall	.-914    	; 0x1f8 <displaySetPixel>
 58a:	c0 91 2b 01 	lds	r28, 0x012B	; 0x80012b <locationList>
		LocationList *locactionlist = locationList;
 58e:	d0 91 2c 01 	lds	r29, 0x012C	; 0x80012c <locationList+0x1>
 592:	01 c0       	rjmp	.+2      	; 0x596 <moveToNewLocation+0x72>
		while(locactionlist->next != NULL){
 594:	ec 01       	movw	r28, r24
 596:	8e 81       	ldd	r24, Y+6	; 0x06
 598:	9f 81       	ldd	r25, Y+7	; 0x07
 59a:	00 97       	sbiw	r24, 0x00	; 0
 59c:	d9 f7       	brne	.-10     	; 0x594 <moveToNewLocation+0x70>
			locactionlist = locactionlist->next;
		}
		
		LocationList *newLocation = (LocationList *)malloc(sizeof(LocationList));
 59e:	88 e0       	ldi	r24, 0x08	; 8
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e d3       	rcall	.+1564   	; 0xbc0 <malloc>
 5a4:	fc 01       	movw	r30, r24
 5a6:	d1 82       	std	Z+1, r13	; 0x01
		newLocation->location = location;
 5a8:	c0 82       	st	Z, r12
 5aa:	b3 82       	std	Z+3, r11	; 0x03
 5ac:	a2 82       	std	Z+2, r10	; 0x02
 5ae:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <counter>
		newLocation->number = counter;
 5b2:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <counter+0x1>
 5b6:	95 83       	std	Z+5, r25	; 0x05
 5b8:	84 83       	std	Z+4, r24	; 0x04
 5ba:	17 82       	std	Z+7, r1	; 0x07
		//writeLedDisplay(counter);
		newLocation->next = NULL;
 5bc:	16 82       	std	Z+6, r1	; 0x06
 5be:	ff 83       	std	Y+7, r31	; 0x07
		locactionlist->next = newLocation;
 5c0:	ee 83       	std	Y+6, r30	; 0x06
 5c2:	01 96       	adiw	r24, 0x01	; 1
		
		counter++;
 5c4:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <counter+0x1>
 5c8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <counter>
 5cc:	ef e1       	ldi	r30, 0x1F	; 31
		currentLocation.x = x;
 5ce:	f1 e0       	ldi	r31, 0x01	; 1
 5d0:	d1 82       	std	Z+1, r13	; 0x01
 5d2:	c0 82       	st	Z, r12
		currentLocation.y = y;
 5d4:	b3 82       	std	Z+3, r11	; 0x03
 5d6:	a2 82       	std	Z+2, r10	; 0x02
	}else
	{
		displayClr();
		return 0;
	}
	return 1;
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	73 c0       	rjmp	.+230    	; 0x6c4 <moveToNewLocation+0x1a0>
		counter++;
		currentLocation.x = x;
		currentLocation.y = y;
	}else{
		//writeLedDisplay(2);
		displaySetPixel(x,y);
 5de:	6a 2d       	mov	r22, r10
 5e0:	8c 2d       	mov	r24, r12
 5e2:	0a de       	rcall	.-1004   	; 0x1f8 <displaySetPixel>
 5e4:	e0 90 2b 01 	lds	r14, 0x012B	; 0x80012b <locationList>
		LocationList *locationlist = locationList;
 5e8:	f0 90 2c 01 	lds	r15, 0x012C	; 0x80012c <locationList+0x1>
 5ec:	f7 01       	movw	r30, r14
		int minimal = locationlist->number;
 5ee:	44 81       	ldd	r20, Z+4	; 0x04
 5f0:	55 81       	ldd	r21, Z+5	; 0x05
 5f2:	e1 14       	cp	r14, r1
		int locationCounter = 0;
		int position = 0;
		while(locationlist != NULL){
 5f4:	f1 04       	cpc	r15, r1
 5f6:	59 f4       	brne	.+22     	; 0x60e <moveToNewLocation+0xea>
 5f8:	81 e0       	ldi	r24, 0x01	; 1
			previousLocation = locationlist;
			locationlist = locationlist->next;
			locationCounter++;
			
		}
		return 1;
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	63 c0       	rjmp	.+198    	; 0x6c4 <moveToNewLocation+0x1a0>
 5fe:	2c 81       	ldd	r18, Y+4	; 0x04
		LocationList *locationlist = locationList;
		int minimal = locationlist->number;
		int locationCounter = 0;
		int position = 0;
		while(locationlist != NULL){
			if(locationlist->number < minimal){
 600:	3d 81       	ldd	r19, Y+5	; 0x05
 602:	24 17       	cp	r18, r20
 604:	35 07       	cpc	r19, r21
 606:	44 f4       	brge	.+16     	; 0x618 <moveToNewLocation+0xf4>
 608:	4c 01       	movw	r8, r24
				minimal = locationlist->number;
				position = locationCounter;
			}
			locationCounter++;
 60a:	a9 01       	movw	r20, r18
		LocationList *locationlist = locationList;
		int minimal = locationlist->number;
		int locationCounter = 0;
		int position = 0;
		while(locationlist != NULL){
			if(locationlist->number < minimal){
 60c:	05 c0       	rjmp	.+10     	; 0x618 <moveToNewLocation+0xf4>
 60e:	e7 01       	movw	r28, r14
		displaySetPixel(x,y);
		LocationList *locationlist = locationList;
		int minimal = locationlist->number;
		int locationCounter = 0;
		int position = 0;
		while(locationlist != NULL){
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	81 2c       	mov	r8, r1
 616:	91 2c       	mov	r9, r1
 618:	01 96       	adiw	r24, 0x01	; 1
			if(locationlist->number < minimal){
				minimal = locationlist->number;
				position = locationCounter;
			}
			locationCounter++;
 61a:	0e 80       	ldd	r0, Y+6	; 0x06
			locationlist = locationlist->next;
 61c:	df 81       	ldd	r29, Y+7	; 0x07
 61e:	c0 2d       	mov	r28, r0
 620:	20 97       	sbiw	r28, 0x00	; 0
		displaySetPixel(x,y);
		LocationList *locationlist = locationList;
		int minimal = locationlist->number;
		int locationCounter = 0;
		int position = 0;
		while(locationlist != NULL){
 622:	69 f7       	brne	.-38     	; 0x5fe <moveToNewLocation+0xda>
 624:	44 c0       	rjmp	.+136    	; 0x6ae <moveToNewLocation+0x18a>
 626:	88 16       	cp	r8, r24
		locationlist = locationList;
		locationCounter = 0;
		LocationList *newLocation = (LocationList *)malloc(sizeof(LocationList));
		LocationList *previousLocation = NULL; 
		while(locationlist != NULL){
			if(locationCounter == position){
 628:	99 06       	cpc	r9, r25
 62a:	91 f5       	brne	.+100    	; 0x690 <moveToNewLocation+0x16c>
 62c:	02 c0       	rjmp	.+4      	; 0x632 <moveToNewLocation+0x10e>
			locationlist = locationlist->next;
		}
		
		
		//writeLedDisplay(position);
		locationlist = locationList;
 62e:	87 01       	movw	r16, r14
		locationCounter = 0;
		LocationList *newLocation = (LocationList *)malloc(sizeof(LocationList));
		LocationList *previousLocation = NULL; 
 630:	7e 01       	movw	r14, r28
		while(locationlist != NULL){
			if(locationCounter == position){
				displayClrPixel(locationlist->location.x,locationlist->location.y);
 632:	f8 01       	movw	r30, r16
 634:	62 81       	ldd	r22, Z+2	; 0x02
 636:	80 81       	ld	r24, Z
 638:	17 de       	rcall	.-978    	; 0x268 <displayClrPixel>
 63a:	f3 01       	movw	r30, r6
			//	writeLedDisplay(p->number);
				newLocation->location = location;
 63c:	d1 82       	std	Z+1, r13	; 0x01
 63e:	c0 82       	st	Z, r12
 640:	b3 82       	std	Z+3, r11	; 0x03
 642:	a2 82       	std	Z+2, r10	; 0x02
 644:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <counter>
				newLocation->number = counter;
 648:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <counter+0x1>
 64c:	95 83       	std	Z+5, r25	; 0x05
 64e:	84 83       	std	Z+4, r24	; 0x04
 650:	f8 01       	movw	r30, r16
				newLocation->next = locationlist->next;
 652:	26 81       	ldd	r18, Z+6	; 0x06
 654:	37 81       	ldd	r19, Z+7	; 0x07
 656:	f3 01       	movw	r30, r6
 658:	37 83       	std	Z+7, r19	; 0x07
 65a:	26 83       	std	Z+6, r18	; 0x06
				counter++;
 65c:	01 96       	adiw	r24, 0x01	; 1
 65e:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <counter+0x1>
 662:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <counter>
				free(locationlist);
 666:	c8 01       	movw	r24, r16
 668:	43 d3       	rcall	.+1670   	; 0xcf0 <free>
 66a:	89 28       	or	r8, r9
				if(position == 0){
 66c:	29 f4       	brne	.+10     	; 0x678 <moveToNewLocation+0x154>
 66e:	70 92 2c 01 	sts	0x012C, r7	; 0x80012c <locationList+0x1>
					locationList = newLocation;	
 672:	60 92 2b 01 	sts	0x012B, r6	; 0x80012b <locationList>
 676:	03 c0       	rjmp	.+6      	; 0x67e <moveToNewLocation+0x15a>
 678:	f7 01       	movw	r30, r14
				}else{
					previousLocation->next = newLocation;
 67a:	77 82       	std	Z+7, r7	; 0x07
 67c:	66 82       	std	Z+6, r6	; 0x06
 67e:	ef e1       	ldi	r30, 0x1F	; 31
				}
				currentLocation.x = x;
 680:	f1 e0       	ldi	r31, 0x01	; 1
 682:	d1 82       	std	Z+1, r13	; 0x01
 684:	c0 82       	st	Z, r12
 686:	b3 82       	std	Z+3, r11	; 0x03
				currentLocation.y = y;
 688:	a2 82       	std	Z+2, r10	; 0x02
 68a:	81 e0       	ldi	r24, 0x01	; 1
			previousLocation = locationlist;
			locationlist = locationlist->next;
			locationCounter++;
			
		}
		return 1;
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	1a c0       	rjmp	.+52     	; 0x6c4 <moveToNewLocation+0x1a0>
				}else{
					previousLocation->next = newLocation;
				}
				currentLocation.x = x;
				currentLocation.y = y;
				break;
 690:	78 01       	movw	r14, r16
			}
			previousLocation = locationlist;
			locationlist = locationlist->next;
 692:	f7 01       	movw	r30, r14
 694:	06 81       	ldd	r16, Z+6	; 0x06
 696:	17 81       	ldd	r17, Z+7	; 0x07
			locationCounter++;
 698:	01 96       	adiw	r24, 0x01	; 1
		//writeLedDisplay(position);
		locationlist = locationList;
		locationCounter = 0;
		LocationList *newLocation = (LocationList *)malloc(sizeof(LocationList));
		LocationList *previousLocation = NULL; 
		while(locationlist != NULL){
 69a:	01 15       	cp	r16, r1
 69c:	11 05       	cpc	r17, r1
			previousLocation = locationlist;
			locationlist = locationlist->next;
			locationCounter++;
			
		}
		return 1;
 69e:	19 f6       	brne	.-122    	; 0x626 <moveToNewLocation+0x102>
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	90 e0       	ldi	r25, 0x00	; 0
		}
	}else
	{
		displayClr();
 6a4:	0f c0       	rjmp	.+30     	; 0x6c4 <moveToNewLocation+0x1a0>
 6a6:	ef dd       	rcall	.-1058   	; 0x286 <displayClr>
		return 0;
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	0b c0       	rjmp	.+22     	; 0x6c4 <moveToNewLocation+0x1a0>
		
		
		//writeLedDisplay(position);
		locationlist = locationList;
		locationCounter = 0;
		LocationList *newLocation = (LocationList *)malloc(sizeof(LocationList));
 6ae:	88 e0       	ldi	r24, 0x08	; 8
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	86 d2       	rcall	.+1292   	; 0xbc0 <malloc>
 6b4:	3c 01       	movw	r6, r24
 6b6:	81 14       	cp	r8, r1
		LocationList *previousLocation = NULL; 
		while(locationlist != NULL){
			if(locationCounter == position){
 6b8:	91 04       	cpc	r9, r1
 6ba:	09 f4       	brne	.+2      	; 0x6be <moveToNewLocation+0x19a>
 6bc:	b8 cf       	rjmp	.-144    	; 0x62e <moveToNewLocation+0x10a>
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	e7 cf       	rjmp	.-50     	; 0x692 <moveToNewLocation+0x16e>
 6c4:	df 91       	pop	r29
	{
		displayClr();
		return 0;
	}
	return 1;
}
 6c6:	cf 91       	pop	r28
 6c8:	1f 91       	pop	r17
 6ca:	0f 91       	pop	r16
 6cc:	ff 90       	pop	r15
 6ce:	ef 90       	pop	r14
 6d0:	df 90       	pop	r13
 6d2:	cf 90       	pop	r12
 6d4:	bf 90       	pop	r11
 6d6:	af 90       	pop	r10
 6d8:	9f 90       	pop	r9
 6da:	8f 90       	pop	r8
 6dc:	7f 90       	pop	r7
 6de:	6f 90       	pop	r6
 6e0:	08 95       	ret

000006e2 <moveSnakeUp>:
 6e2:	ef e1       	ldi	r30, 0x1F	; 31
	


int moveSnakeUp(){
	
	int x = currentLocation.x;
 6e4:	f1 e0       	ldi	r31, 0x01	; 1
 6e6:	80 81       	ld	r24, Z
 6e8:	91 81       	ldd	r25, Z+1	; 0x01
	int y = currentLocation.y;
 6ea:	62 81       	ldd	r22, Z+2	; 0x02
 6ec:	73 81       	ldd	r23, Z+3	; 0x03
	
	x--;
 6ee:	01 97       	sbiw	r24, 0x01	; 1
 6f0:	10 f4       	brcc	.+4      	; 0x6f6 <moveSnakeUp+0x14>
	if(x == -1){
		x = 7;
 6f2:	87 e0       	ldi	r24, 0x07	; 7
 6f4:	90 e0       	ldi	r25, 0x00	; 0
	}
	if(moveToNewLocation(x,y)){
 6f6:	16 df       	rcall	.-468    	; 0x524 <moveToNewLocation>
 6f8:	00 97       	sbiw	r24, 0x00	; 0
 6fa:	19 f0       	breq	.+6      	; 0x702 <moveSnakeUp+0x20>
		update();
 6fc:	34 de       	rcall	.-920    	; 0x366 <update>
 6fe:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	08 95       	ret

00000704 <moveSnakeDown>:
	}else{
		return 0;
	}
	
}
 704:	ef e1       	ldi	r30, 0x1F	; 31
int moveSnakeDown(){
	int x = currentLocation.x;
 706:	f1 e0       	ldi	r31, 0x01	; 1
 708:	80 81       	ld	r24, Z
 70a:	91 81       	ldd	r25, Z+1	; 0x01
	int y = currentLocation.y;
 70c:	62 81       	ldd	r22, Z+2	; 0x02
 70e:	73 81       	ldd	r23, Z+3	; 0x03
	
	x++;
 710:	01 96       	adiw	r24, 0x01	; 1
	if(x == 8){
 712:	88 30       	cpi	r24, 0x08	; 8
 714:	91 05       	cpc	r25, r1
 716:	11 f4       	brne	.+4      	; 0x71c <moveSnakeDown+0x18>
		x = 0;
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	90 e0       	ldi	r25, 0x00	; 0
	}
	if(moveToNewLocation(x,y)){
 71c:	03 df       	rcall	.-506    	; 0x524 <moveToNewLocation>
 71e:	00 97       	sbiw	r24, 0x00	; 0
 720:	19 f0       	breq	.+6      	; 0x728 <moveSnakeDown+0x24>
		update();
 722:	21 de       	rcall	.-958    	; 0x366 <update>
 724:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	08 95       	ret

0000072a <moveSnakeLeft>:
	}else{
		return 0;
	}
}
 72a:	ef e1       	ldi	r30, 0x1F	; 31

int moveSnakeLeft(){
	int x = currentLocation.x;
 72c:	f1 e0       	ldi	r31, 0x01	; 1
 72e:	80 81       	ld	r24, Z
 730:	91 81       	ldd	r25, Z+1	; 0x01
	int y = currentLocation.y;
 732:	62 81       	ldd	r22, Z+2	; 0x02
 734:	73 81       	ldd	r23, Z+3	; 0x03

	y++;
 736:	6f 5f       	subi	r22, 0xFF	; 255
 738:	7f 4f       	sbci	r23, 0xFF	; 255
	if(y == 8){
 73a:	68 30       	cpi	r22, 0x08	; 8
 73c:	71 05       	cpc	r23, r1
 73e:	11 f4       	brne	.+4      	; 0x744 <moveSnakeLeft+0x1a>
		y = 0;
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	70 e0       	ldi	r23, 0x00	; 0
	}
	if(moveToNewLocation(x,y)){
 744:	ef de       	rcall	.-546    	; 0x524 <moveToNewLocation>
 746:	00 97       	sbiw	r24, 0x00	; 0
 748:	19 f0       	breq	.+6      	; 0x750 <moveSnakeLeft+0x26>
		update();
 74a:	0d de       	rcall	.-998    	; 0x366 <update>
 74c:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	08 95       	ret

00000752 <moveSnakeRight>:
		}else{
		return 0;
	}
}
 752:	ef e1       	ldi	r30, 0x1F	; 31

int moveSnakeRight(){
	int x = currentLocation.x;
 754:	f1 e0       	ldi	r31, 0x01	; 1
 756:	80 81       	ld	r24, Z
 758:	91 81       	ldd	r25, Z+1	; 0x01
	int y = currentLocation.y;
 75a:	62 81       	ldd	r22, Z+2	; 0x02
 75c:	73 81       	ldd	r23, Z+3	; 0x03
	
	y--;
 75e:	61 50       	subi	r22, 0x01	; 1
 760:	71 09       	sbc	r23, r1
 762:	10 f4       	brcc	.+4      	; 0x768 <moveSnakeRight+0x16>
	if(y == -1){
		y = 7;
 764:	67 e0       	ldi	r22, 0x07	; 7
 766:	70 e0       	ldi	r23, 0x00	; 0
	}
	if(moveToNewLocation(x,y)){
 768:	dd de       	rcall	.-582    	; 0x524 <moveToNewLocation>
 76a:	00 97       	sbiw	r24, 0x00	; 0
 76c:	19 f0       	breq	.+6      	; 0x774 <moveSnakeRight+0x22>
		update();
 76e:	fb dd       	rcall	.-1034   	; 0x366 <update>
 770:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	08 95       	ret

00000776 <spi_masterInit>:
		}else{
		return 0;
	}
 776:	8f ef       	ldi	r24, 0xFF	; 255
void displayOff(void)
{
	spi_slaveSelect(0);		// Select display chip
	spi_write(0x0C);		// Register 0B: Shutdown register
	spi_write(0x00);		// -> 1 = Normal operation
	spi_slaveDeSelect(0);	// Deselect display chip
 778:	87 bb       	out	0x17, r24	; 23
 77a:	bb 98       	cbi	0x17, 3	; 23
 77c:	c0 9a       	sbi	0x18, 0	; 24
 77e:	82 e5       	ldi	r24, 0x52	; 82
 780:	8d b9       	out	0x0d, r24	; 13
 782:	08 95       	ret

00000784 <spi_write>:
 784:	8f b9       	out	0x0f, r24	; 15
 786:	77 9b       	sbis	0x0e, 7	; 14
 788:	fe cf       	rjmp	.-4      	; 0x786 <spi_write+0x2>
 78a:	08 95       	ret

0000078c <spi_slaveSelect>:
 78c:	98 b3       	in	r25, 0x18	; 24
 78e:	21 e0       	ldi	r18, 0x01	; 1
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	02 c0       	rjmp	.+4      	; 0x798 <spi_slaveSelect+0xc>
 794:	22 0f       	add	r18, r18
 796:	33 1f       	adc	r19, r19
 798:	8a 95       	dec	r24
 79a:	e2 f7       	brpl	.-8      	; 0x794 <spi_slaveSelect+0x8>
 79c:	20 95       	com	r18
 79e:	29 23       	and	r18, r25
 7a0:	28 bb       	out	0x18, r18	; 24
 7a2:	08 95       	ret

000007a4 <spi_slaveDeSelect>:
 7a4:	98 b3       	in	r25, 0x18	; 24
 7a6:	21 e0       	ldi	r18, 0x01	; 1
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <spi_slaveDeSelect+0xc>
 7ac:	22 0f       	add	r18, r18
 7ae:	33 1f       	adc	r19, r19
 7b0:	8a 95       	dec	r24
 7b2:	e2 f7       	brpl	.-8      	; 0x7ac <spi_slaveDeSelect+0x8>
 7b4:	29 2b       	or	r18, r25
 7b6:	28 bb       	out	0x18, r18	; 24
 7b8:	08 95       	ret

000007ba <displayDriverInit>:
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	e7 df       	rcall	.-50     	; 0x78c <spi_slaveSelect>
 7be:	89 e0       	ldi	r24, 0x09	; 9
 7c0:	e1 df       	rcall	.-62     	; 0x784 <spi_write>
 7c2:	8f ef       	ldi	r24, 0xFF	; 255
 7c4:	df df       	rcall	.-66     	; 0x784 <spi_write>
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	ed df       	rcall	.-38     	; 0x7a4 <spi_slaveDeSelect>
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	df df       	rcall	.-66     	; 0x78c <spi_slaveSelect>
 7ce:	8a e0       	ldi	r24, 0x0A	; 10
 7d0:	d9 df       	rcall	.-78     	; 0x784 <spi_write>
 7d2:	8f e0       	ldi	r24, 0x0F	; 15
 7d4:	d7 df       	rcall	.-82     	; 0x784 <spi_write>
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	e5 df       	rcall	.-54     	; 0x7a4 <spi_slaveDeSelect>
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	d7 df       	rcall	.-82     	; 0x78c <spi_slaveSelect>
 7de:	8b e0       	ldi	r24, 0x0B	; 11
 7e0:	d1 df       	rcall	.-94     	; 0x784 <spi_write>
 7e2:	83 e0       	ldi	r24, 0x03	; 3
 7e4:	cf df       	rcall	.-98     	; 0x784 <spi_write>
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	dd df       	rcall	.-70     	; 0x7a4 <spi_slaveDeSelect>
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	cf df       	rcall	.-98     	; 0x78c <spi_slaveSelect>
 7ee:	8c e0       	ldi	r24, 0x0C	; 12
 7f0:	c9 df       	rcall	.-110    	; 0x784 <spi_write>
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	c7 df       	rcall	.-114    	; 0x784 <spi_write>
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	d5 cf       	rjmp	.-86     	; 0x7a4 <spi_slaveDeSelect>
 7fa:	08 95       	ret

000007fc <spi_writeWord>:
}

void spi_writeWord(unsigned char adress, unsigned char data )
{
 7fc:	cf 93       	push	r28
 7fe:	df 93       	push	r29
 800:	d8 2f       	mov	r29, r24
 802:	c6 2f       	mov	r28, r22
	spi_slaveSelect(0);		// Select display chip
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	c2 df       	rcall	.-124    	; 0x78c <spi_slaveSelect>
	spi_write(adress);		// digit adress: (digit place)
 808:	8d 2f       	mov	r24, r29
 80a:	bc df       	rcall	.-136    	; 0x784 <spi_write>
	spi_write(data);		// digit value: 0
 80c:	8c 2f       	mov	r24, r28
 80e:	ba df       	rcall	.-140    	; 0x784 <spi_write>
	spi_slaveDeSelect(0);	// Deselect display chip
 810:	80 e0       	ldi	r24, 0x00	; 0
 812:	c8 df       	rcall	.-112    	; 0x7a4 <spi_slaveDeSelect>
 814:	df 91       	pop	r29
}
 816:	cf 91       	pop	r28
 818:	08 95       	ret

0000081a <clearDisplay>:
 81a:	cf 93       	push	r28
	}
}

void clearDisplay(void)
{
	for (char i =1; i<=4; i++)
 81c:	c1 e0       	ldi	r28, 0x01	; 1
	{
		spi_writeWord(i, 0);
 81e:	60 e0       	ldi	r22, 0x00	; 0
 820:	8c 2f       	mov	r24, r28
 822:	ec df       	rcall	.-40     	; 0x7fc <spi_writeWord>
	}
}

void clearDisplay(void)
{
	for (char i =1; i<=4; i++)
 824:	cf 5f       	subi	r28, 0xFF	; 255
 826:	c5 30       	cpi	r28, 0x05	; 5
 828:	d1 f7       	brne	.-12     	; 0x81e <clearDisplay+0x4>
	{
		spi_writeWord(i, 0);
	}
}
 82a:	cf 91       	pop	r28
 82c:	08 95       	ret

0000082e <writeLedDisplay>:
	spi_write(data);		// digit value: 0
	spi_slaveDeSelect(0);	// Deselect display chip
}

void writeLedDisplay(int value)
{
 82e:	0f 93       	push	r16
 830:	1f 93       	push	r17
 832:	cf 93       	push	r28
 834:	df 93       	push	r29
 836:	08 2f       	mov	r16, r24
 838:	19 2f       	mov	r17, r25
	clearDisplay();
 83a:	ef df       	rcall	.-34     	; 0x81a <clearDisplay>
 83c:	c0 2f       	mov	r28, r16
 83e:	d1 2f       	mov	r29, r17
 840:	c0 31       	cpi	r28, 0x10	; 16
 842:	87 e2       	ldi	r24, 0x27	; 39
 844:	d8 07       	cpc	r29, r24
 846:	14 f0       	brlt	.+4      	; 0x84c <writeLedDisplay+0x1e>
 848:	cf e0       	ldi	r28, 0x0F	; 15
 84a:	d7 e2       	ldi	r29, 0x27	; 39
	if(value > 9999){
		value = 9999;
	}
	if(value < 0)
 84c:	dd 23       	and	r29, r29
 84e:	54 f5       	brge	.+84     	; 0x8a4 <writeLedDisplay+0x76>
		if(value < -999)
		{
			value = -999;
		}

		int tempValue = abs(value);
 850:	c9 31       	cpi	r28, 0x19	; 25
 852:	8c ef       	ldi	r24, 0xFC	; 252
 854:	d8 07       	cpc	r29, r24
 856:	14 f4       	brge	.+4      	; 0x85c <writeLedDisplay+0x2e>
 858:	c9 e1       	ldi	r28, 0x19	; 25
 85a:	dc ef       	ldi	r29, 0xFC	; 252
 85c:	8e 01       	movw	r16, r28
 85e:	dd 23       	and	r29, r29
 860:	24 f4       	brge	.+8      	; 0x86a <writeLedDisplay+0x3c>
 862:	00 27       	eor	r16, r16
 864:	11 27       	eor	r17, r17
 866:	0c 1b       	sub	r16, r28
 868:	1d 0b       	sbc	r17, r29
		int num3 = (tempValue / 1) % 10;
		int num2 = (tempValue / 10) % 10;
		int num1 = (tempValue / 100) % 10;

		spi_writeWord(4, 10);
 86a:	6a e0       	ldi	r22, 0x0A	; 10
 86c:	84 e0       	ldi	r24, 0x04	; 4
 86e:	c6 df       	rcall	.-116    	; 0x7fc <spi_writeWord>
		spi_writeWord(3, num1);
 870:	c8 01       	movw	r24, r16
 872:	64 e6       	ldi	r22, 0x64	; 100
 874:	70 e0       	ldi	r23, 0x00	; 0
 876:	7d d1       	rcall	.+762    	; 0xb72 <__divmodhi4>
 878:	cb 01       	movw	r24, r22
 87a:	ca e0       	ldi	r28, 0x0A	; 10
 87c:	d0 e0       	ldi	r29, 0x00	; 0
 87e:	be 01       	movw	r22, r28
 880:	78 d1       	rcall	.+752    	; 0xb72 <__divmodhi4>
 882:	68 2f       	mov	r22, r24
 884:	83 e0       	ldi	r24, 0x03	; 3
 886:	ba df       	rcall	.-140    	; 0x7fc <spi_writeWord>
		spi_writeWord(2, num2);
 888:	c8 01       	movw	r24, r16
 88a:	be 01       	movw	r22, r28
 88c:	72 d1       	rcall	.+740    	; 0xb72 <__divmodhi4>
 88e:	18 2f       	mov	r17, r24
 890:	cb 01       	movw	r24, r22
 892:	be 01       	movw	r22, r28
 894:	6e d1       	rcall	.+732    	; 0xb72 <__divmodhi4>
 896:	68 2f       	mov	r22, r24
 898:	82 e0       	ldi	r24, 0x02	; 2
 89a:	b0 df       	rcall	.-160    	; 0x7fc <spi_writeWord>
		spi_writeWord(1, num3);
 89c:	61 2f       	mov	r22, r17
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	ad df       	rcall	.-166    	; 0x7fc <spi_writeWord>
 8a2:	23 c0       	rjmp	.+70     	; 0x8ea <writeLedDisplay+0xbc>
		int num4 = (value / 1) % 10;
		int num3 = (value / 10) % 10;
		int num2 = (value / 100) % 10;
		int num1 = (value / 1000) % 10;

		spi_writeWord(4, num1);
 8a4:	ce 01       	movw	r24, r28
 8a6:	68 ee       	ldi	r22, 0xE8	; 232
 8a8:	73 e0       	ldi	r23, 0x03	; 3
 8aa:	63 d1       	rcall	.+710    	; 0xb72 <__divmodhi4>
 8ac:	cb 01       	movw	r24, r22
 8ae:	0a e0       	ldi	r16, 0x0A	; 10
 8b0:	10 e0       	ldi	r17, 0x00	; 0
 8b2:	b8 01       	movw	r22, r16
 8b4:	5e d1       	rcall	.+700    	; 0xb72 <__divmodhi4>
 8b6:	68 2f       	mov	r22, r24
 8b8:	84 e0       	ldi	r24, 0x04	; 4
 8ba:	a0 df       	rcall	.-192    	; 0x7fc <spi_writeWord>
		spi_writeWord(3, num2);
 8bc:	ce 01       	movw	r24, r28
 8be:	64 e6       	ldi	r22, 0x64	; 100
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	57 d1       	rcall	.+686    	; 0xb72 <__divmodhi4>
 8c4:	cb 01       	movw	r24, r22
 8c6:	b8 01       	movw	r22, r16
 8c8:	54 d1       	rcall	.+680    	; 0xb72 <__divmodhi4>
 8ca:	68 2f       	mov	r22, r24
 8cc:	83 e0       	ldi	r24, 0x03	; 3
 8ce:	96 df       	rcall	.-212    	; 0x7fc <spi_writeWord>
		spi_writeWord(2, num3);
 8d0:	ce 01       	movw	r24, r28
 8d2:	b8 01       	movw	r22, r16
 8d4:	4e d1       	rcall	.+668    	; 0xb72 <__divmodhi4>
 8d6:	c8 2f       	mov	r28, r24
 8d8:	cb 01       	movw	r24, r22
 8da:	b8 01       	movw	r22, r16
 8dc:	4a d1       	rcall	.+660    	; 0xb72 <__divmodhi4>
 8de:	68 2f       	mov	r22, r24
 8e0:	82 e0       	ldi	r24, 0x02	; 2
 8e2:	8c df       	rcall	.-232    	; 0x7fc <spi_writeWord>
 8e4:	6c 2f       	mov	r22, r28
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	89 df       	rcall	.-238    	; 0x7fc <spi_writeWord>
		spi_writeWord(1, num4);
 8ea:	df 91       	pop	r29
 8ec:	cf 91       	pop	r28
 8ee:	1f 91       	pop	r17
 8f0:	0f 91       	pop	r16
	}
}
 8f2:	08 95       	ret

000008f4 <calculateNewScoreAppleCollected>:
 8f4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <score>
 8f8:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <score+0x1>
	}
}

void calculateNewScoreAppleCollected()
{
	score += 20;
 8fc:	44 96       	adiw	r24, 0x14	; 20
 8fe:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <score+0x1>
 902:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <score>
	writeLedDisplay(score);
 906:	93 cf       	rjmp	.-218    	; 0x82e <writeLedDisplay>
 908:	08 95       	ret

0000090a <resetScore>:
}

void resetScore(){
	score = 0;
 90a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <score+0x1>
 90e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <score>
	writeLedDisplay(score);
 912:	80 e0       	ldi	r24, 0x00	; 0
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	8b cf       	rjmp	.-234    	; 0x82e <writeLedDisplay>
 918:	08 95       	ret

0000091a <calculateNewScoreMovement>:
}

void calculateNewScoreMovement()
{
 91a:	08 95       	ret

0000091c <__vector_9>:
{
	while (WAITING == checkDirection())
	{
		
	}
}
 91c:	1f 92       	push	r1
 91e:	0f 92       	push	r0
 920:	0f b6       	in	r0, 0x3f	; 63
 922:	0f 92       	push	r0
 924:	11 24       	eor	r1, r1
 926:	0b b6       	in	r0, 0x3b	; 59
 928:	0f 92       	push	r0
 92a:	2f 93       	push	r18
 92c:	3f 93       	push	r19
 92e:	4f 93       	push	r20
 930:	5f 93       	push	r21
 932:	6f 93       	push	r22
 934:	7f 93       	push	r23
 936:	8f 93       	push	r24
 938:	9f 93       	push	r25
 93a:	af 93       	push	r26
 93c:	bf 93       	push	r27
 93e:	ef 93       	push	r30
 940:	ff 93       	push	r31
 942:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <gStatus>
 946:	81 30       	cpi	r24, 0x01	; 1
 948:	31 f0       	breq	.+12     	; 0x956 <__vector_9+0x3a>
 94a:	08 f4       	brcc	.+2      	; 0x94e <__vector_9+0x32>
 94c:	4d c0       	rjmp	.+154    	; 0x9e8 <__vector_9+0xcc>
 94e:	82 30       	cpi	r24, 0x02	; 2
 950:	09 f4       	brne	.+2      	; 0x954 <__vector_9+0x38>
 952:	85 c0       	rjmp	.+266    	; 0xa5e <__vector_9+0x142>
 954:	a2 c0       	rjmp	.+324    	; 0xa9a <__vector_9+0x17e>
 956:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <check>
 95a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <check+0x1>
 95e:	89 2b       	or	r24, r25
 960:	59 f0       	breq	.+22     	; 0x978 <__vector_9+0x5c>
 962:	c5 db       	rcall	.-2166   	; 0xee <checkDirection>
 964:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <status>
 968:	89 17       	cp	r24, r25
 96a:	31 f0       	breq	.+12     	; 0x978 <__vector_9+0x5c>
 96c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <check+0x1>
 970:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <check>
 974:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <status>
 978:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <tick>
 97c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <tick+0x1>
 980:	88 3c       	cpi	r24, 0xC8	; 200
 982:	91 05       	cpc	r25, r1
 984:	09 f0       	breq	.+2      	; 0x988 <__vector_9+0x6c>
 986:	89 c0       	rjmp	.+274    	; 0xa9a <__vector_9+0x17e>
 988:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <tick+0x1>
 98c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <tick>
 990:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <status>
 994:	81 30       	cpi	r24, 0x01	; 1
 996:	69 f0       	breq	.+26     	; 0x9b2 <__vector_9+0x96>
 998:	28 f0       	brcs	.+10     	; 0x9a4 <__vector_9+0x88>
 99a:	82 30       	cpi	r24, 0x02	; 2
 99c:	89 f0       	breq	.+34     	; 0x9c0 <__vector_9+0xa4>
 99e:	83 30       	cpi	r24, 0x03	; 3
 9a0:	b1 f0       	breq	.+44     	; 0x9ce <__vector_9+0xb2>
 9a2:	1b c0       	rjmp	.+54     	; 0x9da <__vector_9+0xbe>
 9a4:	9e de       	rcall	.-708    	; 0x6e2 <moveSnakeUp>
 9a6:	89 2b       	or	r24, r25
 9a8:	c1 f4       	brne	.+48     	; 0x9da <__vector_9+0xbe>
 9aa:	82 e0       	ldi	r24, 0x02	; 2
 9ac:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <gStatus>
 9b0:	14 c0       	rjmp	.+40     	; 0x9da <__vector_9+0xbe>
 9b2:	a8 de       	rcall	.-688    	; 0x704 <moveSnakeDown>
 9b4:	89 2b       	or	r24, r25
 9b6:	89 f4       	brne	.+34     	; 0x9da <__vector_9+0xbe>
 9b8:	82 e0       	ldi	r24, 0x02	; 2
 9ba:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <gStatus>
 9be:	0d c0       	rjmp	.+26     	; 0x9da <__vector_9+0xbe>
 9c0:	b4 de       	rcall	.-664    	; 0x72a <moveSnakeLeft>
 9c2:	89 2b       	or	r24, r25
 9c4:	51 f4       	brne	.+20     	; 0x9da <__vector_9+0xbe>
 9c6:	82 e0       	ldi	r24, 0x02	; 2
 9c8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <gStatus>
 9cc:	06 c0       	rjmp	.+12     	; 0x9da <__vector_9+0xbe>
 9ce:	c1 de       	rcall	.-638    	; 0x752 <moveSnakeRight>
 9d0:	89 2b       	or	r24, r25
 9d2:	19 f4       	brne	.+6      	; 0x9da <__vector_9+0xbe>
 9d4:	82 e0       	ldi	r24, 0x02	; 2
 9d6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <gStatus>
 9da:	81 e0       	ldi	r24, 0x01	; 1
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <check+0x1>
 9e2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <check>
 9e6:	59 c0       	rjmp	.+178    	; 0xa9a <__vector_9+0x17e>
 9e8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <tick>
 9ec:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <tick+0x1>
 9f0:	8c 3b       	cpi	r24, 0xBC	; 188
 9f2:	22 e0       	ldi	r18, 0x02	; 2
 9f4:	92 07       	cpc	r25, r18
 9f6:	39 f4       	brne	.+14     	; 0xa06 <__vector_9+0xea>
 9f8:	8d d0       	rcall	.+282    	; 0xb14 <beepOn>
 9fa:	83 e0       	ldi	r24, 0x03	; 3
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	c9 db       	rcall	.-2158   	; 0x192 <drawCounting>
 a00:	b2 dc       	rcall	.-1692   	; 0x366 <update>
 a02:	8b d0       	rcall	.+278    	; 0xb1a <beepOff>
 a04:	4a c0       	rjmp	.+148    	; 0xa9a <__vector_9+0x17e>
 a06:	88 37       	cpi	r24, 0x78	; 120
 a08:	25 e0       	ldi	r18, 0x05	; 5
 a0a:	92 07       	cpc	r25, r18
 a0c:	39 f4       	brne	.+14     	; 0xa1c <__vector_9+0x100>
 a0e:	82 d0       	rcall	.+260    	; 0xb14 <beepOn>
 a10:	82 e0       	ldi	r24, 0x02	; 2
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	be db       	rcall	.-2180   	; 0x192 <drawCounting>
 a16:	a7 dc       	rcall	.-1714   	; 0x366 <update>
 a18:	80 d0       	rcall	.+256    	; 0xb1a <beepOff>
 a1a:	3f c0       	rjmp	.+126    	; 0xa9a <__vector_9+0x17e>
 a1c:	84 33       	cpi	r24, 0x34	; 52
 a1e:	28 e0       	ldi	r18, 0x08	; 8
 a20:	92 07       	cpc	r25, r18
 a22:	39 f4       	brne	.+14     	; 0xa32 <__vector_9+0x116>
 a24:	77 d0       	rcall	.+238    	; 0xb14 <beepOn>
 a26:	81 e0       	ldi	r24, 0x01	; 1
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	b3 db       	rcall	.-2202   	; 0x192 <drawCounting>
 a2c:	9c dc       	rcall	.-1736   	; 0x366 <update>
 a2e:	75 d0       	rcall	.+234    	; 0xb1a <beepOff>
 a30:	34 c0       	rjmp	.+104    	; 0xa9a <__vector_9+0x17e>
 a32:	80 3f       	cpi	r24, 0xF0	; 240
 a34:	9a 40       	sbci	r25, 0x0A	; 10
 a36:	09 f0       	breq	.+2      	; 0xa3a <__vector_9+0x11e>
 a38:	30 c0       	rjmp	.+96     	; 0xa9a <__vector_9+0x17e>
 a3a:	6c d0       	rcall	.+216    	; 0xb14 <beepOn>
 a3c:	24 dc       	rcall	.-1976   	; 0x286 <displayClr>
 a3e:	b2 dc       	rcall	.-1692   	; 0x3a4 <displayDrawStart>
 a40:	d6 dc       	rcall	.-1620   	; 0x3ee <addCandy>
 a42:	91 dc       	rcall	.-1758   	; 0x366 <update>
 a44:	6a d0       	rcall	.+212    	; 0xb1a <beepOff>
 a46:	81 e0       	ldi	r24, 0x01	; 1
 a48:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <gStatus>
 a4c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <check+0x1>
 a50:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <check>
 a54:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <tick+0x1>
 a58:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <tick>
 a5c:	1e c0       	rjmp	.+60     	; 0xa9a <__vector_9+0x17e>
 a5e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <tick>
 a62:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <tick+0x1>
 a66:	81 30       	cpi	r24, 0x01	; 1
 a68:	91 05       	cpc	r25, r1
 a6a:	29 f4       	brne	.+10     	; 0xa76 <__vector_9+0x15a>
 a6c:	58 d0       	rcall	.+176    	; 0xb1e <beepGameOver>
 a6e:	83 db       	rcall	.-2298   	; 0x176 <drawImage>
 a70:	7a dc       	rcall	.-1804   	; 0x366 <update>
 a72:	55 d0       	rcall	.+170    	; 0xb1e <beepGameOver>
 a74:	12 c0       	rjmp	.+36     	; 0xa9a <__vector_9+0x17e>
 a76:	81 3a       	cpi	r24, 0xA1	; 161
 a78:	9f 40       	sbci	r25, 0x0F	; 15
 a7a:	7c f0       	brlt	.+30     	; 0xa9a <__vector_9+0x17e>
 a7c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <gStatus>
 a80:	2d dd       	rcall	.-1446   	; 0x4dc <resetDisplay>
 a82:	43 df       	rcall	.-378    	; 0x90a <resetScore>
 a84:	00 dc       	rcall	.-2048   	; 0x286 <displayClr>
 a86:	6f dc       	rcall	.-1826   	; 0x366 <update>
 a88:	64 e0       	ldi	r22, 0x04	; 4
 a8a:	70 e0       	ldi	r23, 0x00	; 0
 a8c:	84 e0       	ldi	r24, 0x04	; 4
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	c2 db       	rcall	.-2172   	; 0x216 <setStartLocation>
 a92:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <tick+0x1>
 a96:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <tick>
 a9a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <tick>
 a9e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <tick+0x1>
 aa2:	01 96       	adiw	r24, 0x01	; 1
 aa4:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <tick+0x1>
 aa8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <tick>
 aac:	ff 91       	pop	r31
 aae:	ef 91       	pop	r30
 ab0:	bf 91       	pop	r27
 ab2:	af 91       	pop	r26
 ab4:	9f 91       	pop	r25
 ab6:	8f 91       	pop	r24
 ab8:	7f 91       	pop	r23
 aba:	6f 91       	pop	r22
 abc:	5f 91       	pop	r21
 abe:	4f 91       	pop	r20
 ac0:	3f 91       	pop	r19
 ac2:	2f 91       	pop	r18
 ac4:	0f 90       	pop	r0
 ac6:	0b be       	out	0x3b, r0	; 59
 ac8:	0f 90       	pop	r0
 aca:	0f be       	out	0x3f, r0	; 63
 acc:	0f 90       	pop	r0
 ace:	1f 90       	pop	r1
 ad0:	18 95       	reti

00000ad2 <main>:


int main(void)
{
								//initializatie voor het scoreBord
	DDRB=0x01;					// Set PB0 pin as output for display select
 ad2:	81 e0       	ldi	r24, 0x01	; 1
 ad4:	87 bb       	out	0x17, r24	; 23
	spi_masterInit();			// Initialize spi module
 ad6:	4f de       	rcall	.-866    	; 0x776 <spi_masterInit>
	displayDriverInit();		// Initialize display chip
 ad8:	70 de       	rcall	.-800    	; 0x7ba <displayDriverInit>
 ada:	84 e0       	ldi	r24, 0x04	; 4
	status = WAITING;
 adc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <status>
	displayInit();
 ae0:	32 dc       	rcall	.-1948   	; 0x346 <displayInit>
	wait(500);
 ae2:	84 ef       	ldi	r24, 0xF4	; 244
 ae4:	91 e0       	ldi	r25, 0x01	; 1
 ae6:	34 d0       	rcall	.+104    	; 0xb50 <wait>
 ae8:	8f e0       	ldi	r24, 0x0F	; 15
	DDRA = 0x0F;
 aea:	8a bb       	out	0x1a, r24	; 26
 aec:	8f ef       	ldi	r24, 0xFF	; 255
	
	 DDRC = 0xff;           // Configure PORTC as output for sound
 aee:	84 bb       	out	0x14, r24	; 20
 af0:	64 e0       	ldi	r22, 0x04	; 4

	//addCandy();
	setStartLocation(4,4);
 af2:	70 e0       	ldi	r23, 0x00	; 0
 af4:	84 e0       	ldi	r24, 0x04	; 4
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	8e db       	rcall	.-2276   	; 0x216 <setStartLocation>
 afa:	87 e0       	ldi	r24, 0x07	; 7

		//EICRA |= 0x30;			// INT2 rising edge
		//EIMSK |= 0x04;			// Enable INT2
	
	    OCR2 = 519;
 afc:	83 bd       	out	0x23, r24	; 35
 afe:	88 e0       	ldi	r24, 0x08	; 8
	    TCCR2 = 1<<WGM21;
 b00:	85 bd       	out	0x25, r24	; 37
 b02:	87 b7       	in	r24, 0x37	; 55
	    
	    TIMSK = TIMSK | 1<<TOIE1 | 1<<OCIE2;
 b04:	84 68       	ori	r24, 0x84	; 132
 b06:	87 bf       	out	0x37, r24	; 55
 b08:	85 b5       	in	r24, 0x25	; 37
	    TCCR2 |= 1<<CS22 | 0<<CS21 | 1<<CS20;
 b0a:	85 60       	ori	r24, 0x05	; 5
 b0c:	85 bd       	out	0x25, r24	; 37
 b0e:	14 bc       	out	0x24, r1	; 36
	    TCNT2 = 0;
 b10:	78 94       	sei
	sei();
 b12:	ff cf       	rjmp	.-2      	; 0xb12 <main+0x40>

00000b14 <beepOn>:

#define F_CPU 2000  // change this value to change the sound produced by the beep

void beepOn(void)
{
	 PORTC = 0xff;        // Turn ON the Buzzer conneted to PORTC
 b14:	8f ef       	ldi	r24, 0xFF	; 255
 b16:	85 bb       	out	0x15, r24	; 21
 b18:	08 95       	ret

00000b1a <beepOff>:
}

void beepOff(void)
{
	  PORTC = 0x00;        // Turn OFF the Buzzer connected to PORTC
 b1a:	15 ba       	out	0x15, r1	; 21
 b1c:	08 95       	ret

00000b1e <beepGameOver>:

}

void beepGameOver()
{
 b1e:	cf 93       	push	r28
		PORTC = 0xff;        // Turn ON the Buzzer conneted to PORTC
 b20:	cf ef       	ldi	r28, 0xFF	; 255
 b22:	c5 bb       	out	0x15, r28	; 21
		wait(300);
 b24:	8c e2       	ldi	r24, 0x2C	; 44
 b26:	91 e0       	ldi	r25, 0x01	; 1
 b28:	13 d0       	rcall	.+38     	; 0xb50 <wait>
	    PORTC = 0x00;
 b2a:	15 ba       	out	0x15, r1	; 21
	    wait(500);        // Turn OFF the Buzzer connected to PORTC
 b2c:	84 ef       	ldi	r24, 0xF4	; 244
 b2e:	91 e0       	ldi	r25, 0x01	; 1
 b30:	0f d0       	rcall	.+30     	; 0xb50 <wait>
	  	PORTC = 0xff;        // Turn ON the Buzzer conneted to PORTC
 b32:	c5 bb       	out	0x15, r28	; 21
	  	wait(500);
 b34:	84 ef       	ldi	r24, 0xF4	; 244
 b36:	91 e0       	ldi	r25, 0x01	; 1
 b38:	0b d0       	rcall	.+22     	; 0xb50 <wait>
	    PORTC = 0x00;        // Turn OFF the Buzzer connected to PORTC
		wait(500);
 b3a:	15 ba       	out	0x15, r1	; 21
 b3c:	84 ef       	ldi	r24, 0xF4	; 244
 b3e:	91 e0       	ldi	r25, 0x01	; 1
		PORTC = 0xff;        // Turn ON the Buzzer conneted to PORTC
 b40:	07 d0       	rcall	.+14     	; 0xb50 <wait>
	    wait(2000);
 b42:	c5 bb       	out	0x15, r28	; 21
 b44:	80 ed       	ldi	r24, 0xD0	; 208
 b46:	97 e0       	ldi	r25, 0x07	; 7
 b48:	03 d0       	rcall	.+6      	; 0xb50 <wait>
		PORTC = 0x00;        // Turn OFF the Buzzer connected to PORTC
 b4a:	15 ba       	out	0x15, r1	; 21
	  

 b4c:	cf 91       	pop	r28
 b4e:	08 95       	ret

00000b50 <wait>:
#include <avr/io.h>
#include <util/delay.h>

void wait( int ms )
{
	for (int i=0; i<ms; i++)
 b50:	18 16       	cp	r1, r24
 b52:	19 06       	cpc	r1, r25
 b54:	6c f4       	brge	.+26     	; 0xb70 <wait+0x20>
 b56:	20 e0       	ldi	r18, 0x00	; 0
 b58:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b5a:	ef ec       	ldi	r30, 0xCF	; 207
 b5c:	f7 e0       	ldi	r31, 0x07	; 7
 b5e:	31 97       	sbiw	r30, 0x01	; 1
 b60:	f1 f7       	brne	.-4      	; 0xb5e <wait+0xe>
 b62:	00 c0       	rjmp	.+0      	; 0xb64 <wait+0x14>
 b64:	00 00       	nop
 b66:	2f 5f       	subi	r18, 0xFF	; 255
 b68:	3f 4f       	sbci	r19, 0xFF	; 255
 b6a:	82 17       	cp	r24, r18
 b6c:	93 07       	cpc	r25, r19
 b6e:	a9 f7       	brne	.-22     	; 0xb5a <wait+0xa>
 b70:	08 95       	ret

00000b72 <__divmodhi4>:
 b72:	97 fb       	bst	r25, 7
 b74:	07 2e       	mov	r0, r23
 b76:	16 f4       	brtc	.+4      	; 0xb7c <__divmodhi4+0xa>
 b78:	00 94       	com	r0
 b7a:	06 d0       	rcall	.+12     	; 0xb88 <__divmodhi4_neg1>
 b7c:	77 fd       	sbrc	r23, 7
 b7e:	08 d0       	rcall	.+16     	; 0xb90 <__divmodhi4_neg2>
 b80:	0b d0       	rcall	.+22     	; 0xb98 <__udivmodhi4>
 b82:	07 fc       	sbrc	r0, 7
 b84:	05 d0       	rcall	.+10     	; 0xb90 <__divmodhi4_neg2>
 b86:	3e f4       	brtc	.+14     	; 0xb96 <__divmodhi4_exit>

00000b88 <__divmodhi4_neg1>:
 b88:	90 95       	com	r25
 b8a:	81 95       	neg	r24
 b8c:	9f 4f       	sbci	r25, 0xFF	; 255
 b8e:	08 95       	ret

00000b90 <__divmodhi4_neg2>:
 b90:	70 95       	com	r23
 b92:	61 95       	neg	r22
 b94:	7f 4f       	sbci	r23, 0xFF	; 255

00000b96 <__divmodhi4_exit>:
 b96:	08 95       	ret

00000b98 <__udivmodhi4>:
 b98:	aa 1b       	sub	r26, r26
 b9a:	bb 1b       	sub	r27, r27
 b9c:	51 e1       	ldi	r21, 0x11	; 17
 b9e:	07 c0       	rjmp	.+14     	; 0xbae <__udivmodhi4_ep>

00000ba0 <__udivmodhi4_loop>:
 ba0:	aa 1f       	adc	r26, r26
 ba2:	bb 1f       	adc	r27, r27
 ba4:	a6 17       	cp	r26, r22
 ba6:	b7 07       	cpc	r27, r23
 ba8:	10 f0       	brcs	.+4      	; 0xbae <__udivmodhi4_ep>
 baa:	a6 1b       	sub	r26, r22
 bac:	b7 0b       	sbc	r27, r23

00000bae <__udivmodhi4_ep>:
 bae:	88 1f       	adc	r24, r24
 bb0:	99 1f       	adc	r25, r25
 bb2:	5a 95       	dec	r21
 bb4:	a9 f7       	brne	.-22     	; 0xba0 <__udivmodhi4_loop>
 bb6:	80 95       	com	r24
 bb8:	90 95       	com	r25
 bba:	bc 01       	movw	r22, r24
 bbc:	cd 01       	movw	r24, r26
 bbe:	08 95       	ret

00000bc0 <malloc>:
 bc0:	0f 93       	push	r16
 bc2:	1f 93       	push	r17
 bc4:	cf 93       	push	r28
 bc6:	df 93       	push	r29
 bc8:	82 30       	cpi	r24, 0x02	; 2
 bca:	91 05       	cpc	r25, r1
 bcc:	10 f4       	brcc	.+4      	; 0xbd2 <malloc+0x12>
 bce:	82 e0       	ldi	r24, 0x02	; 2
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <__flp>
 bd6:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <__flp+0x1>
 bda:	20 e0       	ldi	r18, 0x00	; 0
 bdc:	30 e0       	ldi	r19, 0x00	; 0
 bde:	a0 e0       	ldi	r26, 0x00	; 0
 be0:	b0 e0       	ldi	r27, 0x00	; 0
 be2:	30 97       	sbiw	r30, 0x00	; 0
 be4:	19 f1       	breq	.+70     	; 0xc2c <malloc+0x6c>
 be6:	40 81       	ld	r20, Z
 be8:	51 81       	ldd	r21, Z+1	; 0x01
 bea:	02 81       	ldd	r16, Z+2	; 0x02
 bec:	13 81       	ldd	r17, Z+3	; 0x03
 bee:	48 17       	cp	r20, r24
 bf0:	59 07       	cpc	r21, r25
 bf2:	c8 f0       	brcs	.+50     	; 0xc26 <malloc+0x66>
 bf4:	84 17       	cp	r24, r20
 bf6:	95 07       	cpc	r25, r21
 bf8:	69 f4       	brne	.+26     	; 0xc14 <malloc+0x54>
 bfa:	10 97       	sbiw	r26, 0x00	; 0
 bfc:	31 f0       	breq	.+12     	; 0xc0a <malloc+0x4a>
 bfe:	12 96       	adiw	r26, 0x02	; 2
 c00:	0c 93       	st	X, r16
 c02:	12 97       	sbiw	r26, 0x02	; 2
 c04:	13 96       	adiw	r26, 0x03	; 3
 c06:	1c 93       	st	X, r17
 c08:	27 c0       	rjmp	.+78     	; 0xc58 <malloc+0x98>
 c0a:	00 93 2f 01 	sts	0x012F, r16	; 0x80012f <__flp>
 c0e:	10 93 30 01 	sts	0x0130, r17	; 0x800130 <__flp+0x1>
 c12:	22 c0       	rjmp	.+68     	; 0xc58 <malloc+0x98>
 c14:	21 15       	cp	r18, r1
 c16:	31 05       	cpc	r19, r1
 c18:	19 f0       	breq	.+6      	; 0xc20 <malloc+0x60>
 c1a:	42 17       	cp	r20, r18
 c1c:	53 07       	cpc	r21, r19
 c1e:	18 f4       	brcc	.+6      	; 0xc26 <malloc+0x66>
 c20:	9a 01       	movw	r18, r20
 c22:	bd 01       	movw	r22, r26
 c24:	ef 01       	movw	r28, r30
 c26:	df 01       	movw	r26, r30
 c28:	f8 01       	movw	r30, r16
 c2a:	db cf       	rjmp	.-74     	; 0xbe2 <malloc+0x22>
 c2c:	21 15       	cp	r18, r1
 c2e:	31 05       	cpc	r19, r1
 c30:	f9 f0       	breq	.+62     	; 0xc70 <malloc+0xb0>
 c32:	28 1b       	sub	r18, r24
 c34:	39 0b       	sbc	r19, r25
 c36:	24 30       	cpi	r18, 0x04	; 4
 c38:	31 05       	cpc	r19, r1
 c3a:	80 f4       	brcc	.+32     	; 0xc5c <malloc+0x9c>
 c3c:	8a 81       	ldd	r24, Y+2	; 0x02
 c3e:	9b 81       	ldd	r25, Y+3	; 0x03
 c40:	61 15       	cp	r22, r1
 c42:	71 05       	cpc	r23, r1
 c44:	21 f0       	breq	.+8      	; 0xc4e <malloc+0x8e>
 c46:	fb 01       	movw	r30, r22
 c48:	93 83       	std	Z+3, r25	; 0x03
 c4a:	82 83       	std	Z+2, r24	; 0x02
 c4c:	04 c0       	rjmp	.+8      	; 0xc56 <malloc+0x96>
 c4e:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <__flp+0x1>
 c52:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <__flp>
 c56:	fe 01       	movw	r30, r28
 c58:	32 96       	adiw	r30, 0x02	; 2
 c5a:	44 c0       	rjmp	.+136    	; 0xce4 <malloc+0x124>
 c5c:	fe 01       	movw	r30, r28
 c5e:	e2 0f       	add	r30, r18
 c60:	f3 1f       	adc	r31, r19
 c62:	81 93       	st	Z+, r24
 c64:	91 93       	st	Z+, r25
 c66:	22 50       	subi	r18, 0x02	; 2
 c68:	31 09       	sbc	r19, r1
 c6a:	39 83       	std	Y+1, r19	; 0x01
 c6c:	28 83       	st	Y, r18
 c6e:	3a c0       	rjmp	.+116    	; 0xce4 <malloc+0x124>
 c70:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <__brkval>
 c74:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <__brkval+0x1>
 c78:	23 2b       	or	r18, r19
 c7a:	41 f4       	brne	.+16     	; 0xc8c <malloc+0xcc>
 c7c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 c80:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 c84:	30 93 2e 01 	sts	0x012E, r19	; 0x80012e <__brkval+0x1>
 c88:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <__brkval>
 c8c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 c90:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 c94:	21 15       	cp	r18, r1
 c96:	31 05       	cpc	r19, r1
 c98:	41 f4       	brne	.+16     	; 0xcaa <malloc+0xea>
 c9a:	2d b7       	in	r18, 0x3d	; 61
 c9c:	3e b7       	in	r19, 0x3e	; 62
 c9e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 ca2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 ca6:	24 1b       	sub	r18, r20
 ca8:	35 0b       	sbc	r19, r21
 caa:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <__brkval>
 cae:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <__brkval+0x1>
 cb2:	e2 17       	cp	r30, r18
 cb4:	f3 07       	cpc	r31, r19
 cb6:	a0 f4       	brcc	.+40     	; 0xce0 <malloc+0x120>
 cb8:	2e 1b       	sub	r18, r30
 cba:	3f 0b       	sbc	r19, r31
 cbc:	28 17       	cp	r18, r24
 cbe:	39 07       	cpc	r19, r25
 cc0:	78 f0       	brcs	.+30     	; 0xce0 <malloc+0x120>
 cc2:	ac 01       	movw	r20, r24
 cc4:	4e 5f       	subi	r20, 0xFE	; 254
 cc6:	5f 4f       	sbci	r21, 0xFF	; 255
 cc8:	24 17       	cp	r18, r20
 cca:	35 07       	cpc	r19, r21
 ccc:	48 f0       	brcs	.+18     	; 0xce0 <malloc+0x120>
 cce:	4e 0f       	add	r20, r30
 cd0:	5f 1f       	adc	r21, r31
 cd2:	50 93 2e 01 	sts	0x012E, r21	; 0x80012e <__brkval+0x1>
 cd6:	40 93 2d 01 	sts	0x012D, r20	; 0x80012d <__brkval>
 cda:	81 93       	st	Z+, r24
 cdc:	91 93       	st	Z+, r25
 cde:	02 c0       	rjmp	.+4      	; 0xce4 <malloc+0x124>
 ce0:	e0 e0       	ldi	r30, 0x00	; 0
 ce2:	f0 e0       	ldi	r31, 0x00	; 0
 ce4:	cf 01       	movw	r24, r30
 ce6:	df 91       	pop	r29
 ce8:	cf 91       	pop	r28
 cea:	1f 91       	pop	r17
 cec:	0f 91       	pop	r16
 cee:	08 95       	ret

00000cf0 <free>:
 cf0:	cf 93       	push	r28
 cf2:	df 93       	push	r29
 cf4:	00 97       	sbiw	r24, 0x00	; 0
 cf6:	09 f4       	brne	.+2      	; 0xcfa <free+0xa>
 cf8:	81 c0       	rjmp	.+258    	; 0xdfc <free+0x10c>
 cfa:	fc 01       	movw	r30, r24
 cfc:	32 97       	sbiw	r30, 0x02	; 2
 cfe:	13 82       	std	Z+3, r1	; 0x03
 d00:	12 82       	std	Z+2, r1	; 0x02
 d02:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <__flp>
 d06:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <__flp+0x1>
 d0a:	10 97       	sbiw	r26, 0x00	; 0
 d0c:	81 f4       	brne	.+32     	; 0xd2e <free+0x3e>
 d0e:	20 81       	ld	r18, Z
 d10:	31 81       	ldd	r19, Z+1	; 0x01
 d12:	82 0f       	add	r24, r18
 d14:	93 1f       	adc	r25, r19
 d16:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <__brkval>
 d1a:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <__brkval+0x1>
 d1e:	28 17       	cp	r18, r24
 d20:	39 07       	cpc	r19, r25
 d22:	51 f5       	brne	.+84     	; 0xd78 <free+0x88>
 d24:	f0 93 2e 01 	sts	0x012E, r31	; 0x80012e <__brkval+0x1>
 d28:	e0 93 2d 01 	sts	0x012D, r30	; 0x80012d <__brkval>
 d2c:	67 c0       	rjmp	.+206    	; 0xdfc <free+0x10c>
 d2e:	ed 01       	movw	r28, r26
 d30:	20 e0       	ldi	r18, 0x00	; 0
 d32:	30 e0       	ldi	r19, 0x00	; 0
 d34:	ce 17       	cp	r28, r30
 d36:	df 07       	cpc	r29, r31
 d38:	40 f4       	brcc	.+16     	; 0xd4a <free+0x5a>
 d3a:	4a 81       	ldd	r20, Y+2	; 0x02
 d3c:	5b 81       	ldd	r21, Y+3	; 0x03
 d3e:	9e 01       	movw	r18, r28
 d40:	41 15       	cp	r20, r1
 d42:	51 05       	cpc	r21, r1
 d44:	f1 f0       	breq	.+60     	; 0xd82 <free+0x92>
 d46:	ea 01       	movw	r28, r20
 d48:	f5 cf       	rjmp	.-22     	; 0xd34 <free+0x44>
 d4a:	d3 83       	std	Z+3, r29	; 0x03
 d4c:	c2 83       	std	Z+2, r28	; 0x02
 d4e:	40 81       	ld	r20, Z
 d50:	51 81       	ldd	r21, Z+1	; 0x01
 d52:	84 0f       	add	r24, r20
 d54:	95 1f       	adc	r25, r21
 d56:	c8 17       	cp	r28, r24
 d58:	d9 07       	cpc	r29, r25
 d5a:	59 f4       	brne	.+22     	; 0xd72 <free+0x82>
 d5c:	88 81       	ld	r24, Y
 d5e:	99 81       	ldd	r25, Y+1	; 0x01
 d60:	84 0f       	add	r24, r20
 d62:	95 1f       	adc	r25, r21
 d64:	02 96       	adiw	r24, 0x02	; 2
 d66:	91 83       	std	Z+1, r25	; 0x01
 d68:	80 83       	st	Z, r24
 d6a:	8a 81       	ldd	r24, Y+2	; 0x02
 d6c:	9b 81       	ldd	r25, Y+3	; 0x03
 d6e:	93 83       	std	Z+3, r25	; 0x03
 d70:	82 83       	std	Z+2, r24	; 0x02
 d72:	21 15       	cp	r18, r1
 d74:	31 05       	cpc	r19, r1
 d76:	29 f4       	brne	.+10     	; 0xd82 <free+0x92>
 d78:	f0 93 30 01 	sts	0x0130, r31	; 0x800130 <__flp+0x1>
 d7c:	e0 93 2f 01 	sts	0x012F, r30	; 0x80012f <__flp>
 d80:	3d c0       	rjmp	.+122    	; 0xdfc <free+0x10c>
 d82:	e9 01       	movw	r28, r18
 d84:	fb 83       	std	Y+3, r31	; 0x03
 d86:	ea 83       	std	Y+2, r30	; 0x02
 d88:	49 91       	ld	r20, Y+
 d8a:	59 91       	ld	r21, Y+
 d8c:	c4 0f       	add	r28, r20
 d8e:	d5 1f       	adc	r29, r21
 d90:	ec 17       	cp	r30, r28
 d92:	fd 07       	cpc	r31, r29
 d94:	61 f4       	brne	.+24     	; 0xdae <free+0xbe>
 d96:	80 81       	ld	r24, Z
 d98:	91 81       	ldd	r25, Z+1	; 0x01
 d9a:	84 0f       	add	r24, r20
 d9c:	95 1f       	adc	r25, r21
 d9e:	02 96       	adiw	r24, 0x02	; 2
 da0:	e9 01       	movw	r28, r18
 da2:	99 83       	std	Y+1, r25	; 0x01
 da4:	88 83       	st	Y, r24
 da6:	82 81       	ldd	r24, Z+2	; 0x02
 da8:	93 81       	ldd	r25, Z+3	; 0x03
 daa:	9b 83       	std	Y+3, r25	; 0x03
 dac:	8a 83       	std	Y+2, r24	; 0x02
 dae:	e0 e0       	ldi	r30, 0x00	; 0
 db0:	f0 e0       	ldi	r31, 0x00	; 0
 db2:	12 96       	adiw	r26, 0x02	; 2
 db4:	8d 91       	ld	r24, X+
 db6:	9c 91       	ld	r25, X
 db8:	13 97       	sbiw	r26, 0x03	; 3
 dba:	00 97       	sbiw	r24, 0x00	; 0
 dbc:	19 f0       	breq	.+6      	; 0xdc4 <free+0xd4>
 dbe:	fd 01       	movw	r30, r26
 dc0:	dc 01       	movw	r26, r24
 dc2:	f7 cf       	rjmp	.-18     	; 0xdb2 <free+0xc2>
 dc4:	8d 91       	ld	r24, X+
 dc6:	9c 91       	ld	r25, X
 dc8:	11 97       	sbiw	r26, 0x01	; 1
 dca:	9d 01       	movw	r18, r26
 dcc:	2e 5f       	subi	r18, 0xFE	; 254
 dce:	3f 4f       	sbci	r19, 0xFF	; 255
 dd0:	82 0f       	add	r24, r18
 dd2:	93 1f       	adc	r25, r19
 dd4:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <__brkval>
 dd8:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <__brkval+0x1>
 ddc:	28 17       	cp	r18, r24
 dde:	39 07       	cpc	r19, r25
 de0:	69 f4       	brne	.+26     	; 0xdfc <free+0x10c>
 de2:	30 97       	sbiw	r30, 0x00	; 0
 de4:	29 f4       	brne	.+10     	; 0xdf0 <free+0x100>
 de6:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__flp+0x1>
 dea:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <__flp>
 dee:	02 c0       	rjmp	.+4      	; 0xdf4 <free+0x104>
 df0:	13 82       	std	Z+3, r1	; 0x03
 df2:	12 82       	std	Z+2, r1	; 0x02
 df4:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <__brkval+0x1>
 df8:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <__brkval>
 dfc:	df 91       	pop	r29
 dfe:	cf 91       	pop	r28
 e00:	08 95       	ret

00000e02 <do_rand>:
 e02:	8f 92       	push	r8
 e04:	9f 92       	push	r9
 e06:	af 92       	push	r10
 e08:	bf 92       	push	r11
 e0a:	cf 92       	push	r12
 e0c:	df 92       	push	r13
 e0e:	ef 92       	push	r14
 e10:	ff 92       	push	r15
 e12:	cf 93       	push	r28
 e14:	df 93       	push	r29
 e16:	ec 01       	movw	r28, r24
 e18:	68 81       	ld	r22, Y
 e1a:	79 81       	ldd	r23, Y+1	; 0x01
 e1c:	8a 81       	ldd	r24, Y+2	; 0x02
 e1e:	9b 81       	ldd	r25, Y+3	; 0x03
 e20:	61 15       	cp	r22, r1
 e22:	71 05       	cpc	r23, r1
 e24:	81 05       	cpc	r24, r1
 e26:	91 05       	cpc	r25, r1
 e28:	21 f4       	brne	.+8      	; 0xe32 <do_rand+0x30>
 e2a:	64 e2       	ldi	r22, 0x24	; 36
 e2c:	79 ed       	ldi	r23, 0xD9	; 217
 e2e:	8b e5       	ldi	r24, 0x5B	; 91
 e30:	97 e0       	ldi	r25, 0x07	; 7
 e32:	2d e1       	ldi	r18, 0x1D	; 29
 e34:	33 ef       	ldi	r19, 0xF3	; 243
 e36:	41 e0       	ldi	r20, 0x01	; 1
 e38:	50 e0       	ldi	r21, 0x00	; 0
 e3a:	38 d0       	rcall	.+112    	; 0xeac <__divmodsi4>
 e3c:	49 01       	movw	r8, r18
 e3e:	5a 01       	movw	r10, r20
 e40:	9b 01       	movw	r18, r22
 e42:	ac 01       	movw	r20, r24
 e44:	a7 ea       	ldi	r26, 0xA7	; 167
 e46:	b1 e4       	ldi	r27, 0x41	; 65
 e48:	4d d0       	rcall	.+154    	; 0xee4 <__muluhisi3>
 e4a:	6b 01       	movw	r12, r22
 e4c:	7c 01       	movw	r14, r24
 e4e:	ac ee       	ldi	r26, 0xEC	; 236
 e50:	b4 ef       	ldi	r27, 0xF4	; 244
 e52:	a5 01       	movw	r20, r10
 e54:	94 01       	movw	r18, r8
 e56:	52 d0       	rcall	.+164    	; 0xefc <__mulohisi3>
 e58:	dc 01       	movw	r26, r24
 e5a:	cb 01       	movw	r24, r22
 e5c:	8c 0d       	add	r24, r12
 e5e:	9d 1d       	adc	r25, r13
 e60:	ae 1d       	adc	r26, r14
 e62:	bf 1d       	adc	r27, r15
 e64:	b7 ff       	sbrs	r27, 7
 e66:	03 c0       	rjmp	.+6      	; 0xe6e <do_rand+0x6c>
 e68:	01 97       	sbiw	r24, 0x01	; 1
 e6a:	a1 09       	sbc	r26, r1
 e6c:	b0 48       	sbci	r27, 0x80	; 128
 e6e:	88 83       	st	Y, r24
 e70:	99 83       	std	Y+1, r25	; 0x01
 e72:	aa 83       	std	Y+2, r26	; 0x02
 e74:	bb 83       	std	Y+3, r27	; 0x03
 e76:	9f 77       	andi	r25, 0x7F	; 127
 e78:	df 91       	pop	r29
 e7a:	cf 91       	pop	r28
 e7c:	ff 90       	pop	r15
 e7e:	ef 90       	pop	r14
 e80:	df 90       	pop	r13
 e82:	cf 90       	pop	r12
 e84:	bf 90       	pop	r11
 e86:	af 90       	pop	r10
 e88:	9f 90       	pop	r9
 e8a:	8f 90       	pop	r8
 e8c:	08 95       	ret

00000e8e <rand_r>:
 e8e:	b9 cf       	rjmp	.-142    	; 0xe02 <do_rand>

00000e90 <rand>:
 e90:	86 e0       	ldi	r24, 0x06	; 6
 e92:	91 e0       	ldi	r25, 0x01	; 1
 e94:	b6 cf       	rjmp	.-148    	; 0xe02 <do_rand>

00000e96 <srand>:
 e96:	a0 e0       	ldi	r26, 0x00	; 0
 e98:	b0 e0       	ldi	r27, 0x00	; 0
 e9a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
 e9e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
 ea2:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
 ea6:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
 eaa:	08 95       	ret

00000eac <__divmodsi4>:
 eac:	05 2e       	mov	r0, r21
 eae:	97 fb       	bst	r25, 7
 eb0:	16 f4       	brtc	.+4      	; 0xeb6 <__divmodsi4+0xa>
 eb2:	00 94       	com	r0
 eb4:	0f d0       	rcall	.+30     	; 0xed4 <__negsi2>
 eb6:	57 fd       	sbrc	r21, 7
 eb8:	05 d0       	rcall	.+10     	; 0xec4 <__divmodsi4_neg2>
 eba:	24 d0       	rcall	.+72     	; 0xf04 <__udivmodsi4>
 ebc:	07 fc       	sbrc	r0, 7
 ebe:	02 d0       	rcall	.+4      	; 0xec4 <__divmodsi4_neg2>
 ec0:	46 f4       	brtc	.+16     	; 0xed2 <__divmodsi4_exit>
 ec2:	08 c0       	rjmp	.+16     	; 0xed4 <__negsi2>

00000ec4 <__divmodsi4_neg2>:
 ec4:	50 95       	com	r21
 ec6:	40 95       	com	r20
 ec8:	30 95       	com	r19
 eca:	21 95       	neg	r18
 ecc:	3f 4f       	sbci	r19, 0xFF	; 255
 ece:	4f 4f       	sbci	r20, 0xFF	; 255
 ed0:	5f 4f       	sbci	r21, 0xFF	; 255

00000ed2 <__divmodsi4_exit>:
 ed2:	08 95       	ret

00000ed4 <__negsi2>:
 ed4:	90 95       	com	r25
 ed6:	80 95       	com	r24
 ed8:	70 95       	com	r23
 eda:	61 95       	neg	r22
 edc:	7f 4f       	sbci	r23, 0xFF	; 255
 ede:	8f 4f       	sbci	r24, 0xFF	; 255
 ee0:	9f 4f       	sbci	r25, 0xFF	; 255
 ee2:	08 95       	ret

00000ee4 <__muluhisi3>:
 ee4:	31 d0       	rcall	.+98     	; 0xf48 <__umulhisi3>
 ee6:	a5 9f       	mul	r26, r21
 ee8:	90 0d       	add	r25, r0
 eea:	b4 9f       	mul	r27, r20
 eec:	90 0d       	add	r25, r0
 eee:	a4 9f       	mul	r26, r20
 ef0:	80 0d       	add	r24, r0
 ef2:	91 1d       	adc	r25, r1
 ef4:	11 24       	eor	r1, r1
 ef6:	08 95       	ret

00000ef8 <__mulshisi3>:
 ef8:	b7 ff       	sbrs	r27, 7
 efa:	f4 cf       	rjmp	.-24     	; 0xee4 <__muluhisi3>

00000efc <__mulohisi3>:
 efc:	f3 df       	rcall	.-26     	; 0xee4 <__muluhisi3>
 efe:	82 1b       	sub	r24, r18
 f00:	93 0b       	sbc	r25, r19
 f02:	08 95       	ret

00000f04 <__udivmodsi4>:
 f04:	a1 e2       	ldi	r26, 0x21	; 33
 f06:	1a 2e       	mov	r1, r26
 f08:	aa 1b       	sub	r26, r26
 f0a:	bb 1b       	sub	r27, r27
 f0c:	fd 01       	movw	r30, r26
 f0e:	0d c0       	rjmp	.+26     	; 0xf2a <__udivmodsi4_ep>

00000f10 <__udivmodsi4_loop>:
 f10:	aa 1f       	adc	r26, r26
 f12:	bb 1f       	adc	r27, r27
 f14:	ee 1f       	adc	r30, r30
 f16:	ff 1f       	adc	r31, r31
 f18:	a2 17       	cp	r26, r18
 f1a:	b3 07       	cpc	r27, r19
 f1c:	e4 07       	cpc	r30, r20
 f1e:	f5 07       	cpc	r31, r21
 f20:	20 f0       	brcs	.+8      	; 0xf2a <__udivmodsi4_ep>
 f22:	a2 1b       	sub	r26, r18
 f24:	b3 0b       	sbc	r27, r19
 f26:	e4 0b       	sbc	r30, r20
 f28:	f5 0b       	sbc	r31, r21

00000f2a <__udivmodsi4_ep>:
 f2a:	66 1f       	adc	r22, r22
 f2c:	77 1f       	adc	r23, r23
 f2e:	88 1f       	adc	r24, r24
 f30:	99 1f       	adc	r25, r25
 f32:	1a 94       	dec	r1
 f34:	69 f7       	brne	.-38     	; 0xf10 <__udivmodsi4_loop>
 f36:	60 95       	com	r22
 f38:	70 95       	com	r23
 f3a:	80 95       	com	r24
 f3c:	90 95       	com	r25
 f3e:	9b 01       	movw	r18, r22
 f40:	ac 01       	movw	r20, r24
 f42:	bd 01       	movw	r22, r26
 f44:	cf 01       	movw	r24, r30
 f46:	08 95       	ret

00000f48 <__umulhisi3>:
 f48:	a2 9f       	mul	r26, r18
 f4a:	b0 01       	movw	r22, r0
 f4c:	b3 9f       	mul	r27, r19
 f4e:	c0 01       	movw	r24, r0
 f50:	a3 9f       	mul	r26, r19
 f52:	70 0d       	add	r23, r0
 f54:	81 1d       	adc	r24, r1
 f56:	11 24       	eor	r1, r1
 f58:	91 1d       	adc	r25, r1
 f5a:	b2 9f       	mul	r27, r18
 f5c:	70 0d       	add	r23, r0
 f5e:	81 1d       	adc	r24, r1
 f60:	11 24       	eor	r1, r1
 f62:	91 1d       	adc	r25, r1
 f64:	08 95       	ret

00000f66 <_exit>:
 f66:	f8 94       	cli

00000f68 <__stop_program>:
 f68:	ff cf       	rjmp	.-2      	; 0xf68 <__stop_program>
