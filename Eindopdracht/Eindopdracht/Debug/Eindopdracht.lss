
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000d5c  00000df0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  0080010e  0080010e  00000dfe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dfe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001db1  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d79  00000000  00000000  00002df1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fae  00000000  00000000  00003b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000040c  00000000  00000000  00004b18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007fd  00000000  00000000  00004f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000db2  00000000  00000000  00005721  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  000064d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	04 c4       	rjmp	.+2056   	; 0x82e <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e5       	ldi	r30, 0x5C	; 92
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 33       	cpi	r26, 0x33	; 51
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1c d4       	rcall	.+2104   	; 0x8fc <main>
  c4:	49 c6       	rjmp	.+3218   	; 0xd58 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <time>:
  c8:	fc 01       	movw	r30, r24
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <__system_time>
  d2:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <__system_time+0x1>
  d6:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__system_time+0x2>
  da:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <__system_time+0x3>
  de:	0f be       	out	0x3f, r0	; 63
  e0:	30 97       	sbiw	r30, 0x00	; 0
  e2:	21 f0       	breq	.+8      	; 0xec <time+0x24>
  e4:	60 83       	st	Z, r22
  e6:	71 83       	std	Z+1, r23	; 0x01
  e8:	82 83       	std	Z+2, r24	; 0x02
  ea:	93 83       	std	Z+3, r25	; 0x03
  ec:	08 95       	ret

000000ee <checkDirection>:
{
	//DDRB=0x01; // Set PB0 pin as output for display select
	//spi_masterInit(); // Initialize spi module
	//displayDriverInit(); // Initialize display chip
	
	DDRA = 0x0F;
  ee:	8f e0       	ldi	r24, 0x0F	; 15
  f0:	8a bb       	out	0x1a, r24	; 26
	
	

	if (PINA & 0x81 && status != GOING_DOWN)
  f2:	89 b3       	in	r24, 0x19	; 25
  f4:	81 78       	andi	r24, 0x81	; 129
  f6:	51 f0       	breq	.+20     	; 0x10c <checkDirection+0x1e>
  f8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <status>
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	59 f1       	breq	.+86     	; 0x156 <checkDirection+0x68>
	{
		status = GOING_UP;
 100:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <status>
	}
	if (PINA & 0x82 && status != GOING_UP)
 104:	89 b3       	in	r24, 0x19	; 25
 106:	82 78       	andi	r24, 0x82	; 130
 108:	51 f5       	brne	.+84     	; 0x15e <checkDirection+0x70>
 10a:	0b c0       	rjmp	.+22     	; 0x122 <checkDirection+0x34>
 10c:	89 b3       	in	r24, 0x19	; 25
 10e:	82 78       	andi	r24, 0x82	; 130
 110:	41 f0       	breq	.+16     	; 0x122 <checkDirection+0x34>
 112:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <status>
 116:	88 23       	and	r24, r24
 118:	11 f1       	breq	.+68     	; 0x15e <checkDirection+0x70>
	{
		status = GOING_DOWN;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <status>
 120:	1e c0       	rjmp	.+60     	; 0x15e <checkDirection+0x70>
	}
	if (PINA & 0x84 && status != GOING_RIGHT)
 122:	89 b3       	in	r24, 0x19	; 25
 124:	84 78       	andi	r24, 0x84	; 132
 126:	49 f0       	breq	.+18     	; 0x13a <checkDirection+0x4c>
 128:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <status>
 12c:	83 30       	cpi	r24, 0x03	; 3
 12e:	d9 f0       	breq	.+54     	; 0x166 <checkDirection+0x78>
	{
		status = GOING_LEFT;
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <status>
	}
	if (PINA & 0x88 && status != GOING_LEFT)
 136:	89 b3       	in	r24, 0x19	; 25
 138:	0a c0       	rjmp	.+20     	; 0x14e <checkDirection+0x60>
 13a:	89 b3       	in	r24, 0x19	; 25
 13c:	88 78       	andi	r24, 0x88	; 136
 13e:	39 f0       	breq	.+14     	; 0x14e <checkDirection+0x60>
 140:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <status>
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	19 f0       	breq	.+6      	; 0x14e <checkDirection+0x60>
	{
		status = GOING_RIGHT;
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <status>
	}
	
	return status;
 14e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <status>
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	08 95       	ret

	if (PINA & 0x81 && status != GOING_DOWN)
	{
		status = GOING_UP;
	}
	if (PINA & 0x82 && status != GOING_UP)
 156:	89 b3       	in	r24, 0x19	; 25
 158:	82 78       	andi	r24, 0x82	; 130
 15a:	f9 f6       	brne	.-66     	; 0x11a <checkDirection+0x2c>
 15c:	08 c0       	rjmp	.+16     	; 0x16e <checkDirection+0x80>
	{
		status = GOING_DOWN;
	}
	if (PINA & 0x84 && status != GOING_RIGHT)
 15e:	89 b3       	in	r24, 0x19	; 25
 160:	84 78       	andi	r24, 0x84	; 132
 162:	31 f7       	brne	.-52     	; 0x130 <checkDirection+0x42>
 164:	ea cf       	rjmp	.-44     	; 0x13a <checkDirection+0x4c>
	{
		status = GOING_LEFT;
	}
	if (PINA & 0x88 && status != GOING_LEFT)
 166:	89 b3       	in	r24, 0x19	; 25
 168:	88 78       	andi	r24, 0x88	; 136
 16a:	71 f7       	brne	.-36     	; 0x148 <checkDirection+0x5a>
 16c:	f0 cf       	rjmp	.-32     	; 0x14e <checkDirection+0x60>
	}
	if (PINA & 0x82 && status != GOING_UP)
	{
		status = GOING_DOWN;
	}
	if (PINA & 0x84 && status != GOING_RIGHT)
 16e:	89 b3       	in	r24, 0x19	; 25
 170:	84 78       	andi	r24, 0x84	; 132
 172:	f1 f6       	brne	.-68     	; 0x130 <checkDirection+0x42>
 174:	e2 cf       	rjmp	.-60     	; 0x13a <checkDirection+0x4c>

00000176 <drawImage>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 176:	ef e1       	ldi	r30, 0x1F	; 31
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	10 82       	st	Z, r1
 17c:	86 e6       	ldi	r24, 0x66	; 102
 17e:	81 83       	std	Z+1, r24	; 0x01
 180:	82 83       	std	Z+2, r24	; 0x02
 182:	13 82       	std	Z+3, r1	; 0x03
 184:	9c e3       	ldi	r25, 0x3C	; 60
 186:	94 83       	std	Z+4, r25	; 0x04
 188:	85 83       	std	Z+5, r24	; 0x05
 18a:	83 ec       	ldi	r24, 0xC3	; 195
 18c:	86 83       	std	Z+6, r24	; 0x06
 18e:	17 82       	std	Z+7, r1	; 0x07
 190:	08 95       	ret

00000192 <displaySetPixel>:
 192:	e8 2f       	mov	r30, r24
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	e1 5e       	subi	r30, 0xE1	; 225
 198:	fe 4f       	sbci	r31, 0xFE	; 254
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <displaySetPixel+0x12>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <displaySetPixel+0xe>
 1a8:	90 81       	ld	r25, Z
 1aa:	89 2b       	or	r24, r25
 1ac:	80 83       	st	Z, r24
 1ae:	08 95       	ret

000001b0 <displayClrPixel>:
 1b0:	e8 2f       	mov	r30, r24
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	e1 5e       	subi	r30, 0xE1	; 225
 1b6:	fe 4f       	sbci	r31, 0xFE	; 254
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <displayClrPixel+0x12>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <displayClrPixel+0xe>
 1c6:	90 81       	ld	r25, Z
 1c8:	89 27       	eor	r24, r25
 1ca:	80 83       	st	Z, r24
 1cc:	08 95       	ret

000001ce <twi_init>:
 1ce:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 1d2:	80 e2       	ldi	r24, 0x20	; 32
 1d4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 1d8:	08 95       	ret

000001da <twi_start>:
 1da:	84 ea       	ldi	r24, 0xA4	; 164
 1dc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 1e0:	e4 e7       	ldi	r30, 0x74	; 116
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	88 23       	and	r24, r24
 1e8:	ec f7       	brge	.-6      	; 0x1e4 <twi_start+0xa>
 1ea:	08 95       	ret

000001ec <twi_tx>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
 1ec:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 1f0:	84 e8       	ldi	r24, 0x84	; 132
 1f2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
 1f6:	e4 e7       	ldi	r30, 0x74	; 116
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	88 23       	and	r24, r24
 1fe:	ec f7       	brge	.-6      	; 0x1fa <twi_tx+0xe>
}
 200:	08 95       	ret

00000202 <displayInitHT16K33>:
inputs:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
 202:	0f 93       	push	r16
 204:	1f 93       	push	r17
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	c8 2f       	mov	r28, r24
	// System setup page 30 ht16k33 datasheet
	twi_start();
 20c:	e6 df       	rcall	.-52     	; 0x1da <twi_start>
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
 20e:	8c 2f       	mov	r24, r28
 210:	ed df       	rcall	.-38     	; 0x1ec <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 212:	81 e2       	ldi	r24, 0x21	; 33
 214:	eb df       	rcall	.-42     	; 0x1ec <twi_tx>
 216:	04 e7       	ldi	r16, 0x74	; 116
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 218:	10 e0       	ldi	r17, 0x00	; 0
 21a:	d4 e9       	ldi	r29, 0x94	; 148
 21c:	f8 01       	movw	r30, r16
 21e:	d0 83       	st	Z, r29
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();
		
	// ROW/INT set. Page 31 ht16k33 datasheet
	twi_start();
 220:	dc df       	rcall	.-72     	; 0x1da <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 222:	8c 2f       	mov	r24, r28
 224:	e3 df       	rcall	.-58     	; 0x1ec <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output (default)
 226:	80 ea       	ldi	r24, 0xA0	; 160
 228:	e1 df       	rcall	.-62     	; 0x1ec <twi_tx>
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 22a:	f8 01       	movw	r30, r16
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output (default)
	twi_stop();

	// Dimming set
	twi_start();
 22c:	d0 83       	st	Z, r29
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 22e:	d5 df       	rcall	.-86     	; 0x1da <twi_start>
 230:	8c 2f       	mov	r24, r28
	twi_tx(0xE1);	// Display Dimming 2/16 duty cycle
 232:	dc df       	rcall	.-72     	; 0x1ec <twi_tx>
 234:	81 ee       	ldi	r24, 0xE1	; 225
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 236:	da df       	rcall	.-76     	; 0x1ec <twi_tx>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xE1);	// Display Dimming 2/16 duty cycle
	twi_stop();

	// Display set
	twi_start();
 238:	f8 01       	movw	r30, r16
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 23a:	d0 83       	st	Z, r29
 23c:	ce df       	rcall	.-100    	; 0x1da <twi_start>
	twi_tx(0x81);			// Display ON, Blinking OFF
 23e:	8c 2f       	mov	r24, r28
 240:	d5 df       	rcall	.-86     	; 0x1ec <twi_tx>
 242:	81 e8       	ldi	r24, 0x81	; 129
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 244:	d3 df       	rcall	.-90     	; 0x1ec <twi_tx>
 246:	f8 01       	movw	r30, r16
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0x81);			// Display ON, Blinking OFF
	twi_stop();
	
	// Beeld een patroon af op display (test)
	twi_start();
 248:	d0 83       	st	Z, r29
	twi_tx(i2c_address);
 24a:	c7 df       	rcall	.-114    	; 0x1da <twi_start>
 24c:	8c 2f       	mov	r24, r28
	twi_tx(0x00);
 24e:	ce df       	rcall	.-100    	; 0x1ec <twi_tx>
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	cc df       	rcall	.-104    	; 0x1ec <twi_tx>
 254:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t a = 0x55;
 256:	c5 e5       	ldi	r28, 0x55	; 85
	for( uint8_t idx = 0; idx < 8; idx++ ) {
		a ^= 0xFF;
 258:	c0 95       	com	r28
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
 25a:	8c 2f       	mov	r24, r28
 25c:	80 fb       	bst	r24, 0
 25e:	87 95       	ror	r24
 260:	87 f9       	bld	r24, 7
 262:	c4 df       	rcall	.-120    	; 0x1ec <twi_tx>
 264:	80 e0       	ldi	r24, 0x00	; 0
		twi_tx( 0x00);
 266:	c2 df       	rcall	.-124    	; 0x1ec <twi_tx>
 268:	d1 50       	subi	r29, 0x01	; 1
 26a:	b1 f7       	brne	.-20     	; 0x258 <displayInitHT16K33+0x56>
 26c:	84 e9       	ldi	r24, 0x94	; 148
	// Beeld een patroon af op display (test)
	twi_start();
	twi_tx(i2c_address);
	twi_tx(0x00);
	uint8_t a = 0x55;
	for( uint8_t idx = 0; idx < 8; idx++ ) {
 26e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
}
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	08 95       	ret

0000027c <displayInit>:
 27c:	a8 df       	rcall	.-176    	; 0x1ce <twi_init>
 27e:	84 ee       	ldi	r24, 0xE4	; 228
notes:			Init display
Version :    	DMK, Initial code
*******************************************************************/
{
	twi_init();							// Enable TWI interface
	displayInitHT16K33(D0_I2C_ADDR);	// Iit display
 280:	c0 df       	rcall	.-128    	; 0x202 <displayInitHT16K33>
	locList = NULL;
 282:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <locList+0x1>
 286:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <locList>
	
	srand((unsigned)time(&t));
 28a:	85 e1       	ldi	r24, 0x15	; 21
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	1c df       	rcall	.-456    	; 0xc8 <time>
 290:	cb 01       	movw	r24, r22
	rand(),rand(),rand();
 292:	fa d4       	rcall	.+2548   	; 0xc88 <srand>
 294:	f6 d4       	rcall	.+2540   	; 0xc82 <rand>
 296:	f5 d4       	rcall	.+2538   	; 0xc82 <rand>
 298:	f4 c4       	rjmp	.+2536   	; 0xc82 <rand>
 29a:	08 95       	ret

0000029c <update>:
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
inputs:
outputs:
notes:		Let op de 'vreemde' shift, foutje in printplaat?
Version:	DMK, Initial code
*******************************************************************/
{
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
	// Second display
	twi_start();
 2a4:	9a df       	rcall	.-204    	; 0x1da <twi_start>
	twi_tx(D0_I2C_ADDR);
 2a6:	84 ee       	ldi	r24, 0xE4	; 228
 2a8:	a1 df       	rcall	.-190    	; 0x1ec <twi_tx>
	twi_tx(0x00);
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	9f df       	rcall	.-194    	; 0x1ec <twi_tx>
 2ae:	c7 e2       	ldi	r28, 0x27	; 39
 2b0:	d1 e0       	ldi	r29, 0x01	; 1
 2b2:	0f e1       	ldi	r16, 0x1F	; 31
 2b4:	11 e0       	ldi	r17, 0x01	; 1
 2b6:	8a 91       	ld	r24, -Y
	for( uint8_t idx = 0; idx < 8; idx++ ) {
		uint8_t a = buf[7 + 0 * 8 - idx];
 2b8:	80 fb       	bst	r24, 0
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
 2ba:	87 95       	ror	r24
 2bc:	87 f9       	bld	r24, 7
 2be:	96 df       	rcall	.-212    	; 0x1ec <twi_tx>
		twi_tx( 0x00);
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	94 df       	rcall	.-216    	; 0x1ec <twi_tx>
 2c4:	c0 17       	cp	r28, r16
{
	// Second display
	twi_start();
	twi_tx(D0_I2C_ADDR);
	twi_tx(0x00);
	for( uint8_t idx = 0; idx < 8; idx++ ) {
 2c6:	d1 07       	cpc	r29, r17
 2c8:	b1 f7       	brne	.-20     	; 0x2b6 <update+0x1a>
 2ca:	84 e9       	ldi	r24, 0x94	; 148
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 2cc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2d0:	df 91       	pop	r29
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
}
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	08 95       	ret

000002da <setStartLocation>:
 2da:	cf 93       	push	r28
	
	//buf[x] = binary[y];
}


void setStartLocation(int x,int y){
 2dc:	df 93       	push	r29
 2de:	c8 2f       	mov	r28, r24
 2e0:	d6 2f       	mov	r29, r22
	currenLocation.x = x;
 2e2:	e7 e2       	ldi	r30, 0x27	; 39
 2e4:	f1 e0       	ldi	r31, 0x01	; 1
 2e6:	80 83       	st	Z, r24
 2e8:	91 83       	std	Z+1, r25	; 0x01
	currenLocation.y = y;
 2ea:	62 83       	std	Z+2, r22	; 0x02
 2ec:	73 83       	std	Z+3, r23	; 0x03
	
	locList = (locatieList *)malloc(sizeof(locatieList));
 2ee:	88 e0       	ldi	r24, 0x08	; 8
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	5f d3       	rcall	.+1726   	; 0x9b2 <malloc>
 2f4:	fc 01       	movw	r30, r24
 2f6:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <locList+0x1>
 2fa:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <locList>
	locList->loc = currenLocation;
 2fe:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <currenLocation>
 302:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <currenLocation+0x1>
 306:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <currenLocation+0x2>
 30a:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <currenLocation+0x3>
 30e:	80 83       	st	Z, r24
 310:	91 83       	std	Z+1, r25	; 0x01
 312:	a2 83       	std	Z+2, r26	; 0x02
 314:	b3 83       	std	Z+3, r27	; 0x03
	locList->number = counter;
 316:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
 31a:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__data_end+0x1>
 31e:	35 83       	std	Z+5, r19	; 0x05
 320:	24 83       	std	Z+4, r18	; 0x04
	locList->next = NULL;
 322:	17 82       	std	Z+7, r1	; 0x07
 324:	16 82       	std	Z+6, r1	; 0x06
	counter++;
 326:	2f 5f       	subi	r18, 0xFF	; 255
 328:	3f 4f       	sbci	r19, 0xFF	; 255
 32a:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <__data_end+0x1>
 32e:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <__data_end>
	//(x,y);
	displaySetPixel(x,y);
 332:	6d 2f       	mov	r22, r29
 334:	8c 2f       	mov	r24, r28
	update();
 336:	2d df       	rcall	.-422    	; 0x192 <displaySetPixel>
 338:	b1 df       	rcall	.-158    	; 0x29c <update>
}
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <getSize>:
	TWCR = (0x80 | 0x04);
	while( 0 == (TWCR & 0x80) );
}

int getSize(){
	locatieList *p = locList;
 340:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <locList>
 344:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <locList+0x1>
	int size = 0;
	while (p != NULL){
 348:	30 97       	sbiw	r30, 0x00	; 0
 34a:	49 f0       	breq	.+18     	; 0x35e <getSize+0x1e>
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
		size++;
 350:	01 96       	adiw	r24, 0x01	; 1
		p = p->next;
 352:	06 80       	ldd	r0, Z+6	; 0x06
 354:	f7 81       	ldd	r31, Z+7	; 0x07
 356:	e0 2d       	mov	r30, r0
}

int getSize(){
	locatieList *p = locList;
	int size = 0;
	while (p != NULL){
 358:	30 97       	sbiw	r30, 0x00	; 0
 35a:	d1 f7       	brne	.-12     	; 0x350 <getSize+0x10>
 35c:	08 95       	ret
	while( 0 == (TWCR & 0x80) );
}

int getSize(){
	locatieList *p = locList;
	int size = 0;
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
	while (p != NULL){
		size++;
		p = p->next;
	}
	return size;
}
 362:	08 95       	ret

00000364 <increaceSize>:

void increaceSize(){
	maxSize++;
 364:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <maxSize>
 368:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <maxSize+0x1>
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <maxSize+0x1>
 372:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <maxSize>
 376:	08 95       	ret

00000378 <addCandy>:
	//calculateNewScoreAppleCollected();
}

void addCandy(){
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
	
	//int random = (rand() % 8);

	
	rand(),rand(),rand(),rand(),rand(),rand();
 37c:	82 d4       	rcall	.+2308   	; 0xc82 <rand>
 37e:	81 d4       	rcall	.+2306   	; 0xc82 <rand>
 380:	80 d4       	rcall	.+2304   	; 0xc82 <rand>
 382:	7f d4       	rcall	.+2302   	; 0xc82 <rand>
 384:	7e d4       	rcall	.+2300   	; 0xc82 <rand>
 386:	7d d4       	rcall	.+2298   	; 0xc82 <rand>
	
	int x = (rand() % 8);
 388:	7c d4       	rcall	.+2296   	; 0xc82 <rand>
 38a:	87 70       	andi	r24, 0x07	; 7
 38c:	90 78       	andi	r25, 0x80	; 128
 38e:	99 23       	and	r25, r25
 390:	24 f4       	brge	.+8      	; 0x39a <addCandy+0x22>
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	88 6f       	ori	r24, 0xF8	; 248
 396:	9f 6f       	ori	r25, 0xFF	; 255
 398:	01 96       	adiw	r24, 0x01	; 1
 39a:	ec 01       	movw	r28, r24
	int y = (rand() % 8);
 39c:	72 d4       	rcall	.+2276   	; 0xc82 <rand>
 39e:	87 70       	andi	r24, 0x07	; 7
 3a0:	90 78       	andi	r25, 0x80	; 128
 3a2:	99 23       	and	r25, r25
 3a4:	24 f4       	brge	.+8      	; 0x3ae <addCandy+0x36>
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	88 6f       	ori	r24, 0xF8	; 248
 3aa:	9f 6f       	ori	r25, 0xFF	; 255
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	bc 01       	movw	r22, r24
 3b0:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <locList>
	locatieList *p = locList;
 3b4:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <locList+0x1>
 3b8:	30 97       	sbiw	r30, 0x00	; 0
	while(p != NULL){
 3ba:	59 f1       	breq	.+86     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3bc:	20 81       	ld	r18, Z
		if(p->loc.x == x && p->loc.y == y){
 3be:	31 81       	ldd	r19, Z+1	; 0x01
 3c0:	2c 17       	cp	r18, r28
 3c2:	3d 07       	cpc	r19, r29
 3c4:	09 f5       	brne	.+66     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3c6:	82 81       	ldd	r24, Z+2	; 0x02
 3c8:	93 81       	ldd	r25, Z+3	; 0x03
 3ca:	86 17       	cp	r24, r22
 3cc:	97 07       	cpc	r25, r23
			rand(),rand();
 3ce:	d9 f4       	brne	.+54     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3d0:	58 d4       	rcall	.+2224   	; 0xc82 <rand>
 3d2:	57 d4       	rcall	.+2222   	; 0xc82 <rand>
 3d4:	56 d4       	rcall	.+2220   	; 0xc82 <rand>
			x = (rand() % 8);
 3d6:	87 70       	andi	r24, 0x07	; 7
 3d8:	90 78       	andi	r25, 0x80	; 128
 3da:	99 23       	and	r25, r25
 3dc:	24 f4       	brge	.+8      	; 0x3e6 <addCandy+0x6e>
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	88 6f       	ori	r24, 0xF8	; 248
 3e2:	9f 6f       	ori	r25, 0xFF	; 255
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	ec 01       	movw	r28, r24
 3e8:	4c d4       	rcall	.+2200   	; 0xc82 <rand>
			y = (rand() % 8);
 3ea:	87 70       	andi	r24, 0x07	; 7
 3ec:	90 78       	andi	r25, 0x80	; 128
 3ee:	99 23       	and	r25, r25
 3f0:	24 f4       	brge	.+8      	; 0x3fa <addCandy+0x82>
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	88 6f       	ori	r24, 0xF8	; 248
 3f6:	9f 6f       	ori	r25, 0xFF	; 255
 3f8:	01 96       	adiw	r24, 0x01	; 1
 3fa:	bc 01       	movw	r22, r24
 3fc:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <locList>
			p = locList;
 400:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <locList+0x1>
 404:	01 c0       	rjmp	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	e9 01       	movw	r28, r18
 408:	06 80       	ldd	r0, Z+6	; 0x06
 40a:	f7 81       	ldd	r31, Z+7	; 0x07
		}
		p = p->next;
 40c:	e0 2d       	mov	r30, r0
	rand(),rand(),rand(),rand(),rand(),rand();
	
	int x = (rand() % 8);
	int y = (rand() % 8);
	locatieList *p = locList;
	while(p != NULL){
 40e:	30 97       	sbiw	r30, 0x00	; 0
 410:	a9 f6       	brne	.-86     	; 0x3bc <addCandy+0x44>
			y = (rand() % 8);
			p = locList;
		}
		p = p->next;
	}
	candy.x = x;
 412:	e9 e1       	ldi	r30, 0x19	; 25
 414:	f1 e0       	ldi	r31, 0x01	; 1
 416:	d1 83       	std	Z+1, r29	; 0x01
 418:	c0 83       	st	Z, r28
	candy.y = y;
 41a:	73 83       	std	Z+3, r23	; 0x03
 41c:	62 83       	std	Z+2, r22	; 0x02
	displaySetPixel(x,y);
 41e:	8c 2f       	mov	r24, r28
 420:	b8 de       	rcall	.-656    	; 0x192 <displaySetPixel>
 422:	3c df       	rcall	.-392    	; 0x29c <update>
	update();
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
}
 428:	08 95       	ret

0000042a <checkColission>:
 42a:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <locList>
int checkColission(int x, int y){
	locatieList *p = locList;
 42e:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <locList+0x1>
	while(p != NULL){
 432:	30 97       	sbiw	r30, 0x00	; 0
 434:	91 f0       	breq	.+36     	; 0x45a <checkColission+0x30>
		if(p->loc.x == x && p->loc.y == y){
 436:	20 81       	ld	r18, Z
 438:	31 81       	ldd	r19, Z+1	; 0x01
 43a:	28 17       	cp	r18, r24
 43c:	39 07       	cpc	r19, r25
 43e:	29 f4       	brne	.+10     	; 0x44a <checkColission+0x20>
 440:	22 81       	ldd	r18, Z+2	; 0x02
 442:	33 81       	ldd	r19, Z+3	; 0x03
 444:	26 17       	cp	r18, r22
 446:	37 07       	cpc	r19, r23
 448:	59 f0       	breq	.+22     	; 0x460 <checkColission+0x36>
			return 1;
		}
		p = p->next;
 44a:	06 80       	ldd	r0, Z+6	; 0x06
 44c:	f7 81       	ldd	r31, Z+7	; 0x07
 44e:	e0 2d       	mov	r30, r0
	displaySetPixel(x,y);
	update();
}
int checkColission(int x, int y){
	locatieList *p = locList;
	while(p != NULL){
 450:	30 97       	sbiw	r30, 0x00	; 0
 452:	89 f7       	brne	.-30     	; 0x436 <checkColission+0xc>
		if(p->loc.x == x && p->loc.y == y){
			return 1;
		}
		p = p->next;
	}
	return 0;
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	08 95       	ret
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	08 95       	ret
}
int checkColission(int x, int y){
	locatieList *p = locList;
	while(p != NULL){
		if(p->loc.x == x && p->loc.y == y){
			return 1;
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
		}
		p = p->next;
	}
	return 0;
}
 464:	08 95       	ret

00000466 <addLocation>:


void addLocation(int x, int y){
 466:	6f 92       	push	r6
 468:	7f 92       	push	r7
 46a:	8f 92       	push	r8
 46c:	9f 92       	push	r9
 46e:	af 92       	push	r10
 470:	bf 92       	push	r11
 472:	cf 92       	push	r12
 474:	df 92       	push	r13
 476:	ef 92       	push	r14
 478:	ff 92       	push	r15
 47a:	0f 93       	push	r16
 47c:	1f 93       	push	r17
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	6c 01       	movw	r12, r24
 484:	5b 01       	movw	r10, r22
	if(x == candy.x && y == candy.y){
 486:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <candy>
 48a:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <candy+0x1>
 48e:	8c 15       	cp	r24, r12
 490:	9d 05       	cpc	r25, r13
 492:	51 f4       	brne	.+20     	; 0x4a8 <addLocation+0x42>
 494:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <candy+0x2>
 498:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <candy+0x3>
 49c:	86 17       	cp	r24, r22
 49e:	97 07       	cpc	r25, r23
 4a0:	19 f4       	brne	.+6      	; 0x4a8 <addLocation+0x42>
		increaceSize();
 4a2:	60 df       	rcall	.-320    	; 0x364 <increaceSize>
		addCandy();
 4a4:	69 df       	rcall	.-302    	; 0x378 <addCandy>
		calculateNewScoreAppleCollected();
 4a6:	ad d1       	rcall	.+858    	; 0x802 <calculateNewScoreAppleCollected>
	}
	if(!checkColission(x,y)){
 4a8:	b5 01       	movw	r22, r10
 4aa:	c6 01       	movw	r24, r12
 4ac:	be df       	rcall	.-132    	; 0x42a <checkColission>
 4ae:	89 2b       	or	r24, r25
 4b0:	09 f0       	breq	.+2      	; 0x4b4 <addLocation+0x4e>
	locatie loc;
	loc.x = x;
	loc.y = y;
	calculateNewScoreMovement();
 4b2:	92 c0       	rjmp	.+292    	; 0x5d8 <addLocation+0x172>
 4b4:	b1 d1       	rcall	.+866    	; 0x818 <calculateNewScoreMovement>
	// add sound
	int size = getSize();
 4b6:	44 df       	rcall	.-376    	; 0x340 <getSize>
 4b8:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <maxSize>
	if(size < maxSize){
 4bc:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <maxSize+0x1>
 4c0:	82 17       	cp	r24, r18
 4c2:	93 07       	cpc	r25, r19
 4c4:	5c f5       	brge	.+86     	; 0x51c <addLocation+0xb6>
		displaySetPixel(x,y);
 4c6:	6a 2d       	mov	r22, r10
 4c8:	8c 2d       	mov	r24, r12
 4ca:	63 de       	rcall	.-826    	; 0x192 <displaySetPixel>
 4cc:	c0 91 1d 01 	lds	r28, 0x011D	; 0x80011d <locList>
		locatieList *p = locList;
 4d0:	d0 91 1e 01 	lds	r29, 0x011E	; 0x80011e <locList+0x1>
 4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <addLocation+0x72>
		while(p->next != NULL){
 4d6:	ec 01       	movw	r28, r24
 4d8:	8e 81       	ldd	r24, Y+6	; 0x06
 4da:	9f 81       	ldd	r25, Y+7	; 0x07
 4dc:	00 97       	sbiw	r24, 0x00	; 0
 4de:	d9 f7       	brne	.-10     	; 0x4d6 <addLocation+0x70>
			p = p->next;
		}
		
		locatieList *newLoc = (locatieList *)malloc(sizeof(locatieList));
 4e0:	88 e0       	ldi	r24, 0x08	; 8
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	66 d2       	rcall	.+1228   	; 0x9b2 <malloc>
 4e6:	fc 01       	movw	r30, r24
 4e8:	d1 82       	std	Z+1, r13	; 0x01
		newLoc->loc = loc;
 4ea:	c0 82       	st	Z, r12
 4ec:	b3 82       	std	Z+3, r11	; 0x03
 4ee:	a2 82       	std	Z+2, r10	; 0x02
 4f0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
		newLoc->number = counter;
 4f4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 4f8:	95 83       	std	Z+5, r25	; 0x05
 4fa:	84 83       	std	Z+4, r24	; 0x04
 4fc:	17 82       	std	Z+7, r1	; 0x07
		//writeLedDisplay(counter);
		newLoc->next = NULL;
 4fe:	16 82       	std	Z+6, r1	; 0x06
 500:	ff 83       	std	Y+7, r31	; 0x07
		p->next = newLoc;
 502:	ee 83       	std	Y+6, r30	; 0x06
 504:	01 96       	adiw	r24, 0x01	; 1
		
		counter++;
 506:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
 50a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 50e:	e7 e2       	ldi	r30, 0x27	; 39
		currenLocation.x = x;
 510:	f1 e0       	ldi	r31, 0x01	; 1
 512:	d1 82       	std	Z+1, r13	; 0x01
 514:	c0 82       	st	Z, r12
		currenLocation.y = y;
 516:	b3 82       	std	Z+3, r11	; 0x03
 518:	a2 82       	std	Z+2, r10	; 0x02
 51a:	6b c0       	rjmp	.+214    	; 0x5f2 <addLocation+0x18c>
	}else{
		//writeLedDisplay(2);
		displaySetPixel(x,y);
 51c:	6a 2d       	mov	r22, r10
 51e:	8c 2d       	mov	r24, r12
 520:	38 de       	rcall	.-912    	; 0x192 <displaySetPixel>
 522:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <locList>
		locatieList *p = locList;
 526:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <locList+0x1>
 52a:	f7 01       	movw	r30, r14
		int min = p->number;
 52c:	44 81       	ldd	r20, Z+4	; 0x04
 52e:	55 81       	ldd	r21, Z+5	; 0x05
 530:	e1 14       	cp	r14, r1
		int c = 0;
		int position = 0;
		while(p != NULL){
 532:	f1 04       	cpc	r15, r1
 534:	49 f4       	brne	.+18     	; 0x548 <addLocation+0xe2>
 536:	5d c0       	rjmp	.+186    	; 0x5f2 <addLocation+0x18c>
 538:	2c 81       	ldd	r18, Y+4	; 0x04
			if(p->number < min){
 53a:	3d 81       	ldd	r19, Y+5	; 0x05
 53c:	24 17       	cp	r18, r20
 53e:	35 07       	cpc	r19, r21
 540:	44 f4       	brge	.+16     	; 0x552 <addLocation+0xec>
 542:	4c 01       	movw	r8, r24
				min = p->number;
				position = c;
			}
			c++;
 544:	a9 01       	movw	r20, r18
		locatieList *p = locList;
		int min = p->number;
		int c = 0;
		int position = 0;
		while(p != NULL){
			if(p->number < min){
 546:	05 c0       	rjmp	.+10     	; 0x552 <addLocation+0xec>
 548:	e7 01       	movw	r28, r14
		displaySetPixel(x,y);
		locatieList *p = locList;
		int min = p->number;
		int c = 0;
		int position = 0;
		while(p != NULL){
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	81 2c       	mov	r8, r1
 550:	91 2c       	mov	r9, r1
 552:	01 96       	adiw	r24, 0x01	; 1
			if(p->number < min){
				min = p->number;
				position = c;
			}
			c++;
 554:	0e 80       	ldd	r0, Y+6	; 0x06
			p = p->next;
 556:	df 81       	ldd	r29, Y+7	; 0x07
 558:	c0 2d       	mov	r28, r0
 55a:	20 97       	sbiw	r28, 0x00	; 0
		displaySetPixel(x,y);
		locatieList *p = locList;
		int min = p->number;
		int c = 0;
		int position = 0;
		while(p != NULL){
 55c:	69 f7       	brne	.-38     	; 0x538 <addLocation+0xd2>
 55e:	3e c0       	rjmp	.+124    	; 0x5dc <addLocation+0x176>
 560:	88 16       	cp	r8, r24
		p = locList;
		c = 0;
		locatieList *newLoc = (locatieList *)malloc(sizeof(locatieList));
		locatieList *pervLoc = NULL; 
		while(p != NULL){
			if(c == position){
 562:	99 06       	cpc	r9, r25
 564:	81 f5       	brne	.+96     	; 0x5c6 <addLocation+0x160>
 566:	02 c0       	rjmp	.+4      	; 0x56c <addLocation+0x106>
			p = p->next;
		}
		
		
		//writeLedDisplay(position);
		p = locList;
 568:	87 01       	movw	r16, r14
		c = 0;
		locatieList *newLoc = (locatieList *)malloc(sizeof(locatieList));
		locatieList *pervLoc = NULL; 
 56a:	7e 01       	movw	r14, r28
		while(p != NULL){
			if(c == position){
				displayClrPixel(p->loc.x,p->loc.y);
 56c:	f8 01       	movw	r30, r16
 56e:	62 81       	ldd	r22, Z+2	; 0x02
 570:	80 81       	ld	r24, Z
 572:	1e de       	rcall	.-964    	; 0x1b0 <displayClrPixel>
 574:	f3 01       	movw	r30, r6
			//	writeLedDisplay(p->number);
				newLoc->loc = loc;
 576:	d1 82       	std	Z+1, r13	; 0x01
 578:	c0 82       	st	Z, r12
 57a:	b3 82       	std	Z+3, r11	; 0x03
 57c:	a2 82       	std	Z+2, r10	; 0x02
 57e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
				newLoc->number = counter;
 582:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 586:	95 83       	std	Z+5, r25	; 0x05
 588:	84 83       	std	Z+4, r24	; 0x04
 58a:	f8 01       	movw	r30, r16
				newLoc->next = p->next;
 58c:	26 81       	ldd	r18, Z+6	; 0x06
 58e:	37 81       	ldd	r19, Z+7	; 0x07
 590:	f3 01       	movw	r30, r6
 592:	37 83       	std	Z+7, r19	; 0x07
 594:	26 83       	std	Z+6, r18	; 0x06
				counter++;
 596:	01 96       	adiw	r24, 0x01	; 1
 598:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
 59c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
				free(p);
 5a0:	c8 01       	movw	r24, r16
 5a2:	9f d2       	rcall	.+1342   	; 0xae2 <free>
 5a4:	89 28       	or	r8, r9
				if(position == 0){
 5a6:	29 f4       	brne	.+10     	; 0x5b2 <addLocation+0x14c>
 5a8:	70 92 1e 01 	sts	0x011E, r7	; 0x80011e <locList+0x1>
					locList = newLoc;	
 5ac:	60 92 1d 01 	sts	0x011D, r6	; 0x80011d <locList>
 5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <addLocation+0x152>
 5b2:	f7 01       	movw	r30, r14
				}else{
					pervLoc->next = newLoc;
 5b4:	77 82       	std	Z+7, r7	; 0x07
 5b6:	66 82       	std	Z+6, r6	; 0x06
 5b8:	e7 e2       	ldi	r30, 0x27	; 39
				}
				currenLocation.x = x;
 5ba:	f1 e0       	ldi	r31, 0x01	; 1
 5bc:	d1 82       	std	Z+1, r13	; 0x01
 5be:	c0 82       	st	Z, r12
 5c0:	b3 82       	std	Z+3, r11	; 0x03
				currenLocation.y = y;
 5c2:	a2 82       	std	Z+2, r10	; 0x02
				break;
 5c4:	16 c0       	rjmp	.+44     	; 0x5f2 <addLocation+0x18c>
			}
			pervLoc = p;
			p = p->next;
 5c6:	78 01       	movw	r14, r16
 5c8:	f7 01       	movw	r30, r14
 5ca:	06 81       	ldd	r16, Z+6	; 0x06
			c++;
 5cc:	17 81       	ldd	r17, Z+7	; 0x07
		//writeLedDisplay(position);
		p = locList;
		c = 0;
		locatieList *newLoc = (locatieList *)malloc(sizeof(locatieList));
		locatieList *pervLoc = NULL; 
		while(p != NULL){
 5ce:	01 96       	adiw	r24, 0x01	; 1
 5d0:	01 15       	cp	r16, r1
 5d2:	11 05       	cpc	r17, r1
 5d4:	29 f6       	brne	.-118    	; 0x560 <addLocation+0xfa>
			p = p->next;
			c++;
		}
		}
	}else{
		drawImage();
 5d6:	0d c0       	rjmp	.+26     	; 0x5f2 <addLocation+0x18c>
 5d8:	ce dd       	rcall	.-1124   	; 0x176 <drawImage>
	}
}
 5da:	0b c0       	rjmp	.+22     	; 0x5f2 <addLocation+0x18c>
		
		
		//writeLedDisplay(position);
		p = locList;
		c = 0;
		locatieList *newLoc = (locatieList *)malloc(sizeof(locatieList));
 5dc:	88 e0       	ldi	r24, 0x08	; 8
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	e8 d1       	rcall	.+976    	; 0x9b2 <malloc>
 5e2:	3c 01       	movw	r6, r24
 5e4:	81 14       	cp	r8, r1
		locatieList *pervLoc = NULL; 
		while(p != NULL){
			if(c == position){
 5e6:	91 04       	cpc	r9, r1
 5e8:	09 f4       	brne	.+2      	; 0x5ec <addLocation+0x186>
 5ea:	be cf       	rjmp	.-132    	; 0x568 <addLocation+0x102>
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	eb cf       	rjmp	.-42     	; 0x5c8 <addLocation+0x162>
 5f2:	df 91       	pop	r29
		}
		}
	}else{
		drawImage();
	}
}
 5f4:	cf 91       	pop	r28
 5f6:	1f 91       	pop	r17
 5f8:	0f 91       	pop	r16
 5fa:	ff 90       	pop	r15
 5fc:	ef 90       	pop	r14
 5fe:	df 90       	pop	r13
 600:	cf 90       	pop	r12
 602:	bf 90       	pop	r11
 604:	af 90       	pop	r10
 606:	9f 90       	pop	r9
 608:	8f 90       	pop	r8
 60a:	7f 90       	pop	r7
 60c:	6f 90       	pop	r6
 60e:	08 95       	ret

00000610 <moveUp>:
 610:	e7 e2       	ldi	r30, 0x27	; 39
	


void moveUp(){
	
	int x = currenLocation.x;
 612:	f1 e0       	ldi	r31, 0x01	; 1
 614:	80 81       	ld	r24, Z
 616:	91 81       	ldd	r25, Z+1	; 0x01
	int y = currenLocation.y;
 618:	62 81       	ldd	r22, Z+2	; 0x02
 61a:	73 81       	ldd	r23, Z+3	; 0x03
	
	x--;
 61c:	01 97       	sbiw	r24, 0x01	; 1
 61e:	10 f4       	brcc	.+4      	; 0x624 <moveUp+0x14>
	if(x == -1){
		x = 7;
 620:	87 e0       	ldi	r24, 0x07	; 7
 622:	90 e0       	ldi	r25, 0x00	; 0
	}
	addLocation(x,y);
 624:	20 df       	rcall	.-448    	; 0x466 <addLocation>
	update();
 626:	3a ce       	rjmp	.-908    	; 0x29c <update>
 628:	08 95       	ret

0000062a <moveDown>:
 62a:	e7 e2       	ldi	r30, 0x27	; 39
	
}
void moveDown(){
	int x = currenLocation.x;
 62c:	f1 e0       	ldi	r31, 0x01	; 1
 62e:	80 81       	ld	r24, Z
 630:	91 81       	ldd	r25, Z+1	; 0x01
	int y = currenLocation.y;
 632:	62 81       	ldd	r22, Z+2	; 0x02
 634:	73 81       	ldd	r23, Z+3	; 0x03
	
	x++;
 636:	01 96       	adiw	r24, 0x01	; 1
	if(x == 8){
 638:	88 30       	cpi	r24, 0x08	; 8
 63a:	91 05       	cpc	r25, r1
 63c:	11 f4       	brne	.+4      	; 0x642 <moveDown+0x18>
		x = 0;
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	90 e0       	ldi	r25, 0x00	; 0
	}
	addLocation(x,y);
 642:	11 df       	rcall	.-478    	; 0x466 <addLocation>
	update();
 644:	2b ce       	rjmp	.-938    	; 0x29c <update>
 646:	08 95       	ret

00000648 <moveLeft>:
 648:	e7 e2       	ldi	r30, 0x27	; 39
}

void moveLeft(){
	int x = currenLocation.x;
 64a:	f1 e0       	ldi	r31, 0x01	; 1
 64c:	80 81       	ld	r24, Z
 64e:	91 81       	ldd	r25, Z+1	; 0x01
	int y = currenLocation.y;
 650:	62 81       	ldd	r22, Z+2	; 0x02
 652:	73 81       	ldd	r23, Z+3	; 0x03

	y++;
 654:	6f 5f       	subi	r22, 0xFF	; 255
 656:	7f 4f       	sbci	r23, 0xFF	; 255
	if(y == 8){
 658:	68 30       	cpi	r22, 0x08	; 8
 65a:	71 05       	cpc	r23, r1
 65c:	11 f4       	brne	.+4      	; 0x662 <moveLeft+0x1a>
		y = 0;
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	70 e0       	ldi	r23, 0x00	; 0
	}
	addLocation(x,y);
 662:	01 df       	rcall	.-510    	; 0x466 <addLocation>
	update();
 664:	1b ce       	rjmp	.-970    	; 0x29c <update>
 666:	08 95       	ret

00000668 <moveRight>:
 668:	e7 e2       	ldi	r30, 0x27	; 39
}

void moveRight(){
	int x = currenLocation.x;
 66a:	f1 e0       	ldi	r31, 0x01	; 1
 66c:	80 81       	ld	r24, Z
 66e:	91 81       	ldd	r25, Z+1	; 0x01
	int y = currenLocation.y;
 670:	62 81       	ldd	r22, Z+2	; 0x02
 672:	73 81       	ldd	r23, Z+3	; 0x03
	
	y--;
 674:	61 50       	subi	r22, 0x01	; 1
 676:	71 09       	sbc	r23, r1
 678:	10 f4       	brcc	.+4      	; 0x67e <moveRight+0x16>
	if(y == -1){
		y = 7;
 67a:	67 e0       	ldi	r22, 0x07	; 7
 67c:	70 e0       	ldi	r23, 0x00	; 0
	}
	addLocation(x,y);
 67e:	f3 de       	rcall	.-538    	; 0x466 <addLocation>
	update();
 680:	0d ce       	rjmp	.-998    	; 0x29c <update>
 682:	08 95       	ret

00000684 <spi_masterInit>:
 684:	8f ef       	ldi	r24, 0xFF	; 255
void displayOff(void)
{
	spi_slaveSelect(0);		// Select display chip
	spi_write(0x0C);		// Register 0B: Shutdown register
	spi_write(0x00);		// -> 1 = Normal operation
	spi_slaveDeSelect(0);	// Deselect display chip
 686:	87 bb       	out	0x17, r24	; 23
 688:	bb 98       	cbi	0x17, 3	; 23
 68a:	c0 9a       	sbi	0x18, 0	; 24
 68c:	82 e5       	ldi	r24, 0x52	; 82
 68e:	8d b9       	out	0x0d, r24	; 13
 690:	08 95       	ret

00000692 <spi_write>:
 692:	8f b9       	out	0x0f, r24	; 15
 694:	77 9b       	sbis	0x0e, 7	; 14
 696:	fe cf       	rjmp	.-4      	; 0x694 <spi_write+0x2>
 698:	08 95       	ret

0000069a <spi_slaveSelect>:
 69a:	98 b3       	in	r25, 0x18	; 24
 69c:	21 e0       	ldi	r18, 0x01	; 1
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <spi_slaveSelect+0xc>
 6a2:	22 0f       	add	r18, r18
 6a4:	33 1f       	adc	r19, r19
 6a6:	8a 95       	dec	r24
 6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <spi_slaveSelect+0x8>
 6aa:	20 95       	com	r18
 6ac:	29 23       	and	r18, r25
 6ae:	28 bb       	out	0x18, r18	; 24
 6b0:	08 95       	ret

000006b2 <spi_slaveDeSelect>:
 6b2:	98 b3       	in	r25, 0x18	; 24
 6b4:	21 e0       	ldi	r18, 0x01	; 1
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <spi_slaveDeSelect+0xc>
 6ba:	22 0f       	add	r18, r18
 6bc:	33 1f       	adc	r19, r19
 6be:	8a 95       	dec	r24
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <spi_slaveDeSelect+0x8>
 6c2:	29 2b       	or	r18, r25
 6c4:	28 bb       	out	0x18, r18	; 24
 6c6:	08 95       	ret

000006c8 <displayDriverInit>:
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	e7 df       	rcall	.-50     	; 0x69a <spi_slaveSelect>
 6cc:	89 e0       	ldi	r24, 0x09	; 9
 6ce:	e1 df       	rcall	.-62     	; 0x692 <spi_write>
 6d0:	8f ef       	ldi	r24, 0xFF	; 255
 6d2:	df df       	rcall	.-66     	; 0x692 <spi_write>
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	ed df       	rcall	.-38     	; 0x6b2 <spi_slaveDeSelect>
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	df df       	rcall	.-66     	; 0x69a <spi_slaveSelect>
 6dc:	8a e0       	ldi	r24, 0x0A	; 10
 6de:	d9 df       	rcall	.-78     	; 0x692 <spi_write>
 6e0:	8f e0       	ldi	r24, 0x0F	; 15
 6e2:	d7 df       	rcall	.-82     	; 0x692 <spi_write>
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	e5 df       	rcall	.-54     	; 0x6b2 <spi_slaveDeSelect>
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	d7 df       	rcall	.-82     	; 0x69a <spi_slaveSelect>
 6ec:	8b e0       	ldi	r24, 0x0B	; 11
 6ee:	d1 df       	rcall	.-94     	; 0x692 <spi_write>
 6f0:	83 e0       	ldi	r24, 0x03	; 3
 6f2:	cf df       	rcall	.-98     	; 0x692 <spi_write>
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	dd df       	rcall	.-70     	; 0x6b2 <spi_slaveDeSelect>
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	cf df       	rcall	.-98     	; 0x69a <spi_slaveSelect>
 6fc:	8c e0       	ldi	r24, 0x0C	; 12
 6fe:	c9 df       	rcall	.-110    	; 0x692 <spi_write>
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	c7 df       	rcall	.-114    	; 0x692 <spi_write>
 704:	80 e0       	ldi	r24, 0x00	; 0
 706:	d5 cf       	rjmp	.-86     	; 0x6b2 <spi_slaveDeSelect>
 708:	08 95       	ret

0000070a <spi_writeWord>:
}

void spi_writeWord(unsigned char adress, unsigned char data )
{
 70a:	cf 93       	push	r28
 70c:	df 93       	push	r29
 70e:	d8 2f       	mov	r29, r24
 710:	c6 2f       	mov	r28, r22
	spi_slaveSelect(0);		// Select display chip
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	c2 df       	rcall	.-124    	; 0x69a <spi_slaveSelect>
	spi_write(adress);		// digit adress: (digit place)
 716:	8d 2f       	mov	r24, r29
 718:	bc df       	rcall	.-136    	; 0x692 <spi_write>
	spi_write(data);		// digit value: 0
 71a:	8c 2f       	mov	r24, r28
 71c:	ba df       	rcall	.-140    	; 0x692 <spi_write>
	spi_slaveDeSelect(0);	// Deselect display chip
 71e:	80 e0       	ldi	r24, 0x00	; 0
 720:	c8 df       	rcall	.-112    	; 0x6b2 <spi_slaveDeSelect>
 722:	df 91       	pop	r29
}
 724:	cf 91       	pop	r28
 726:	08 95       	ret

00000728 <clearDisplay>:
 728:	cf 93       	push	r28
	}
}

void clearDisplay(void)
{
	for (char i =1; i<=4; i++)
 72a:	c1 e0       	ldi	r28, 0x01	; 1
	{
		spi_writeWord(i, 0);
 72c:	60 e0       	ldi	r22, 0x00	; 0
 72e:	8c 2f       	mov	r24, r28
 730:	ec df       	rcall	.-40     	; 0x70a <spi_writeWord>
	}
}

void clearDisplay(void)
{
	for (char i =1; i<=4; i++)
 732:	cf 5f       	subi	r28, 0xFF	; 255
 734:	c5 30       	cpi	r28, 0x05	; 5
 736:	d1 f7       	brne	.-12     	; 0x72c <clearDisplay+0x4>
	{
		spi_writeWord(i, 0);
	}
}
 738:	cf 91       	pop	r28
 73a:	08 95       	ret

0000073c <writeLedDisplay>:
	spi_write(data);		// digit value: 0
	spi_slaveDeSelect(0);	// Deselect display chip
}

void writeLedDisplay(int value)
{
 73c:	0f 93       	push	r16
 73e:	1f 93       	push	r17
 740:	cf 93       	push	r28
 742:	df 93       	push	r29
 744:	08 2f       	mov	r16, r24
 746:	19 2f       	mov	r17, r25
	clearDisplay();
 748:	ef df       	rcall	.-34     	; 0x728 <clearDisplay>
 74a:	c0 2f       	mov	r28, r16
 74c:	d1 2f       	mov	r29, r17
 74e:	c0 31       	cpi	r28, 0x10	; 16
 750:	87 e2       	ldi	r24, 0x27	; 39
 752:	d8 07       	cpc	r29, r24
 754:	14 f0       	brlt	.+4      	; 0x75a <writeLedDisplay+0x1e>
 756:	cf e0       	ldi	r28, 0x0F	; 15
 758:	d7 e2       	ldi	r29, 0x27	; 39
	if(value > 9999){
		value = 9999;
	}
	if(value < 0)
 75a:	dd 23       	and	r29, r29
 75c:	54 f5       	brge	.+84     	; 0x7b2 <writeLedDisplay+0x76>
		if(value < -999)
		{
			value = -999;
		}

		int tempValue = abs(value);
 75e:	c9 31       	cpi	r28, 0x19	; 25
 760:	8c ef       	ldi	r24, 0xFC	; 252
 762:	d8 07       	cpc	r29, r24
 764:	14 f4       	brge	.+4      	; 0x76a <writeLedDisplay+0x2e>
 766:	c9 e1       	ldi	r28, 0x19	; 25
 768:	dc ef       	ldi	r29, 0xFC	; 252
 76a:	8e 01       	movw	r16, r28
 76c:	dd 23       	and	r29, r29
 76e:	24 f4       	brge	.+8      	; 0x778 <writeLedDisplay+0x3c>
 770:	00 27       	eor	r16, r16
 772:	11 27       	eor	r17, r17
 774:	0c 1b       	sub	r16, r28
 776:	1d 0b       	sbc	r17, r29
		int num3 = (tempValue / 1) % 10;
		int num2 = (tempValue / 10) % 10;
		int num1 = (tempValue / 100) % 10;

		spi_writeWord(4, 10);
 778:	6a e0       	ldi	r22, 0x0A	; 10
 77a:	84 e0       	ldi	r24, 0x04	; 4
 77c:	c6 df       	rcall	.-116    	; 0x70a <spi_writeWord>
		spi_writeWord(3, num1);
 77e:	c8 01       	movw	r24, r16
 780:	64 e6       	ldi	r22, 0x64	; 100
 782:	70 e0       	ldi	r23, 0x00	; 0
 784:	ef d0       	rcall	.+478    	; 0x964 <__divmodhi4>
 786:	cb 01       	movw	r24, r22
 788:	ca e0       	ldi	r28, 0x0A	; 10
 78a:	d0 e0       	ldi	r29, 0x00	; 0
 78c:	be 01       	movw	r22, r28
 78e:	ea d0       	rcall	.+468    	; 0x964 <__divmodhi4>
 790:	68 2f       	mov	r22, r24
 792:	83 e0       	ldi	r24, 0x03	; 3
 794:	ba df       	rcall	.-140    	; 0x70a <spi_writeWord>
		spi_writeWord(2, num2);
 796:	c8 01       	movw	r24, r16
 798:	be 01       	movw	r22, r28
 79a:	e4 d0       	rcall	.+456    	; 0x964 <__divmodhi4>
 79c:	18 2f       	mov	r17, r24
 79e:	cb 01       	movw	r24, r22
 7a0:	be 01       	movw	r22, r28
 7a2:	e0 d0       	rcall	.+448    	; 0x964 <__divmodhi4>
 7a4:	68 2f       	mov	r22, r24
 7a6:	82 e0       	ldi	r24, 0x02	; 2
 7a8:	b0 df       	rcall	.-160    	; 0x70a <spi_writeWord>
		spi_writeWord(1, num3);
 7aa:	61 2f       	mov	r22, r17
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	ad df       	rcall	.-166    	; 0x70a <spi_writeWord>
 7b0:	23 c0       	rjmp	.+70     	; 0x7f8 <writeLedDisplay+0xbc>
		int num4 = (value / 1) % 10;
		int num3 = (value / 10) % 10;
		int num2 = (value / 100) % 10;
		int num1 = (value / 1000) % 10;

		spi_writeWord(4, num1);
 7b2:	ce 01       	movw	r24, r28
 7b4:	68 ee       	ldi	r22, 0xE8	; 232
 7b6:	73 e0       	ldi	r23, 0x03	; 3
 7b8:	d5 d0       	rcall	.+426    	; 0x964 <__divmodhi4>
 7ba:	cb 01       	movw	r24, r22
 7bc:	0a e0       	ldi	r16, 0x0A	; 10
 7be:	10 e0       	ldi	r17, 0x00	; 0
 7c0:	b8 01       	movw	r22, r16
 7c2:	d0 d0       	rcall	.+416    	; 0x964 <__divmodhi4>
 7c4:	68 2f       	mov	r22, r24
 7c6:	84 e0       	ldi	r24, 0x04	; 4
 7c8:	a0 df       	rcall	.-192    	; 0x70a <spi_writeWord>
		spi_writeWord(3, num2);
 7ca:	ce 01       	movw	r24, r28
 7cc:	64 e6       	ldi	r22, 0x64	; 100
 7ce:	70 e0       	ldi	r23, 0x00	; 0
 7d0:	c9 d0       	rcall	.+402    	; 0x964 <__divmodhi4>
 7d2:	cb 01       	movw	r24, r22
 7d4:	b8 01       	movw	r22, r16
 7d6:	c6 d0       	rcall	.+396    	; 0x964 <__divmodhi4>
 7d8:	68 2f       	mov	r22, r24
 7da:	83 e0       	ldi	r24, 0x03	; 3
 7dc:	96 df       	rcall	.-212    	; 0x70a <spi_writeWord>
		spi_writeWord(2, num3);
 7de:	ce 01       	movw	r24, r28
 7e0:	b8 01       	movw	r22, r16
 7e2:	c0 d0       	rcall	.+384    	; 0x964 <__divmodhi4>
 7e4:	c8 2f       	mov	r28, r24
 7e6:	cb 01       	movw	r24, r22
 7e8:	b8 01       	movw	r22, r16
 7ea:	bc d0       	rcall	.+376    	; 0x964 <__divmodhi4>
 7ec:	68 2f       	mov	r22, r24
 7ee:	82 e0       	ldi	r24, 0x02	; 2
 7f0:	8c df       	rcall	.-232    	; 0x70a <spi_writeWord>
 7f2:	6c 2f       	mov	r22, r28
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	89 df       	rcall	.-238    	; 0x70a <spi_writeWord>
		spi_writeWord(1, num4);
 7f8:	df 91       	pop	r29
 7fa:	cf 91       	pop	r28
 7fc:	1f 91       	pop	r17
 7fe:	0f 91       	pop	r16
	}
}
 800:	08 95       	ret

00000802 <calculateNewScoreAppleCollected>:
 802:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <score>
 806:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <score+0x1>
	}
}

void calculateNewScoreAppleCollected()
{
	score += 20;
 80a:	44 96       	adiw	r24, 0x14	; 20
 80c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <score+0x1>
 810:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <score>
	writeLedDisplay(score);
 814:	93 cf       	rjmp	.-218    	; 0x73c <writeLedDisplay>
 816:	08 95       	ret

00000818 <calculateNewScoreMovement>:
}

void calculateNewScoreMovement()
{
	score += 2;
 818:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <score>
 81c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <score+0x1>
 820:	02 96       	adiw	r24, 0x02	; 2
 822:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <score+0x1>
 826:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <score>
	writeLedDisplay(score);
 82a:	88 cf       	rjmp	.-240    	; 0x73c <writeLedDisplay>
 82c:	08 95       	ret

0000082e <__vector_9>:
enum eStatus status;
int check = 1;


ISR( TIMER2_COMP_vect )
{
 82e:	1f 92       	push	r1
 830:	0f 92       	push	r0
 832:	0f b6       	in	r0, 0x3f	; 63
 834:	0f 92       	push	r0
 836:	11 24       	eor	r1, r1
 838:	0b b6       	in	r0, 0x3b	; 59
 83a:	0f 92       	push	r0
 83c:	2f 93       	push	r18
 83e:	3f 93       	push	r19
 840:	4f 93       	push	r20
 842:	5f 93       	push	r21
 844:	6f 93       	push	r22
 846:	7f 93       	push	r23
 848:	8f 93       	push	r24
 84a:	9f 93       	push	r25
 84c:	af 93       	push	r26
 84e:	bf 93       	push	r27
 850:	ef 93       	push	r30
 852:	ff 93       	push	r31
	if(check){
 854:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <check>
 858:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <check+0x1>
 85c:	89 2b       	or	r24, r25
 85e:	59 f0       	breq	.+22     	; 0x876 <__vector_9+0x48>
	enum eStatus newStatus = checkDirection();
 860:	46 dc       	rcall	.-1908   	; 0xee <checkDirection>
	if(status != newStatus){
 862:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <status>
 866:	89 17       	cp	r24, r25
 868:	31 f0       	breq	.+12     	; 0x876 <__vector_9+0x48>
		check = 0;
 86a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <check+0x1>
 86e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <check>
			status = newStatus;//checkDirection();
 872:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <status>

		}
	}
	//status = checkDirection();
	if (tick == 1000)
 876:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <tick>
 87a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <tick+0x1>
 87e:	88 3e       	cpi	r24, 0xE8	; 232
 880:	93 40       	sbci	r25, 0x03	; 3
 882:	d9 f4       	brne	.+54     	; 0x8ba <__vector_9+0x8c>
	{
		tick = 0;
 884:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <tick+0x1>
 888:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <tick>
		switch (status)
 88c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <status>
 890:	81 30       	cpi	r24, 0x01	; 1
 892:	41 f0       	breq	.+16     	; 0x8a4 <__vector_9+0x76>
 894:	28 f0       	brcs	.+10     	; 0x8a0 <__vector_9+0x72>
 896:	82 30       	cpi	r24, 0x02	; 2
 898:	39 f0       	breq	.+14     	; 0x8a8 <__vector_9+0x7a>
 89a:	83 30       	cpi	r24, 0x03	; 3
 89c:	39 f0       	breq	.+14     	; 0x8ac <__vector_9+0x7e>
		{
		case GOING_UP:
			moveUp();
 89e:	07 c0       	rjmp	.+14     	; 0x8ae <__vector_9+0x80>
			break;
 8a0:	b7 de       	rcall	.-658    	; 0x610 <moveUp>
		case GOING_DOWN:
			moveDown();
 8a2:	05 c0       	rjmp	.+10     	; 0x8ae <__vector_9+0x80>
			break;
		case GOING_LEFT:
			moveLeft();
 8a4:	c2 de       	rcall	.-636    	; 0x62a <moveDown>
 8a6:	03 c0       	rjmp	.+6      	; 0x8ae <__vector_9+0x80>
			break;
 8a8:	cf de       	rcall	.-610    	; 0x648 <moveLeft>
		case GOING_RIGHT:
			moveRight();
 8aa:	01 c0       	rjmp	.+2      	; 0x8ae <__vector_9+0x80>
 8ac:	dd de       	rcall	.-582    	; 0x668 <moveRight>
			break;
		case WAITING:
			break;
		}
		check = 1;
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <check+0x1>
 8b6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <check>
	}
	
	//writeLedDisplay(tick);
	tick++;
 8ba:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <tick>
 8be:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <tick+0x1>
 8c2:	01 96       	adiw	r24, 0x01	; 1
 8c4:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <tick+0x1>
 8c8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <tick>
		//}else if(25 == tick){
		//PORTD = 0xFF;
		//tick = 0;
		//high = 1;
	//}
}
 8cc:	ff 91       	pop	r31
 8ce:	ef 91       	pop	r30
 8d0:	bf 91       	pop	r27
 8d2:	af 91       	pop	r26
 8d4:	9f 91       	pop	r25
 8d6:	8f 91       	pop	r24
 8d8:	7f 91       	pop	r23
 8da:	6f 91       	pop	r22
 8dc:	5f 91       	pop	r21
 8de:	4f 91       	pop	r20
 8e0:	3f 91       	pop	r19
 8e2:	2f 91       	pop	r18
 8e4:	0f 90       	pop	r0
 8e6:	0b be       	out	0x3b, r0	; 59
 8e8:	0f 90       	pop	r0
 8ea:	0f be       	out	0x3f, r0	; 63
 8ec:	0f 90       	pop	r0
 8ee:	1f 90       	pop	r1
 8f0:	18 95       	reti

000008f2 <startGame>:

void startGame()
{
	while (WAITING == checkDirection())
 8f2:	fd db       	rcall	.-2054   	; 0xee <checkDirection>
 8f4:	04 97       	sbiw	r24, 0x04	; 4
 8f6:	e9 f3       	breq	.-6      	; 0x8f2 <startGame>
	{
	}
		addCandy();
 8f8:	3f cd       	rjmp	.-1410   	; 0x378 <addCandy>
 8fa:	08 95       	ret

000008fc <main>:
 8fc:	81 e0       	ldi	r24, 0x01	; 1


int main(void)
{
	//initializatie voor het scoreBord
	DDRB=0x01;					// Set PB0 pin as output for display select
 8fe:	87 bb       	out	0x17, r24	; 23
	spi_masterInit();			// Initialize spi module
 900:	c1 de       	rcall	.-638    	; 0x684 <spi_masterInit>
	displayDriverInit();		// Initialize display chip
 902:	e2 de       	rcall	.-572    	; 0x6c8 <displayDriverInit>
 904:	84 e0       	ldi	r24, 0x04	; 4
	status = WAITING;
 906:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <status>
	displayInit();
 90a:	b8 dc       	rcall	.-1680   	; 0x27c <displayInit>
	wait(500);
 90c:	84 ef       	ldi	r24, 0xF4	; 244
 90e:	91 e0       	ldi	r25, 0x01	; 1
 910:	18 d0       	rcall	.+48     	; 0x942 <wait>
 912:	8f e0       	ldi	r24, 0x0F	; 15
	DDRA = 0x0F;
 914:	8a bb       	out	0x1a, r24	; 26
 916:	64 e0       	ldi	r22, 0x04	; 4

	//addCandy();
	setStartLocation(4,4);
 918:	70 e0       	ldi	r23, 0x00	; 0
 91a:	84 e0       	ldi	r24, 0x04	; 4
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	dd dc       	rcall	.-1606   	; 0x2da <setStartLocation>
	wait(1000);
 920:	88 ee       	ldi	r24, 0xE8	; 232
 922:	93 e0       	ldi	r25, 0x03	; 3
 924:	0e d0       	rcall	.+28     	; 0x942 <wait>
 926:	87 e0       	ldi	r24, 0x07	; 7
	//
		//EICRA |= 0x30;			// INT2 rising edge
		//EIMSK |= 0x04;			// Enable INT2
	//
	
	    OCR2 = 519;
 928:	83 bd       	out	0x23, r24	; 35
 92a:	88 e0       	ldi	r24, 0x08	; 8
	    TCCR2 = 1<<WGM21;
 92c:	85 bd       	out	0x25, r24	; 37
 92e:	87 b7       	in	r24, 0x37	; 55
	    
	    TIMSK = TIMSK | 1<<TOIE1 | 1<<OCIE2;
 930:	84 68       	ori	r24, 0x84	; 132
 932:	87 bf       	out	0x37, r24	; 55
	    TCCR2 |= 1<<CS22 | 0<<CS21 | 1<<CS20;
 934:	85 b5       	in	r24, 0x25	; 37
 936:	85 60       	ori	r24, 0x05	; 5
 938:	85 bd       	out	0x25, r24	; 37
	    TCNT2 = 0;
 93a:	14 bc       	out	0x24, r1	; 36
	sei();
 93c:	78 94       	sei

	startGame();
 93e:	d9 df       	rcall	.-78     	; 0x8f2 <startGame>
 940:	ff cf       	rjmp	.-2      	; 0x940 <main+0x44>

00000942 <wait>:
#include <avr/io.h>
#include <util/delay.h>

void wait( int ms )
{
	for (int i=0; i<ms; i++)
 942:	18 16       	cp	r1, r24
 944:	19 06       	cpc	r1, r25
 946:	6c f4       	brge	.+26     	; 0x962 <wait+0x20>
 948:	20 e0       	ldi	r18, 0x00	; 0
 94a:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 94c:	ef ec       	ldi	r30, 0xCF	; 207
 94e:	f7 e0       	ldi	r31, 0x07	; 7
 950:	31 97       	sbiw	r30, 0x01	; 1
 952:	f1 f7       	brne	.-4      	; 0x950 <wait+0xe>
 954:	00 c0       	rjmp	.+0      	; 0x956 <wait+0x14>
 956:	00 00       	nop
 958:	2f 5f       	subi	r18, 0xFF	; 255
 95a:	3f 4f       	sbci	r19, 0xFF	; 255
 95c:	82 17       	cp	r24, r18
 95e:	93 07       	cpc	r25, r19
 960:	a9 f7       	brne	.-22     	; 0x94c <wait+0xa>
 962:	08 95       	ret

00000964 <__divmodhi4>:
 964:	97 fb       	bst	r25, 7
 966:	07 2e       	mov	r0, r23
 968:	16 f4       	brtc	.+4      	; 0x96e <__divmodhi4+0xa>
 96a:	00 94       	com	r0
 96c:	06 d0       	rcall	.+12     	; 0x97a <__divmodhi4_neg1>
 96e:	77 fd       	sbrc	r23, 7
 970:	08 d0       	rcall	.+16     	; 0x982 <__divmodhi4_neg2>
 972:	0b d0       	rcall	.+22     	; 0x98a <__udivmodhi4>
 974:	07 fc       	sbrc	r0, 7
 976:	05 d0       	rcall	.+10     	; 0x982 <__divmodhi4_neg2>
 978:	3e f4       	brtc	.+14     	; 0x988 <__divmodhi4_exit>

0000097a <__divmodhi4_neg1>:
 97a:	90 95       	com	r25
 97c:	81 95       	neg	r24
 97e:	9f 4f       	sbci	r25, 0xFF	; 255
 980:	08 95       	ret

00000982 <__divmodhi4_neg2>:
 982:	70 95       	com	r23
 984:	61 95       	neg	r22
 986:	7f 4f       	sbci	r23, 0xFF	; 255

00000988 <__divmodhi4_exit>:
 988:	08 95       	ret

0000098a <__udivmodhi4>:
 98a:	aa 1b       	sub	r26, r26
 98c:	bb 1b       	sub	r27, r27
 98e:	51 e1       	ldi	r21, 0x11	; 17
 990:	07 c0       	rjmp	.+14     	; 0x9a0 <__udivmodhi4_ep>

00000992 <__udivmodhi4_loop>:
 992:	aa 1f       	adc	r26, r26
 994:	bb 1f       	adc	r27, r27
 996:	a6 17       	cp	r26, r22
 998:	b7 07       	cpc	r27, r23
 99a:	10 f0       	brcs	.+4      	; 0x9a0 <__udivmodhi4_ep>
 99c:	a6 1b       	sub	r26, r22
 99e:	b7 0b       	sbc	r27, r23

000009a0 <__udivmodhi4_ep>:
 9a0:	88 1f       	adc	r24, r24
 9a2:	99 1f       	adc	r25, r25
 9a4:	5a 95       	dec	r21
 9a6:	a9 f7       	brne	.-22     	; 0x992 <__udivmodhi4_loop>
 9a8:	80 95       	com	r24
 9aa:	90 95       	com	r25
 9ac:	bc 01       	movw	r22, r24
 9ae:	cd 01       	movw	r24, r26
 9b0:	08 95       	ret

000009b2 <malloc>:
 9b2:	0f 93       	push	r16
 9b4:	1f 93       	push	r17
 9b6:	cf 93       	push	r28
 9b8:	df 93       	push	r29
 9ba:	82 30       	cpi	r24, 0x02	; 2
 9bc:	91 05       	cpc	r25, r1
 9be:	10 f4       	brcc	.+4      	; 0x9c4 <malloc+0x12>
 9c0:	82 e0       	ldi	r24, 0x02	; 2
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <__flp>
 9c8:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <__flp+0x1>
 9cc:	20 e0       	ldi	r18, 0x00	; 0
 9ce:	30 e0       	ldi	r19, 0x00	; 0
 9d0:	a0 e0       	ldi	r26, 0x00	; 0
 9d2:	b0 e0       	ldi	r27, 0x00	; 0
 9d4:	30 97       	sbiw	r30, 0x00	; 0
 9d6:	19 f1       	breq	.+70     	; 0xa1e <malloc+0x6c>
 9d8:	40 81       	ld	r20, Z
 9da:	51 81       	ldd	r21, Z+1	; 0x01
 9dc:	02 81       	ldd	r16, Z+2	; 0x02
 9de:	13 81       	ldd	r17, Z+3	; 0x03
 9e0:	48 17       	cp	r20, r24
 9e2:	59 07       	cpc	r21, r25
 9e4:	c8 f0       	brcs	.+50     	; 0xa18 <malloc+0x66>
 9e6:	84 17       	cp	r24, r20
 9e8:	95 07       	cpc	r25, r21
 9ea:	69 f4       	brne	.+26     	; 0xa06 <malloc+0x54>
 9ec:	10 97       	sbiw	r26, 0x00	; 0
 9ee:	31 f0       	breq	.+12     	; 0x9fc <malloc+0x4a>
 9f0:	12 96       	adiw	r26, 0x02	; 2
 9f2:	0c 93       	st	X, r16
 9f4:	12 97       	sbiw	r26, 0x02	; 2
 9f6:	13 96       	adiw	r26, 0x03	; 3
 9f8:	1c 93       	st	X, r17
 9fa:	27 c0       	rjmp	.+78     	; 0xa4a <malloc+0x98>
 9fc:	00 93 2d 01 	sts	0x012D, r16	; 0x80012d <__flp>
 a00:	10 93 2e 01 	sts	0x012E, r17	; 0x80012e <__flp+0x1>
 a04:	22 c0       	rjmp	.+68     	; 0xa4a <malloc+0x98>
 a06:	21 15       	cp	r18, r1
 a08:	31 05       	cpc	r19, r1
 a0a:	19 f0       	breq	.+6      	; 0xa12 <malloc+0x60>
 a0c:	42 17       	cp	r20, r18
 a0e:	53 07       	cpc	r21, r19
 a10:	18 f4       	brcc	.+6      	; 0xa18 <malloc+0x66>
 a12:	9a 01       	movw	r18, r20
 a14:	bd 01       	movw	r22, r26
 a16:	ef 01       	movw	r28, r30
 a18:	df 01       	movw	r26, r30
 a1a:	f8 01       	movw	r30, r16
 a1c:	db cf       	rjmp	.-74     	; 0x9d4 <malloc+0x22>
 a1e:	21 15       	cp	r18, r1
 a20:	31 05       	cpc	r19, r1
 a22:	f9 f0       	breq	.+62     	; 0xa62 <malloc+0xb0>
 a24:	28 1b       	sub	r18, r24
 a26:	39 0b       	sbc	r19, r25
 a28:	24 30       	cpi	r18, 0x04	; 4
 a2a:	31 05       	cpc	r19, r1
 a2c:	80 f4       	brcc	.+32     	; 0xa4e <malloc+0x9c>
 a2e:	8a 81       	ldd	r24, Y+2	; 0x02
 a30:	9b 81       	ldd	r25, Y+3	; 0x03
 a32:	61 15       	cp	r22, r1
 a34:	71 05       	cpc	r23, r1
 a36:	21 f0       	breq	.+8      	; 0xa40 <malloc+0x8e>
 a38:	fb 01       	movw	r30, r22
 a3a:	93 83       	std	Z+3, r25	; 0x03
 a3c:	82 83       	std	Z+2, r24	; 0x02
 a3e:	04 c0       	rjmp	.+8      	; 0xa48 <malloc+0x96>
 a40:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <__flp+0x1>
 a44:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <__flp>
 a48:	fe 01       	movw	r30, r28
 a4a:	32 96       	adiw	r30, 0x02	; 2
 a4c:	44 c0       	rjmp	.+136    	; 0xad6 <malloc+0x124>
 a4e:	fe 01       	movw	r30, r28
 a50:	e2 0f       	add	r30, r18
 a52:	f3 1f       	adc	r31, r19
 a54:	81 93       	st	Z+, r24
 a56:	91 93       	st	Z+, r25
 a58:	22 50       	subi	r18, 0x02	; 2
 a5a:	31 09       	sbc	r19, r1
 a5c:	39 83       	std	Y+1, r19	; 0x01
 a5e:	28 83       	st	Y, r18
 a60:	3a c0       	rjmp	.+116    	; 0xad6 <malloc+0x124>
 a62:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <__brkval>
 a66:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <__brkval+0x1>
 a6a:	23 2b       	or	r18, r19
 a6c:	41 f4       	brne	.+16     	; 0xa7e <malloc+0xcc>
 a6e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 a72:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 a76:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <__brkval+0x1>
 a7a:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <__brkval>
 a7e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 a82:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 a86:	21 15       	cp	r18, r1
 a88:	31 05       	cpc	r19, r1
 a8a:	41 f4       	brne	.+16     	; 0xa9c <malloc+0xea>
 a8c:	2d b7       	in	r18, 0x3d	; 61
 a8e:	3e b7       	in	r19, 0x3e	; 62
 a90:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 a94:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 a98:	24 1b       	sub	r18, r20
 a9a:	35 0b       	sbc	r19, r21
 a9c:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <__brkval>
 aa0:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <__brkval+0x1>
 aa4:	e2 17       	cp	r30, r18
 aa6:	f3 07       	cpc	r31, r19
 aa8:	a0 f4       	brcc	.+40     	; 0xad2 <malloc+0x120>
 aaa:	2e 1b       	sub	r18, r30
 aac:	3f 0b       	sbc	r19, r31
 aae:	28 17       	cp	r18, r24
 ab0:	39 07       	cpc	r19, r25
 ab2:	78 f0       	brcs	.+30     	; 0xad2 <malloc+0x120>
 ab4:	ac 01       	movw	r20, r24
 ab6:	4e 5f       	subi	r20, 0xFE	; 254
 ab8:	5f 4f       	sbci	r21, 0xFF	; 255
 aba:	24 17       	cp	r18, r20
 abc:	35 07       	cpc	r19, r21
 abe:	48 f0       	brcs	.+18     	; 0xad2 <malloc+0x120>
 ac0:	4e 0f       	add	r20, r30
 ac2:	5f 1f       	adc	r21, r31
 ac4:	50 93 2c 01 	sts	0x012C, r21	; 0x80012c <__brkval+0x1>
 ac8:	40 93 2b 01 	sts	0x012B, r20	; 0x80012b <__brkval>
 acc:	81 93       	st	Z+, r24
 ace:	91 93       	st	Z+, r25
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <malloc+0x124>
 ad2:	e0 e0       	ldi	r30, 0x00	; 0
 ad4:	f0 e0       	ldi	r31, 0x00	; 0
 ad6:	cf 01       	movw	r24, r30
 ad8:	df 91       	pop	r29
 ada:	cf 91       	pop	r28
 adc:	1f 91       	pop	r17
 ade:	0f 91       	pop	r16
 ae0:	08 95       	ret

00000ae2 <free>:
 ae2:	cf 93       	push	r28
 ae4:	df 93       	push	r29
 ae6:	00 97       	sbiw	r24, 0x00	; 0
 ae8:	09 f4       	brne	.+2      	; 0xaec <free+0xa>
 aea:	81 c0       	rjmp	.+258    	; 0xbee <free+0x10c>
 aec:	fc 01       	movw	r30, r24
 aee:	32 97       	sbiw	r30, 0x02	; 2
 af0:	13 82       	std	Z+3, r1	; 0x03
 af2:	12 82       	std	Z+2, r1	; 0x02
 af4:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <__flp>
 af8:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <__flp+0x1>
 afc:	10 97       	sbiw	r26, 0x00	; 0
 afe:	81 f4       	brne	.+32     	; 0xb20 <free+0x3e>
 b00:	20 81       	ld	r18, Z
 b02:	31 81       	ldd	r19, Z+1	; 0x01
 b04:	82 0f       	add	r24, r18
 b06:	93 1f       	adc	r25, r19
 b08:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <__brkval>
 b0c:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <__brkval+0x1>
 b10:	28 17       	cp	r18, r24
 b12:	39 07       	cpc	r19, r25
 b14:	51 f5       	brne	.+84     	; 0xb6a <free+0x88>
 b16:	f0 93 2c 01 	sts	0x012C, r31	; 0x80012c <__brkval+0x1>
 b1a:	e0 93 2b 01 	sts	0x012B, r30	; 0x80012b <__brkval>
 b1e:	67 c0       	rjmp	.+206    	; 0xbee <free+0x10c>
 b20:	ed 01       	movw	r28, r26
 b22:	20 e0       	ldi	r18, 0x00	; 0
 b24:	30 e0       	ldi	r19, 0x00	; 0
 b26:	ce 17       	cp	r28, r30
 b28:	df 07       	cpc	r29, r31
 b2a:	40 f4       	brcc	.+16     	; 0xb3c <free+0x5a>
 b2c:	4a 81       	ldd	r20, Y+2	; 0x02
 b2e:	5b 81       	ldd	r21, Y+3	; 0x03
 b30:	9e 01       	movw	r18, r28
 b32:	41 15       	cp	r20, r1
 b34:	51 05       	cpc	r21, r1
 b36:	f1 f0       	breq	.+60     	; 0xb74 <free+0x92>
 b38:	ea 01       	movw	r28, r20
 b3a:	f5 cf       	rjmp	.-22     	; 0xb26 <free+0x44>
 b3c:	d3 83       	std	Z+3, r29	; 0x03
 b3e:	c2 83       	std	Z+2, r28	; 0x02
 b40:	40 81       	ld	r20, Z
 b42:	51 81       	ldd	r21, Z+1	; 0x01
 b44:	84 0f       	add	r24, r20
 b46:	95 1f       	adc	r25, r21
 b48:	c8 17       	cp	r28, r24
 b4a:	d9 07       	cpc	r29, r25
 b4c:	59 f4       	brne	.+22     	; 0xb64 <free+0x82>
 b4e:	88 81       	ld	r24, Y
 b50:	99 81       	ldd	r25, Y+1	; 0x01
 b52:	84 0f       	add	r24, r20
 b54:	95 1f       	adc	r25, r21
 b56:	02 96       	adiw	r24, 0x02	; 2
 b58:	91 83       	std	Z+1, r25	; 0x01
 b5a:	80 83       	st	Z, r24
 b5c:	8a 81       	ldd	r24, Y+2	; 0x02
 b5e:	9b 81       	ldd	r25, Y+3	; 0x03
 b60:	93 83       	std	Z+3, r25	; 0x03
 b62:	82 83       	std	Z+2, r24	; 0x02
 b64:	21 15       	cp	r18, r1
 b66:	31 05       	cpc	r19, r1
 b68:	29 f4       	brne	.+10     	; 0xb74 <free+0x92>
 b6a:	f0 93 2e 01 	sts	0x012E, r31	; 0x80012e <__flp+0x1>
 b6e:	e0 93 2d 01 	sts	0x012D, r30	; 0x80012d <__flp>
 b72:	3d c0       	rjmp	.+122    	; 0xbee <free+0x10c>
 b74:	e9 01       	movw	r28, r18
 b76:	fb 83       	std	Y+3, r31	; 0x03
 b78:	ea 83       	std	Y+2, r30	; 0x02
 b7a:	49 91       	ld	r20, Y+
 b7c:	59 91       	ld	r21, Y+
 b7e:	c4 0f       	add	r28, r20
 b80:	d5 1f       	adc	r29, r21
 b82:	ec 17       	cp	r30, r28
 b84:	fd 07       	cpc	r31, r29
 b86:	61 f4       	brne	.+24     	; 0xba0 <free+0xbe>
 b88:	80 81       	ld	r24, Z
 b8a:	91 81       	ldd	r25, Z+1	; 0x01
 b8c:	84 0f       	add	r24, r20
 b8e:	95 1f       	adc	r25, r21
 b90:	02 96       	adiw	r24, 0x02	; 2
 b92:	e9 01       	movw	r28, r18
 b94:	99 83       	std	Y+1, r25	; 0x01
 b96:	88 83       	st	Y, r24
 b98:	82 81       	ldd	r24, Z+2	; 0x02
 b9a:	93 81       	ldd	r25, Z+3	; 0x03
 b9c:	9b 83       	std	Y+3, r25	; 0x03
 b9e:	8a 83       	std	Y+2, r24	; 0x02
 ba0:	e0 e0       	ldi	r30, 0x00	; 0
 ba2:	f0 e0       	ldi	r31, 0x00	; 0
 ba4:	12 96       	adiw	r26, 0x02	; 2
 ba6:	8d 91       	ld	r24, X+
 ba8:	9c 91       	ld	r25, X
 baa:	13 97       	sbiw	r26, 0x03	; 3
 bac:	00 97       	sbiw	r24, 0x00	; 0
 bae:	19 f0       	breq	.+6      	; 0xbb6 <free+0xd4>
 bb0:	fd 01       	movw	r30, r26
 bb2:	dc 01       	movw	r26, r24
 bb4:	f7 cf       	rjmp	.-18     	; 0xba4 <free+0xc2>
 bb6:	8d 91       	ld	r24, X+
 bb8:	9c 91       	ld	r25, X
 bba:	11 97       	sbiw	r26, 0x01	; 1
 bbc:	9d 01       	movw	r18, r26
 bbe:	2e 5f       	subi	r18, 0xFE	; 254
 bc0:	3f 4f       	sbci	r19, 0xFF	; 255
 bc2:	82 0f       	add	r24, r18
 bc4:	93 1f       	adc	r25, r19
 bc6:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <__brkval>
 bca:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <__brkval+0x1>
 bce:	28 17       	cp	r18, r24
 bd0:	39 07       	cpc	r19, r25
 bd2:	69 f4       	brne	.+26     	; 0xbee <free+0x10c>
 bd4:	30 97       	sbiw	r30, 0x00	; 0
 bd6:	29 f4       	brne	.+10     	; 0xbe2 <free+0x100>
 bd8:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__flp+0x1>
 bdc:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__flp>
 be0:	02 c0       	rjmp	.+4      	; 0xbe6 <free+0x104>
 be2:	13 82       	std	Z+3, r1	; 0x03
 be4:	12 82       	std	Z+2, r1	; 0x02
 be6:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <__brkval+0x1>
 bea:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <__brkval>
 bee:	df 91       	pop	r29
 bf0:	cf 91       	pop	r28
 bf2:	08 95       	ret

00000bf4 <do_rand>:
 bf4:	8f 92       	push	r8
 bf6:	9f 92       	push	r9
 bf8:	af 92       	push	r10
 bfa:	bf 92       	push	r11
 bfc:	cf 92       	push	r12
 bfe:	df 92       	push	r13
 c00:	ef 92       	push	r14
 c02:	ff 92       	push	r15
 c04:	cf 93       	push	r28
 c06:	df 93       	push	r29
 c08:	ec 01       	movw	r28, r24
 c0a:	68 81       	ld	r22, Y
 c0c:	79 81       	ldd	r23, Y+1	; 0x01
 c0e:	8a 81       	ldd	r24, Y+2	; 0x02
 c10:	9b 81       	ldd	r25, Y+3	; 0x03
 c12:	61 15       	cp	r22, r1
 c14:	71 05       	cpc	r23, r1
 c16:	81 05       	cpc	r24, r1
 c18:	91 05       	cpc	r25, r1
 c1a:	21 f4       	brne	.+8      	; 0xc24 <do_rand+0x30>
 c1c:	64 e2       	ldi	r22, 0x24	; 36
 c1e:	79 ed       	ldi	r23, 0xD9	; 217
 c20:	8b e5       	ldi	r24, 0x5B	; 91
 c22:	97 e0       	ldi	r25, 0x07	; 7
 c24:	2d e1       	ldi	r18, 0x1D	; 29
 c26:	33 ef       	ldi	r19, 0xF3	; 243
 c28:	41 e0       	ldi	r20, 0x01	; 1
 c2a:	50 e0       	ldi	r21, 0x00	; 0
 c2c:	38 d0       	rcall	.+112    	; 0xc9e <__divmodsi4>
 c2e:	49 01       	movw	r8, r18
 c30:	5a 01       	movw	r10, r20
 c32:	9b 01       	movw	r18, r22
 c34:	ac 01       	movw	r20, r24
 c36:	a7 ea       	ldi	r26, 0xA7	; 167
 c38:	b1 e4       	ldi	r27, 0x41	; 65
 c3a:	4d d0       	rcall	.+154    	; 0xcd6 <__muluhisi3>
 c3c:	6b 01       	movw	r12, r22
 c3e:	7c 01       	movw	r14, r24
 c40:	ac ee       	ldi	r26, 0xEC	; 236
 c42:	b4 ef       	ldi	r27, 0xF4	; 244
 c44:	a5 01       	movw	r20, r10
 c46:	94 01       	movw	r18, r8
 c48:	52 d0       	rcall	.+164    	; 0xcee <__mulohisi3>
 c4a:	dc 01       	movw	r26, r24
 c4c:	cb 01       	movw	r24, r22
 c4e:	8c 0d       	add	r24, r12
 c50:	9d 1d       	adc	r25, r13
 c52:	ae 1d       	adc	r26, r14
 c54:	bf 1d       	adc	r27, r15
 c56:	b7 ff       	sbrs	r27, 7
 c58:	03 c0       	rjmp	.+6      	; 0xc60 <do_rand+0x6c>
 c5a:	01 97       	sbiw	r24, 0x01	; 1
 c5c:	a1 09       	sbc	r26, r1
 c5e:	b0 48       	sbci	r27, 0x80	; 128
 c60:	88 83       	st	Y, r24
 c62:	99 83       	std	Y+1, r25	; 0x01
 c64:	aa 83       	std	Y+2, r26	; 0x02
 c66:	bb 83       	std	Y+3, r27	; 0x03
 c68:	9f 77       	andi	r25, 0x7F	; 127
 c6a:	df 91       	pop	r29
 c6c:	cf 91       	pop	r28
 c6e:	ff 90       	pop	r15
 c70:	ef 90       	pop	r14
 c72:	df 90       	pop	r13
 c74:	cf 90       	pop	r12
 c76:	bf 90       	pop	r11
 c78:	af 90       	pop	r10
 c7a:	9f 90       	pop	r9
 c7c:	8f 90       	pop	r8
 c7e:	08 95       	ret

00000c80 <rand_r>:
 c80:	b9 cf       	rjmp	.-142    	; 0xbf4 <do_rand>

00000c82 <rand>:
 c82:	86 e0       	ldi	r24, 0x06	; 6
 c84:	91 e0       	ldi	r25, 0x01	; 1
 c86:	b6 cf       	rjmp	.-148    	; 0xbf4 <do_rand>

00000c88 <srand>:
 c88:	a0 e0       	ldi	r26, 0x00	; 0
 c8a:	b0 e0       	ldi	r27, 0x00	; 0
 c8c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
 c90:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
 c94:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
 c98:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
 c9c:	08 95       	ret

00000c9e <__divmodsi4>:
 c9e:	05 2e       	mov	r0, r21
 ca0:	97 fb       	bst	r25, 7
 ca2:	16 f4       	brtc	.+4      	; 0xca8 <__divmodsi4+0xa>
 ca4:	00 94       	com	r0
 ca6:	0f d0       	rcall	.+30     	; 0xcc6 <__negsi2>
 ca8:	57 fd       	sbrc	r21, 7
 caa:	05 d0       	rcall	.+10     	; 0xcb6 <__divmodsi4_neg2>
 cac:	24 d0       	rcall	.+72     	; 0xcf6 <__udivmodsi4>
 cae:	07 fc       	sbrc	r0, 7
 cb0:	02 d0       	rcall	.+4      	; 0xcb6 <__divmodsi4_neg2>
 cb2:	46 f4       	brtc	.+16     	; 0xcc4 <__divmodsi4_exit>
 cb4:	08 c0       	rjmp	.+16     	; 0xcc6 <__negsi2>

00000cb6 <__divmodsi4_neg2>:
 cb6:	50 95       	com	r21
 cb8:	40 95       	com	r20
 cba:	30 95       	com	r19
 cbc:	21 95       	neg	r18
 cbe:	3f 4f       	sbci	r19, 0xFF	; 255
 cc0:	4f 4f       	sbci	r20, 0xFF	; 255
 cc2:	5f 4f       	sbci	r21, 0xFF	; 255

00000cc4 <__divmodsi4_exit>:
 cc4:	08 95       	ret

00000cc6 <__negsi2>:
 cc6:	90 95       	com	r25
 cc8:	80 95       	com	r24
 cca:	70 95       	com	r23
 ccc:	61 95       	neg	r22
 cce:	7f 4f       	sbci	r23, 0xFF	; 255
 cd0:	8f 4f       	sbci	r24, 0xFF	; 255
 cd2:	9f 4f       	sbci	r25, 0xFF	; 255
 cd4:	08 95       	ret

00000cd6 <__muluhisi3>:
 cd6:	31 d0       	rcall	.+98     	; 0xd3a <__umulhisi3>
 cd8:	a5 9f       	mul	r26, r21
 cda:	90 0d       	add	r25, r0
 cdc:	b4 9f       	mul	r27, r20
 cde:	90 0d       	add	r25, r0
 ce0:	a4 9f       	mul	r26, r20
 ce2:	80 0d       	add	r24, r0
 ce4:	91 1d       	adc	r25, r1
 ce6:	11 24       	eor	r1, r1
 ce8:	08 95       	ret

00000cea <__mulshisi3>:
 cea:	b7 ff       	sbrs	r27, 7
 cec:	f4 cf       	rjmp	.-24     	; 0xcd6 <__muluhisi3>

00000cee <__mulohisi3>:
 cee:	f3 df       	rcall	.-26     	; 0xcd6 <__muluhisi3>
 cf0:	82 1b       	sub	r24, r18
 cf2:	93 0b       	sbc	r25, r19
 cf4:	08 95       	ret

00000cf6 <__udivmodsi4>:
 cf6:	a1 e2       	ldi	r26, 0x21	; 33
 cf8:	1a 2e       	mov	r1, r26
 cfa:	aa 1b       	sub	r26, r26
 cfc:	bb 1b       	sub	r27, r27
 cfe:	fd 01       	movw	r30, r26
 d00:	0d c0       	rjmp	.+26     	; 0xd1c <__udivmodsi4_ep>

00000d02 <__udivmodsi4_loop>:
 d02:	aa 1f       	adc	r26, r26
 d04:	bb 1f       	adc	r27, r27
 d06:	ee 1f       	adc	r30, r30
 d08:	ff 1f       	adc	r31, r31
 d0a:	a2 17       	cp	r26, r18
 d0c:	b3 07       	cpc	r27, r19
 d0e:	e4 07       	cpc	r30, r20
 d10:	f5 07       	cpc	r31, r21
 d12:	20 f0       	brcs	.+8      	; 0xd1c <__udivmodsi4_ep>
 d14:	a2 1b       	sub	r26, r18
 d16:	b3 0b       	sbc	r27, r19
 d18:	e4 0b       	sbc	r30, r20
 d1a:	f5 0b       	sbc	r31, r21

00000d1c <__udivmodsi4_ep>:
 d1c:	66 1f       	adc	r22, r22
 d1e:	77 1f       	adc	r23, r23
 d20:	88 1f       	adc	r24, r24
 d22:	99 1f       	adc	r25, r25
 d24:	1a 94       	dec	r1
 d26:	69 f7       	brne	.-38     	; 0xd02 <__udivmodsi4_loop>
 d28:	60 95       	com	r22
 d2a:	70 95       	com	r23
 d2c:	80 95       	com	r24
 d2e:	90 95       	com	r25
 d30:	9b 01       	movw	r18, r22
 d32:	ac 01       	movw	r20, r24
 d34:	bd 01       	movw	r22, r26
 d36:	cf 01       	movw	r24, r30
 d38:	08 95       	ret

00000d3a <__umulhisi3>:
 d3a:	a2 9f       	mul	r26, r18
 d3c:	b0 01       	movw	r22, r0
 d3e:	b3 9f       	mul	r27, r19
 d40:	c0 01       	movw	r24, r0
 d42:	a3 9f       	mul	r26, r19
 d44:	70 0d       	add	r23, r0
 d46:	81 1d       	adc	r24, r1
 d48:	11 24       	eor	r1, r1
 d4a:	91 1d       	adc	r25, r1
 d4c:	b2 9f       	mul	r27, r18
 d4e:	70 0d       	add	r23, r0
 d50:	81 1d       	adc	r24, r1
 d52:	11 24       	eor	r1, r1
 d54:	91 1d       	adc	r25, r1
 d56:	08 95       	ret

00000d58 <_exit>:
 d58:	f8 94       	cli

00000d5a <__stop_program>:
 d5a:	ff cf       	rjmp	.-2      	; 0xd5a <__stop_program>
