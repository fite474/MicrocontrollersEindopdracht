
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000090c  000009a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000090c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800108  00800108  000009a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b34  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb6  00000000  00000000  000026d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c70  00000000  00000000  0000338a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00003ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ec  00000000  00000000  00004334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b33  00000000  00000000  00004a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00005553  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e0       	ldi	r30, 0x0C	; 12
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 31       	cpi	r26, 0x1C	; 28
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8e d2       	rcall	.+1308   	; 0x5e0 <main>
  c4:	21 c4       	rjmp	.+2114   	; 0x908 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <displaySetPixel>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
  c8:	e8 2f       	mov	r30, r24
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	e0 5f       	subi	r30, 0xF0	; 240
  ce:	fe 4f       	sbci	r31, 0xFE	; 254
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <displaySetPixel+0x12>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <displaySetPixel+0xe>
  de:	90 81       	ld	r25, Z
  e0:	89 2b       	or	r24, r25
  e2:	80 83       	st	Z, r24
  e4:	08 95       	ret

000000e6 <displayClrPixel>:
  e6:	e8 2f       	mov	r30, r24
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	e0 5f       	subi	r30, 0xF0	; 240
  ec:	fe 4f       	sbci	r31, 0xFE	; 254
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <displayClrPixel+0x12>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <displayClrPixel+0xe>
  fc:	90 81       	ld	r25, Z
  fe:	89 27       	eor	r24, r25
 100:	80 83       	st	Z, r24
 102:	08 95       	ret

00000104 <twi_init>:
 104:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 108:	80 e2       	ldi	r24, 0x20	; 32
 10a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 10e:	08 95       	ret

00000110 <twi_start>:
 110:	84 ea       	ldi	r24, 0xA4	; 164
 112:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 116:	e4 e7       	ldi	r30, 0x74	; 116
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	88 23       	and	r24, r24
 11e:	ec f7       	brge	.-6      	; 0x11a <twi_start+0xa>
 120:	08 95       	ret

00000122 <twi_tx>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
 122:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 126:	84 e8       	ldi	r24, 0x84	; 132
 128:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
 12c:	e4 e7       	ldi	r30, 0x74	; 116
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	88 23       	and	r24, r24
 134:	ec f7       	brge	.-6      	; 0x130 <twi_tx+0xe>
}
 136:	08 95       	ret

00000138 <displayInitHT16K33>:
inputs:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	c8 2f       	mov	r28, r24
	// System setup page 30 ht16k33 datasheet
	twi_start();
 142:	e6 df       	rcall	.-52     	; 0x110 <twi_start>
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
 144:	8c 2f       	mov	r24, r28
 146:	ed df       	rcall	.-38     	; 0x122 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 148:	81 e2       	ldi	r24, 0x21	; 33
 14a:	eb df       	rcall	.-42     	; 0x122 <twi_tx>
 14c:	04 e7       	ldi	r16, 0x74	; 116
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 14e:	10 e0       	ldi	r17, 0x00	; 0
 150:	d4 e9       	ldi	r29, 0x94	; 148
 152:	f8 01       	movw	r30, r16
 154:	d0 83       	st	Z, r29
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();
		
	// ROW/INT set. Page 31 ht16k33 datasheet
	twi_start();
 156:	dc df       	rcall	.-72     	; 0x110 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 158:	8c 2f       	mov	r24, r28
 15a:	e3 df       	rcall	.-58     	; 0x122 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output (default)
 15c:	80 ea       	ldi	r24, 0xA0	; 160
 15e:	e1 df       	rcall	.-62     	; 0x122 <twi_tx>
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 160:	f8 01       	movw	r30, r16
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output (default)
	twi_stop();

	// Dimming set
	twi_start();
 162:	d0 83       	st	Z, r29
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 164:	d5 df       	rcall	.-86     	; 0x110 <twi_start>
 166:	8c 2f       	mov	r24, r28
	twi_tx(0xE1);	// Display Dimming 2/16 duty cycle
 168:	dc df       	rcall	.-72     	; 0x122 <twi_tx>
 16a:	81 ee       	ldi	r24, 0xE1	; 225
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 16c:	da df       	rcall	.-76     	; 0x122 <twi_tx>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xE1);	// Display Dimming 2/16 duty cycle
	twi_stop();

	// Display set
	twi_start();
 16e:	f8 01       	movw	r30, r16
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 170:	d0 83       	st	Z, r29
 172:	ce df       	rcall	.-100    	; 0x110 <twi_start>
	twi_tx(0x81);			// Display ON, Blinking OFF
 174:	8c 2f       	mov	r24, r28
 176:	d5 df       	rcall	.-86     	; 0x122 <twi_tx>
 178:	81 e8       	ldi	r24, 0x81	; 129
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 17a:	d3 df       	rcall	.-90     	; 0x122 <twi_tx>
 17c:	f8 01       	movw	r30, r16
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0x81);			// Display ON, Blinking OFF
	twi_stop();
	
	// Beeld een patroon af op display (test)
	twi_start();
 17e:	d0 83       	st	Z, r29
	twi_tx(i2c_address);
 180:	c7 df       	rcall	.-114    	; 0x110 <twi_start>
 182:	8c 2f       	mov	r24, r28
	twi_tx(0x00);
 184:	ce df       	rcall	.-100    	; 0x122 <twi_tx>
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	cc df       	rcall	.-104    	; 0x122 <twi_tx>
 18a:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t a = 0x55;
 18c:	c5 e5       	ldi	r28, 0x55	; 85
	for( uint8_t idx = 0; idx < 8; idx++ ) {
		a ^= 0xFF;
 18e:	c0 95       	com	r28
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
 190:	8c 2f       	mov	r24, r28
 192:	80 fb       	bst	r24, 0
 194:	87 95       	ror	r24
 196:	87 f9       	bld	r24, 7
 198:	c4 df       	rcall	.-120    	; 0x122 <twi_tx>
 19a:	80 e0       	ldi	r24, 0x00	; 0
		twi_tx( 0x00);
 19c:	c2 df       	rcall	.-124    	; 0x122 <twi_tx>
 19e:	d1 50       	subi	r29, 0x01	; 1
 1a0:	b1 f7       	brne	.-20     	; 0x18e <displayInitHT16K33+0x56>
 1a2:	84 e9       	ldi	r24, 0x94	; 148
	// Beeld een patroon af op display (test)
	twi_start();
	twi_tx(i2c_address);
	twi_tx(0x00);
	uint8_t a = 0x55;
	for( uint8_t idx = 0; idx < 8; idx++ ) {
 1a4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
}
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <displayInit>:
 1b2:	a8 df       	rcall	.-176    	; 0x104 <twi_init>
 1b4:	84 ee       	ldi	r24, 0xE4	; 228
notes:			Init display
Version :    	DMK, Initial code
*******************************************************************/
{
	twi_init();							// Enable TWI interface
	displayInitHT16K33(D0_I2C_ADDR);	// Iit display
 1b6:	c0 df       	rcall	.-128    	; 0x138 <displayInitHT16K33>
	locList = NULL;
 1b8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <locList+0x1>
 1bc:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <locList>
 1c0:	08 95       	ret

000001c2 <update>:
inputs:
outputs:
notes:		Let op de 'vreemde' shift, foutje in printplaat?
Version:	DMK, Initial code
*******************************************************************/
{
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
	// Second display
	twi_start();
 1ca:	a2 df       	rcall	.-188    	; 0x110 <twi_start>
	twi_tx(D0_I2C_ADDR);
 1cc:	84 ee       	ldi	r24, 0xE4	; 228
 1ce:	a9 df       	rcall	.-174    	; 0x122 <twi_tx>
	twi_tx(0x00);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	a7 df       	rcall	.-178    	; 0x122 <twi_tx>
 1d4:	c8 e1       	ldi	r28, 0x18	; 24
 1d6:	d1 e0       	ldi	r29, 0x01	; 1
 1d8:	00 e1       	ldi	r16, 0x10	; 16
 1da:	11 e0       	ldi	r17, 0x01	; 1
 1dc:	8a 91       	ld	r24, -Y
	for( uint8_t idx = 0; idx < 8; idx++ ) {
		uint8_t a = buf[7 + 0 * 8 - idx];
 1de:	80 fb       	bst	r24, 0
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
 1e0:	87 95       	ror	r24
 1e2:	87 f9       	bld	r24, 7
 1e4:	9e df       	rcall	.-196    	; 0x122 <twi_tx>
		twi_tx( 0x00);
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	9c df       	rcall	.-200    	; 0x122 <twi_tx>
 1ea:	c0 17       	cp	r28, r16
{
	// Second display
	twi_start();
	twi_tx(D0_I2C_ADDR);
	twi_tx(0x00);
	for( uint8_t idx = 0; idx < 8; idx++ ) {
 1ec:	d1 07       	cpc	r29, r17
 1ee:	b1 f7       	brne	.-20     	; 0x1dc <update+0x1a>
 1f0:	84 e9       	ldi	r24, 0x94	; 148
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 1f2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 1f6:	df 91       	pop	r29
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
}
 1f8:	cf 91       	pop	r28
 1fa:	1f 91       	pop	r17
 1fc:	0f 91       	pop	r16
 1fe:	08 95       	ret

00000200 <setStartLocation>:
 200:	cf 93       	push	r28
	
	//buf[x] = binary[y];
}


void setStartLocation(int x,int y){
 202:	df 93       	push	r29
 204:	c8 2f       	mov	r28, r24
 206:	d6 2f       	mov	r29, r22
	startLocation.x = x;
 208:	ec e0       	ldi	r30, 0x0C	; 12
 20a:	f1 e0       	ldi	r31, 0x01	; 1
 20c:	80 83       	st	Z, r24
 20e:	91 83       	std	Z+1, r25	; 0x01
	startLocation.y = y;
 210:	62 83       	std	Z+2, r22	; 0x02
 212:	73 83       	std	Z+3, r23	; 0x03
	
	locList = (locatieList *)malloc(sizeof(locatieList));
 214:	88 e0       	ldi	r24, 0x08	; 8
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	56 d2       	rcall	.+1196   	; 0x6c6 <malloc>
 21a:	fc 01       	movw	r30, r24
 21c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <locList+0x1>
 220:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <locList>
	locList->loc = startLocation;
 224:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <startLocation>
 228:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <startLocation+0x1>
 22c:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <startLocation+0x2>
 230:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <startLocation+0x3>
 234:	80 83       	st	Z, r24
 236:	91 83       	std	Z+1, r25	; 0x01
 238:	a2 83       	std	Z+2, r26	; 0x02
 23a:	b3 83       	std	Z+3, r27	; 0x03
	locList->number = counter;
 23c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
 240:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
 244:	35 83       	std	Z+5, r19	; 0x05
 246:	24 83       	std	Z+4, r18	; 0x04
	locList->next = NULL;
 248:	17 82       	std	Z+7, r1	; 0x07
 24a:	16 82       	std	Z+6, r1	; 0x06
	counter++;
 24c:	2f 5f       	subi	r18, 0xFF	; 255
 24e:	3f 4f       	sbci	r19, 0xFF	; 255
 250:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <__data_end+0x1>
 254:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__data_end>
	(x,y);
	displaySetPixel(x,y);
 258:	6d 2f       	mov	r22, r29
 25a:	8c 2f       	mov	r24, r28
	update();
 25c:	35 df       	rcall	.-406    	; 0xc8 <displaySetPixel>
 25e:	b1 df       	rcall	.-158    	; 0x1c2 <update>
}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <getSize>:
	TWCR = (0x80 | 0x04);
	while( 0 == (TWCR & 0x80) );
}

int getSize(){
	locatieList *p = locList;
 266:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <locList>
 26a:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <locList+0x1>
	int size = 0;
	while (p != NULL){
 26e:	30 97       	sbiw	r30, 0x00	; 0
 270:	49 f0       	breq	.+18     	; 0x284 <getSize+0x1e>
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
		size++;
 276:	01 96       	adiw	r24, 0x01	; 1
		p = p->next;
 278:	06 80       	ldd	r0, Z+6	; 0x06
 27a:	f7 81       	ldd	r31, Z+7	; 0x07
 27c:	e0 2d       	mov	r30, r0
}

int getSize(){
	locatieList *p = locList;
	int size = 0;
	while (p != NULL){
 27e:	30 97       	sbiw	r30, 0x00	; 0
 280:	d1 f7       	brne	.-12     	; 0x276 <getSize+0x10>
 282:	08 95       	ret
	while( 0 == (TWCR & 0x80) );
}

int getSize(){
	locatieList *p = locList;
	int size = 0;
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
	while (p != NULL){
		size++;
		p = p->next;
	}
	return size;
}
 288:	08 95       	ret

0000028a <addLocation>:

void addLocation(int x, int y){
 28a:	8f 92       	push	r8
 28c:	9f 92       	push	r9
 28e:	af 92       	push	r10
 290:	bf 92       	push	r11
 292:	cf 92       	push	r12
 294:	df 92       	push	r13
 296:	ef 92       	push	r14
 298:	ff 92       	push	r15
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	e8 2e       	mov	r14, r24
 2a4:	89 2e       	mov	r8, r25
 2a6:	f6 2e       	mov	r15, r22
 2a8:	97 2e       	mov	r9, r23
	int size = getSize();
 2aa:	dd df       	rcall	.-70     	; 0x266 <getSize>
	if(size < maxSize){
 2ac:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <maxSize>
 2b0:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <maxSize+0x1>
 2b4:	82 17       	cp	r24, r18
 2b6:	93 07       	cpc	r25, r19
 2b8:	5c f5       	brge	.+86     	; 0x310 <addLocation+0x86>
		displaySetPixel(x,y);
 2ba:	6f 2d       	mov	r22, r15
 2bc:	8e 2d       	mov	r24, r14
 2be:	04 df       	rcall	.-504    	; 0xc8 <displaySetPixel>
		locatieList *p = locList;
 2c0:	c0 91 0a 01 	lds	r28, 0x010A	; 0x80010a <locList>
 2c4:	d0 91 0b 01 	lds	r29, 0x010B	; 0x80010b <locList+0x1>
		while(p->next != NULL){
 2c8:	01 c0       	rjmp	.+2      	; 0x2cc <addLocation+0x42>
			p = p->next;
 2ca:	ec 01       	movw	r28, r24
void addLocation(int x, int y){
	int size = getSize();
	if(size < maxSize){
		displaySetPixel(x,y);
		locatieList *p = locList;
		while(p->next != NULL){
 2cc:	8e 81       	ldd	r24, Y+6	; 0x06
 2ce:	9f 81       	ldd	r25, Y+7	; 0x07
 2d0:	00 97       	sbiw	r24, 0x00	; 0
 2d2:	d9 f7       	brne	.-10     	; 0x2ca <addLocation+0x40>
			p = p->next;
		}
		locatie loc;
		loc.x = x;
		loc.y = y;
		locatieList *newLoc = (locatieList *)malloc(sizeof(locatieList));
 2d4:	88 e0       	ldi	r24, 0x08	; 8
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	f6 d1       	rcall	.+1004   	; 0x6c6 <malloc>
 2da:	fc 01       	movw	r30, r24
		newLoc->loc = loc;
 2dc:	e0 82       	st	Z, r14
 2de:	81 82       	std	Z+1, r8	; 0x01
 2e0:	f2 82       	std	Z+2, r15	; 0x02
 2e2:	93 82       	std	Z+3, r9	; 0x03
		newLoc->number = counter;
 2e4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2e8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 2ec:	95 83       	std	Z+5, r25	; 0x05
 2ee:	84 83       	std	Z+4, r24	; 0x04
		newLoc->next = NULL;
 2f0:	17 82       	std	Z+7, r1	; 0x07
 2f2:	16 82       	std	Z+6, r1	; 0x06
		p->next = newLoc;
 2f4:	ff 83       	std	Y+7, r31	; 0x07
 2f6:	ee 83       	std	Y+6, r30	; 0x06
		counter++;
 2f8:	01 96       	adiw	r24, 0x01	; 1
 2fa:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 2fe:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
		startLocation.x = x;
 302:	ec e0       	ldi	r30, 0x0C	; 12
 304:	f1 e0       	ldi	r31, 0x01	; 1
 306:	e0 82       	st	Z, r14
 308:	81 82       	std	Z+1, r8	; 0x01
		startLocation.y = y;
 30a:	f2 82       	std	Z+2, r15	; 0x02
 30c:	93 82       	std	Z+3, r9	; 0x03
	}else{
		//writeLedDisplay(2);
		displaySetPixel(x,y);
 30e:	72 c0       	rjmp	.+228    	; 0x3f4 <addLocation+0x16a>
 310:	6f 2d       	mov	r22, r15
 312:	8e 2d       	mov	r24, r14
 314:	d9 de       	rcall	.-590    	; 0xc8 <displaySetPixel>
		locatieList *p = locList;
 316:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <locList>
 31a:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <locList+0x1>
		int min = p->number;
 31e:	14 96       	adiw	r26, 0x04	; 4
 320:	4d 91       	ld	r20, X+
 322:	5c 91       	ld	r21, X
 324:	15 97       	sbiw	r26, 0x05	; 5
		int c = 0;
		int position;
		while(p->next != NULL){
 326:	16 96       	adiw	r26, 0x06	; 6
 328:	ed 91       	ld	r30, X+
 32a:	fc 91       	ld	r31, X
 32c:	17 97       	sbiw	r26, 0x07	; 7
 32e:	30 97       	sbiw	r30, 0x00	; 0
 330:	a1 f0       	breq	.+40     	; 0x35a <addLocation+0xd0>
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	01 c0       	rjmp	.+2      	; 0x33a <addLocation+0xb0>
 338:	fc 01       	movw	r30, r24
			if(p->number <= min){
 33a:	14 96       	adiw	r26, 0x04	; 4
 33c:	8d 91       	ld	r24, X+
 33e:	9c 91       	ld	r25, X
 340:	15 97       	sbiw	r26, 0x05	; 5
 342:	48 17       	cp	r20, r24
 344:	59 07       	cpc	r21, r25
 346:	14 f0       	brlt	.+4      	; 0x34c <addLocation+0xc2>
 348:	89 01       	movw	r16, r18
				min = p->number;
 34a:	ac 01       	movw	r20, r24
				position = c;
			}
			c++;
 34c:	2f 5f       	subi	r18, 0xFF	; 255
 34e:	3f 4f       	sbci	r19, 0xFF	; 255
		displaySetPixel(x,y);
		locatieList *p = locList;
		int min = p->number;
		int c = 0;
		int position;
		while(p->next != NULL){
 350:	86 81       	ldd	r24, Z+6	; 0x06
 352:	97 81       	ldd	r25, Z+7	; 0x07
 354:	df 01       	movw	r26, r30
 356:	00 97       	sbiw	r24, 0x00	; 0
				position = c;
			}
			c++;
			p = p->next;
		}
		writeLedDisplay(position);
 358:	79 f7       	brne	.-34     	; 0x338 <addLocation+0xae>
 35a:	c8 01       	movw	r24, r16
 35c:	de d0       	rcall	.+444    	; 0x51a <writeLedDisplay>
		p = locList;
 35e:	a0 90 0a 01 	lds	r10, 0x010A	; 0x80010a <locList>
 362:	b0 90 0b 01 	lds	r11, 0x010B	; 0x80010b <locList+0x1>
		c = 0;
		locatieList *newLoc = (locatieList *)malloc(sizeof(locatieList));
 366:	88 e0       	ldi	r24, 0x08	; 8
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	ad d1       	rcall	.+858    	; 0x6c6 <malloc>
 36c:	6c 01       	movw	r12, r24
		locatieList *pervLoc = NULL; 
		while(p->next != NULL){
 36e:	f5 01       	movw	r30, r10
 370:	c6 81       	ldd	r28, Z+6	; 0x06
 372:	d7 81       	ldd	r29, Z+7	; 0x07
 374:	20 97       	sbiw	r28, 0x00	; 0
 376:	09 f4       	brne	.+2      	; 0x37a <addLocation+0xf0>
 378:	3d c0       	rjmp	.+122    	; 0x3f4 <addLocation+0x16a>
			if(c == position){
 37a:	01 15       	cp	r16, r1
 37c:	11 05       	cpc	r17, r1
 37e:	39 f0       	breq	.+14     	; 0x38e <addLocation+0x104>
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	31 c0       	rjmp	.+98     	; 0x3e8 <addLocation+0x15e>
 386:	80 17       	cp	r24, r16
 388:	91 07       	cpc	r25, r17
 38a:	69 f5       	brne	.+90     	; 0x3e6 <addLocation+0x15c>
			}
			c++;
			p = p->next;
		}
		writeLedDisplay(position);
		p = locList;
 38c:	01 c0       	rjmp	.+2      	; 0x390 <addLocation+0x106>
		c = 0;
		locatieList *newLoc = (locatieList *)malloc(sizeof(locatieList));
		locatieList *pervLoc = NULL; 
		while(p->next != NULL){
			if(c == position){
				displayClrPixel(p->loc.x,p->loc.y);
 38e:	e5 01       	movw	r28, r10
 390:	6a 81       	ldd	r22, Y+2	; 0x02
 392:	88 81       	ld	r24, Y
 394:	a8 de       	rcall	.-688    	; 0xe6 <displayClrPixel>
				locatie loc;
				loc.x = x;
				loc.y = y;
				newLoc->loc = loc;
 396:	f6 01       	movw	r30, r12
 398:	e0 82       	st	Z, r14
 39a:	81 82       	std	Z+1, r8	; 0x01
 39c:	f2 82       	std	Z+2, r15	; 0x02
 39e:	93 82       	std	Z+3, r9	; 0x03
				newLoc->number = counter;
 3a0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 3a4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 3a8:	95 83       	std	Z+5, r25	; 0x05
 3aa:	84 83       	std	Z+4, r24	; 0x04
				newLoc->next = p->next;
 3ac:	2e 81       	ldd	r18, Y+6	; 0x06
 3ae:	3f 81       	ldd	r19, Y+7	; 0x07
 3b0:	37 83       	std	Z+7, r19	; 0x07
				counter++;
 3b2:	26 83       	std	Z+6, r18	; 0x06
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 3ba:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
				free(p);
 3be:	ce 01       	movw	r24, r28
 3c0:	1a d2       	rcall	.+1076   	; 0x7f6 <free>
				if(position == 0){
 3c2:	01 2b       	or	r16, r17
 3c4:	29 f4       	brne	.+10     	; 0x3d0 <addLocation+0x146>
					locList = newLoc;	
 3c6:	d0 92 0b 01 	sts	0x010B, r13	; 0x80010b <locList+0x1>
 3ca:	c0 92 0a 01 	sts	0x010A, r12	; 0x80010a <locList>
 3ce:	04 c0       	rjmp	.+8      	; 0x3d8 <addLocation+0x14e>
				}else{
					pervLoc->next = newLoc;
 3d0:	d0 92 07 00 	sts	0x0007, r13	; 0x800007 <__TEXT_REGION_LENGTH__+0x7e0007>
 3d4:	c0 92 06 00 	sts	0x0006, r12	; 0x800006 <__TEXT_REGION_LENGTH__+0x7e0006>
				}
				startLocation.x = x;
 3d8:	ec e0       	ldi	r30, 0x0C	; 12
 3da:	f1 e0       	ldi	r31, 0x01	; 1
 3dc:	e0 82       	st	Z, r14
 3de:	81 82       	std	Z+1, r8	; 0x01
				startLocation.y = y;
 3e0:	f2 82       	std	Z+2, r15	; 0x02
 3e2:	93 82       	std	Z+3, r9	; 0x03
 3e4:	07 c0       	rjmp	.+14     	; 0x3f4 <addLocation+0x16a>
		writeLedDisplay(position);
		p = locList;
		c = 0;
		locatieList *newLoc = (locatieList *)malloc(sizeof(locatieList));
		locatieList *pervLoc = NULL; 
		while(p->next != NULL){
 3e6:	e9 01       	movw	r28, r18
				startLocation.x = x;
				startLocation.y = y;
				break;
			}
			p = p->next;
			c++;
 3e8:	01 96       	adiw	r24, 0x01	; 1
		writeLedDisplay(position);
		p = locList;
		c = 0;
		locatieList *newLoc = (locatieList *)malloc(sizeof(locatieList));
		locatieList *pervLoc = NULL; 
		while(p->next != NULL){
 3ea:	2e 81       	ldd	r18, Y+6	; 0x06
 3ec:	3f 81       	ldd	r19, Y+7	; 0x07
 3ee:	21 15       	cp	r18, r1
 3f0:	31 05       	cpc	r19, r1
 3f2:	49 f6       	brne	.-110    	; 0x386 <addLocation+0xfc>
			}
			p = p->next;
			c++;
		}
	}
}
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	ff 90       	pop	r15
 3fe:	ef 90       	pop	r14
 400:	df 90       	pop	r13
 402:	cf 90       	pop	r12
 404:	bf 90       	pop	r11
 406:	af 90       	pop	r10
 408:	9f 90       	pop	r9
 40a:	8f 90       	pop	r8
 40c:	08 95       	ret

0000040e <moveUp>:
	


void moveUp(){
	
	int x = startLocation.x;
 40e:	ec e0       	ldi	r30, 0x0C	; 12
 410:	f1 e0       	ldi	r31, 0x01	; 1
 412:	80 81       	ld	r24, Z
 414:	91 81       	ldd	r25, Z+1	; 0x01
	int y = startLocation.y;
	
	x--;
	addLocation(x,y);
 416:	62 81       	ldd	r22, Z+2	; 0x02
 418:	73 81       	ldd	r23, Z+3	; 0x03
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	36 df       	rcall	.-404    	; 0x28a <addLocation>
	update();
 41e:	d1 ce       	rjmp	.-606    	; 0x1c2 <update>
 420:	08 95       	ret

00000422 <moveDown>:
 422:	ec e0       	ldi	r30, 0x0C	; 12
	
}
void moveDown(){
	int x = startLocation.x;
 424:	f1 e0       	ldi	r31, 0x01	; 1
 426:	80 81       	ld	r24, Z
 428:	91 81       	ldd	r25, Z+1	; 0x01
	int y = startLocation.y;
	
	x++;
	addLocation(x,y);
 42a:	62 81       	ldd	r22, Z+2	; 0x02
 42c:	73 81       	ldd	r23, Z+3	; 0x03
 42e:	01 96       	adiw	r24, 0x01	; 1
 430:	2c df       	rcall	.-424    	; 0x28a <addLocation>
	update();
 432:	c7 ce       	rjmp	.-626    	; 0x1c2 <update>
 434:	08 95       	ret

00000436 <moveLeft>:
 436:	ec e0       	ldi	r30, 0x0C	; 12
}

void moveLeft(){
	int x = startLocation.x;
	int y = startLocation.y;
 438:	f1 e0       	ldi	r31, 0x01	; 1
 43a:	62 81       	ldd	r22, Z+2	; 0x02
 43c:	73 81       	ldd	r23, Z+3	; 0x03

	y++;
	addLocation(x,y);
 43e:	6f 5f       	subi	r22, 0xFF	; 255
 440:	7f 4f       	sbci	r23, 0xFF	; 255
 442:	80 81       	ld	r24, Z
 444:	91 81       	ldd	r25, Z+1	; 0x01
 446:	21 df       	rcall	.-446    	; 0x28a <addLocation>
	update();
 448:	bc ce       	rjmp	.-648    	; 0x1c2 <update>
 44a:	08 95       	ret

0000044c <moveRight>:
 44c:	ec e0       	ldi	r30, 0x0C	; 12
}

void moveRight(){
	int x = startLocation.x;
	int y = startLocation.y;
 44e:	f1 e0       	ldi	r31, 0x01	; 1
 450:	62 81       	ldd	r22, Z+2	; 0x02
 452:	73 81       	ldd	r23, Z+3	; 0x03
	
	y--;
	addLocation(x,y);
 454:	61 50       	subi	r22, 0x01	; 1
 456:	71 09       	sbc	r23, r1
 458:	80 81       	ld	r24, Z
 45a:	91 81       	ldd	r25, Z+1	; 0x01
 45c:	16 df       	rcall	.-468    	; 0x28a <addLocation>
	update();
 45e:	b1 ce       	rjmp	.-670    	; 0x1c2 <update>
 460:	08 95       	ret

00000462 <spi_masterInit>:
 462:	8f ef       	ldi	r24, 0xFF	; 255
void displayOff(void)
{
	spi_slaveSelect(0);		// Select display chip
	spi_write(0x0C);		// Register 0B: Shutdown register
	spi_write(0x00);		// -> 1 = Normal operation
	spi_slaveDeSelect(0);	// Deselect display chip
 464:	87 bb       	out	0x17, r24	; 23
 466:	bb 98       	cbi	0x17, 3	; 23
 468:	c0 9a       	sbi	0x18, 0	; 24
 46a:	82 e5       	ldi	r24, 0x52	; 82
 46c:	8d b9       	out	0x0d, r24	; 13
 46e:	08 95       	ret

00000470 <spi_write>:
 470:	8f b9       	out	0x0f, r24	; 15
 472:	77 9b       	sbis	0x0e, 7	; 14
 474:	fe cf       	rjmp	.-4      	; 0x472 <spi_write+0x2>
 476:	08 95       	ret

00000478 <spi_slaveSelect>:
 478:	98 b3       	in	r25, 0x18	; 24
 47a:	21 e0       	ldi	r18, 0x01	; 1
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	02 c0       	rjmp	.+4      	; 0x484 <spi_slaveSelect+0xc>
 480:	22 0f       	add	r18, r18
 482:	33 1f       	adc	r19, r19
 484:	8a 95       	dec	r24
 486:	e2 f7       	brpl	.-8      	; 0x480 <spi_slaveSelect+0x8>
 488:	20 95       	com	r18
 48a:	29 23       	and	r18, r25
 48c:	28 bb       	out	0x18, r18	; 24
 48e:	08 95       	ret

00000490 <spi_slaveDeSelect>:
 490:	98 b3       	in	r25, 0x18	; 24
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <spi_slaveDeSelect+0xc>
 498:	22 0f       	add	r18, r18
 49a:	33 1f       	adc	r19, r19
 49c:	8a 95       	dec	r24
 49e:	e2 f7       	brpl	.-8      	; 0x498 <spi_slaveDeSelect+0x8>
 4a0:	29 2b       	or	r18, r25
 4a2:	28 bb       	out	0x18, r18	; 24
 4a4:	08 95       	ret

000004a6 <displayDriverInit>:
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	e7 df       	rcall	.-50     	; 0x478 <spi_slaveSelect>
 4aa:	89 e0       	ldi	r24, 0x09	; 9
 4ac:	e1 df       	rcall	.-62     	; 0x470 <spi_write>
 4ae:	8f ef       	ldi	r24, 0xFF	; 255
 4b0:	df df       	rcall	.-66     	; 0x470 <spi_write>
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	ed df       	rcall	.-38     	; 0x490 <spi_slaveDeSelect>
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	df df       	rcall	.-66     	; 0x478 <spi_slaveSelect>
 4ba:	8a e0       	ldi	r24, 0x0A	; 10
 4bc:	d9 df       	rcall	.-78     	; 0x470 <spi_write>
 4be:	8f e0       	ldi	r24, 0x0F	; 15
 4c0:	d7 df       	rcall	.-82     	; 0x470 <spi_write>
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	e5 df       	rcall	.-54     	; 0x490 <spi_slaveDeSelect>
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	d7 df       	rcall	.-82     	; 0x478 <spi_slaveSelect>
 4ca:	8b e0       	ldi	r24, 0x0B	; 11
 4cc:	d1 df       	rcall	.-94     	; 0x470 <spi_write>
 4ce:	83 e0       	ldi	r24, 0x03	; 3
 4d0:	cf df       	rcall	.-98     	; 0x470 <spi_write>
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	dd df       	rcall	.-70     	; 0x490 <spi_slaveDeSelect>
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	cf df       	rcall	.-98     	; 0x478 <spi_slaveSelect>
 4da:	8c e0       	ldi	r24, 0x0C	; 12
 4dc:	c9 df       	rcall	.-110    	; 0x470 <spi_write>
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	c7 df       	rcall	.-114    	; 0x470 <spi_write>
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	d5 cf       	rjmp	.-86     	; 0x490 <spi_slaveDeSelect>
 4e6:	08 95       	ret

000004e8 <spi_writeWord>:
}

void spi_writeWord(unsigned char adress, unsigned char data )
{
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	d8 2f       	mov	r29, r24
 4ee:	c6 2f       	mov	r28, r22
	spi_slaveSelect(0);		// Select display chip
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	c2 df       	rcall	.-124    	; 0x478 <spi_slaveSelect>
	spi_write(adress);		// digit adress: (digit place)
 4f4:	8d 2f       	mov	r24, r29
 4f6:	bc df       	rcall	.-136    	; 0x470 <spi_write>
	spi_write(data);		// digit value: 0
 4f8:	8c 2f       	mov	r24, r28
 4fa:	ba df       	rcall	.-140    	; 0x470 <spi_write>
	spi_slaveDeSelect(0);	// Deselect display chip
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	c8 df       	rcall	.-112    	; 0x490 <spi_slaveDeSelect>
 500:	df 91       	pop	r29
}
 502:	cf 91       	pop	r28
 504:	08 95       	ret

00000506 <clearDisplay>:
 506:	cf 93       	push	r28
	}
}

void clearDisplay(void)
{
	for (char i =1; i<=4; i++)
 508:	c1 e0       	ldi	r28, 0x01	; 1
	{
		spi_writeWord(i, 0);
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	8c 2f       	mov	r24, r28
 50e:	ec df       	rcall	.-40     	; 0x4e8 <spi_writeWord>
	}
}

void clearDisplay(void)
{
	for (char i =1; i<=4; i++)
 510:	cf 5f       	subi	r28, 0xFF	; 255
 512:	c5 30       	cpi	r28, 0x05	; 5
 514:	d1 f7       	brne	.-12     	; 0x50a <clearDisplay+0x4>
	{
		spi_writeWord(i, 0);
	}
}
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <writeLedDisplay>:
	spi_write(data);		// digit value: 0
	spi_slaveDeSelect(0);	// Deselect display chip
}

void writeLedDisplay(int value)
{
 51a:	0f 93       	push	r16
 51c:	1f 93       	push	r17
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	08 2f       	mov	r16, r24
 524:	19 2f       	mov	r17, r25
	clearDisplay();
 526:	ef df       	rcall	.-34     	; 0x506 <clearDisplay>
 528:	c0 2f       	mov	r28, r16
 52a:	d1 2f       	mov	r29, r17
 52c:	c0 31       	cpi	r28, 0x10	; 16
 52e:	87 e2       	ldi	r24, 0x27	; 39
 530:	d8 07       	cpc	r29, r24
 532:	14 f0       	brlt	.+4      	; 0x538 <writeLedDisplay+0x1e>
 534:	cf e0       	ldi	r28, 0x0F	; 15
 536:	d7 e2       	ldi	r29, 0x27	; 39
	if(value > 9999){
		value = 9999;
	}
	if(value < 0)
 538:	dd 23       	and	r29, r29
 53a:	54 f5       	brge	.+84     	; 0x590 <writeLedDisplay+0x76>
		if(value < -999)
		{
			value = -999;
		}

		int tempValue = abs(value);
 53c:	c9 31       	cpi	r28, 0x19	; 25
 53e:	8c ef       	ldi	r24, 0xFC	; 252
 540:	d8 07       	cpc	r29, r24
 542:	14 f4       	brge	.+4      	; 0x548 <writeLedDisplay+0x2e>
 544:	c9 e1       	ldi	r28, 0x19	; 25
 546:	dc ef       	ldi	r29, 0xFC	; 252
 548:	8e 01       	movw	r16, r28
 54a:	dd 23       	and	r29, r29
 54c:	24 f4       	brge	.+8      	; 0x556 <writeLedDisplay+0x3c>
 54e:	00 27       	eor	r16, r16
 550:	11 27       	eor	r17, r17
 552:	0c 1b       	sub	r16, r28
 554:	1d 0b       	sbc	r17, r29
		int num3 = (tempValue / 1) % 10;
		int num2 = (tempValue / 10) % 10;
		int num1 = (tempValue / 100) % 10;

		spi_writeWord(4, 10);
 556:	6a e0       	ldi	r22, 0x0A	; 10
 558:	84 e0       	ldi	r24, 0x04	; 4
 55a:	c6 df       	rcall	.-116    	; 0x4e8 <spi_writeWord>
		spi_writeWord(3, num1);
 55c:	c8 01       	movw	r24, r16
 55e:	64 e6       	ldi	r22, 0x64	; 100
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	8a d0       	rcall	.+276    	; 0x678 <__divmodhi4>
 564:	cb 01       	movw	r24, r22
 566:	ca e0       	ldi	r28, 0x0A	; 10
 568:	d0 e0       	ldi	r29, 0x00	; 0
 56a:	be 01       	movw	r22, r28
 56c:	85 d0       	rcall	.+266    	; 0x678 <__divmodhi4>
 56e:	68 2f       	mov	r22, r24
 570:	83 e0       	ldi	r24, 0x03	; 3
 572:	ba df       	rcall	.-140    	; 0x4e8 <spi_writeWord>
		spi_writeWord(2, num2);
 574:	c8 01       	movw	r24, r16
 576:	be 01       	movw	r22, r28
 578:	7f d0       	rcall	.+254    	; 0x678 <__divmodhi4>
 57a:	18 2f       	mov	r17, r24
 57c:	cb 01       	movw	r24, r22
 57e:	be 01       	movw	r22, r28
 580:	7b d0       	rcall	.+246    	; 0x678 <__divmodhi4>
 582:	68 2f       	mov	r22, r24
 584:	82 e0       	ldi	r24, 0x02	; 2
 586:	b0 df       	rcall	.-160    	; 0x4e8 <spi_writeWord>
		spi_writeWord(1, num3);
 588:	61 2f       	mov	r22, r17
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	ad df       	rcall	.-166    	; 0x4e8 <spi_writeWord>
 58e:	23 c0       	rjmp	.+70     	; 0x5d6 <writeLedDisplay+0xbc>
		int num4 = (value / 1) % 10;
		int num3 = (value / 10) % 10;
		int num2 = (value / 100) % 10;
		int num1 = (value / 1000) % 10;

		spi_writeWord(4, num1);
 590:	ce 01       	movw	r24, r28
 592:	68 ee       	ldi	r22, 0xE8	; 232
 594:	73 e0       	ldi	r23, 0x03	; 3
 596:	70 d0       	rcall	.+224    	; 0x678 <__divmodhi4>
 598:	cb 01       	movw	r24, r22
 59a:	0a e0       	ldi	r16, 0x0A	; 10
 59c:	10 e0       	ldi	r17, 0x00	; 0
 59e:	b8 01       	movw	r22, r16
 5a0:	6b d0       	rcall	.+214    	; 0x678 <__divmodhi4>
 5a2:	68 2f       	mov	r22, r24
 5a4:	84 e0       	ldi	r24, 0x04	; 4
 5a6:	a0 df       	rcall	.-192    	; 0x4e8 <spi_writeWord>
		spi_writeWord(3, num2);
 5a8:	ce 01       	movw	r24, r28
 5aa:	64 e6       	ldi	r22, 0x64	; 100
 5ac:	70 e0       	ldi	r23, 0x00	; 0
 5ae:	64 d0       	rcall	.+200    	; 0x678 <__divmodhi4>
 5b0:	cb 01       	movw	r24, r22
 5b2:	b8 01       	movw	r22, r16
 5b4:	61 d0       	rcall	.+194    	; 0x678 <__divmodhi4>
 5b6:	68 2f       	mov	r22, r24
 5b8:	83 e0       	ldi	r24, 0x03	; 3
 5ba:	96 df       	rcall	.-212    	; 0x4e8 <spi_writeWord>
		spi_writeWord(2, num3);
 5bc:	ce 01       	movw	r24, r28
 5be:	b8 01       	movw	r22, r16
 5c0:	5b d0       	rcall	.+182    	; 0x678 <__divmodhi4>
 5c2:	c8 2f       	mov	r28, r24
 5c4:	cb 01       	movw	r24, r22
 5c6:	b8 01       	movw	r22, r16
 5c8:	57 d0       	rcall	.+174    	; 0x678 <__divmodhi4>
 5ca:	68 2f       	mov	r22, r24
 5cc:	82 e0       	ldi	r24, 0x02	; 2
 5ce:	8c df       	rcall	.-232    	; 0x4e8 <spi_writeWord>
 5d0:	6c 2f       	mov	r22, r28
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	89 df       	rcall	.-238    	; 0x4e8 <spi_writeWord>
		spi_writeWord(1, num4);
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	1f 91       	pop	r17
 5dc:	0f 91       	pop	r16
	}
}
 5de:	08 95       	ret

000005e0 <main>:


int main(void)
{
	//initializatie voor het scoreBord
	DDRB=0x01;					// Set PB0 pin as output for display select
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	87 bb       	out	0x17, r24	; 23
	spi_masterInit();			// Initialize spi module
 5e4:	3e df       	rcall	.-388    	; 0x462 <spi_masterInit>
	displayDriverInit();		// Initialize display chip
 5e6:	5f df       	rcall	.-322    	; 0x4a6 <displayDriverInit>
	
	displayInit();
 5e8:	e4 dd       	rcall	.-1080   	; 0x1b2 <displayInit>
	wait(500);
 5ea:	84 ef       	ldi	r24, 0xF4	; 244
 5ec:	91 e0       	ldi	r25, 0x01	; 1
 5ee:	33 d0       	rcall	.+102    	; 0x656 <wait>
 5f0:	8f e0       	ldi	r24, 0x0F	; 15
	DDRA = 0x0F;
 5f2:	8a bb       	out	0x1a, r24	; 26
 5f4:	64 e0       	ldi	r22, 0x04	; 4

	setStartLocation(4,4);
 5f6:	70 e0       	ldi	r23, 0x00	; 0
 5f8:	84 e0       	ldi	r24, 0x04	; 4
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	01 de       	rcall	.-1022   	; 0x200 <setStartLocation>
	wait(1000);
 5fe:	88 ee       	ldi	r24, 0xE8	; 232
 600:	93 e0       	ldi	r25, 0x03	; 3
	//int left=0;
	//int right=1;
	//}
	//wait(1000);
	//}
	moveDown();
 602:	29 d0       	rcall	.+82     	; 0x656 <wait>
	wait(1000);
 604:	0e df       	rcall	.-484    	; 0x422 <moveDown>
 606:	88 ee       	ldi	r24, 0xE8	; 232
 608:	93 e0       	ldi	r25, 0x03	; 3
	
	moveDown();
 60a:	25 d0       	rcall	.+74     	; 0x656 <wait>
	wait(1000);
 60c:	0a df       	rcall	.-492    	; 0x422 <moveDown>
 60e:	88 ee       	ldi	r24, 0xE8	; 232
	
	moveLeft();
 610:	93 e0       	ldi	r25, 0x03	; 3
	wait(1000);
 612:	21 d0       	rcall	.+66     	; 0x656 <wait>
 614:	10 df       	rcall	.-480    	; 0x436 <moveLeft>
 616:	88 ee       	ldi	r24, 0xE8	; 232
	
	moveLeft();
 618:	93 e0       	ldi	r25, 0x03	; 3
	wait(1000);
 61a:	1d d0       	rcall	.+58     	; 0x656 <wait>
 61c:	0c df       	rcall	.-488    	; 0x436 <moveLeft>
	
	moveUp();
 61e:	88 ee       	ldi	r24, 0xE8	; 232
	wait(1000);
 620:	93 e0       	ldi	r25, 0x03	; 3
 622:	19 d0       	rcall	.+50     	; 0x656 <wait>
 624:	f4 de       	rcall	.-536    	; 0x40e <moveUp>
	
	moveUp();
 626:	88 ee       	ldi	r24, 0xE8	; 232
	wait(1000);
 628:	93 e0       	ldi	r25, 0x03	; 3
 62a:	15 d0       	rcall	.+42     	; 0x656 <wait>
 62c:	f0 de       	rcall	.-544    	; 0x40e <moveUp>
	
	moveRight();
 62e:	88 ee       	ldi	r24, 0xE8	; 232
 630:	93 e0       	ldi	r25, 0x03	; 3
	wait(1000);
 632:	11 d0       	rcall	.+34     	; 0x656 <wait>
 634:	0b df       	rcall	.-490    	; 0x44c <moveRight>
 636:	88 ee       	ldi	r24, 0xE8	; 232
 638:	93 e0       	ldi	r25, 0x03	; 3
	
	moveRight();
 63a:	0d d0       	rcall	.+26     	; 0x656 <wait>
 63c:	07 df       	rcall	.-498    	; 0x44c <moveRight>
	wait(1000);
 63e:	88 ee       	ldi	r24, 0xE8	; 232
 640:	93 e0       	ldi	r25, 0x03	; 3
 642:	09 d0       	rcall	.+18     	; 0x656 <wait>
 644:	03 df       	rcall	.-506    	; 0x44c <moveRight>
	
	moveRight();
 646:	88 ee       	ldi	r24, 0xE8	; 232
 648:	93 e0       	ldi	r25, 0x03	; 3
	wait(1000);
 64a:	05 d0       	rcall	.+10     	; 0x656 <wait>
 64c:	ff de       	rcall	.-514    	; 0x44c <moveRight>
 64e:	88 ee       	ldi	r24, 0xE8	; 232
 650:	93 e0       	ldi	r25, 0x03	; 3
	
	moveRight();
 652:	01 d0       	rcall	.+2      	; 0x656 <wait>
 654:	ff cf       	rjmp	.-2      	; 0x654 <main+0x74>

00000656 <wait>:
#include <avr/io.h>
#include <util/delay.h>

void wait( int ms )
{
	for (int i=0; i<ms; i++)
 656:	18 16       	cp	r1, r24
 658:	19 06       	cpc	r1, r25
 65a:	6c f4       	brge	.+26     	; 0x676 <wait+0x20>
 65c:	20 e0       	ldi	r18, 0x00	; 0
 65e:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 660:	ef ec       	ldi	r30, 0xCF	; 207
 662:	f7 e0       	ldi	r31, 0x07	; 7
 664:	31 97       	sbiw	r30, 0x01	; 1
 666:	f1 f7       	brne	.-4      	; 0x664 <wait+0xe>
 668:	00 c0       	rjmp	.+0      	; 0x66a <wait+0x14>
 66a:	00 00       	nop
 66c:	2f 5f       	subi	r18, 0xFF	; 255
 66e:	3f 4f       	sbci	r19, 0xFF	; 255
 670:	82 17       	cp	r24, r18
 672:	93 07       	cpc	r25, r19
 674:	a9 f7       	brne	.-22     	; 0x660 <wait+0xa>
 676:	08 95       	ret

00000678 <__divmodhi4>:
 678:	97 fb       	bst	r25, 7
 67a:	07 2e       	mov	r0, r23
 67c:	16 f4       	brtc	.+4      	; 0x682 <__divmodhi4+0xa>
 67e:	00 94       	com	r0
 680:	06 d0       	rcall	.+12     	; 0x68e <__divmodhi4_neg1>
 682:	77 fd       	sbrc	r23, 7
 684:	08 d0       	rcall	.+16     	; 0x696 <__divmodhi4_neg2>
 686:	0b d0       	rcall	.+22     	; 0x69e <__udivmodhi4>
 688:	07 fc       	sbrc	r0, 7
 68a:	05 d0       	rcall	.+10     	; 0x696 <__divmodhi4_neg2>
 68c:	3e f4       	brtc	.+14     	; 0x69c <__divmodhi4_exit>

0000068e <__divmodhi4_neg1>:
 68e:	90 95       	com	r25
 690:	81 95       	neg	r24
 692:	9f 4f       	sbci	r25, 0xFF	; 255
 694:	08 95       	ret

00000696 <__divmodhi4_neg2>:
 696:	70 95       	com	r23
 698:	61 95       	neg	r22
 69a:	7f 4f       	sbci	r23, 0xFF	; 255

0000069c <__divmodhi4_exit>:
 69c:	08 95       	ret

0000069e <__udivmodhi4>:
 69e:	aa 1b       	sub	r26, r26
 6a0:	bb 1b       	sub	r27, r27
 6a2:	51 e1       	ldi	r21, 0x11	; 17
 6a4:	07 c0       	rjmp	.+14     	; 0x6b4 <__udivmodhi4_ep>

000006a6 <__udivmodhi4_loop>:
 6a6:	aa 1f       	adc	r26, r26
 6a8:	bb 1f       	adc	r27, r27
 6aa:	a6 17       	cp	r26, r22
 6ac:	b7 07       	cpc	r27, r23
 6ae:	10 f0       	brcs	.+4      	; 0x6b4 <__udivmodhi4_ep>
 6b0:	a6 1b       	sub	r26, r22
 6b2:	b7 0b       	sbc	r27, r23

000006b4 <__udivmodhi4_ep>:
 6b4:	88 1f       	adc	r24, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	5a 95       	dec	r21
 6ba:	a9 f7       	brne	.-22     	; 0x6a6 <__udivmodhi4_loop>
 6bc:	80 95       	com	r24
 6be:	90 95       	com	r25
 6c0:	bc 01       	movw	r22, r24
 6c2:	cd 01       	movw	r24, r26
 6c4:	08 95       	ret

000006c6 <malloc>:
 6c6:	0f 93       	push	r16
 6c8:	1f 93       	push	r17
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
 6ce:	82 30       	cpi	r24, 0x02	; 2
 6d0:	91 05       	cpc	r25, r1
 6d2:	10 f4       	brcc	.+4      	; 0x6d8 <malloc+0x12>
 6d4:	82 e0       	ldi	r24, 0x02	; 2
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <__flp>
 6dc:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <__flp+0x1>
 6e0:	20 e0       	ldi	r18, 0x00	; 0
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	a0 e0       	ldi	r26, 0x00	; 0
 6e6:	b0 e0       	ldi	r27, 0x00	; 0
 6e8:	30 97       	sbiw	r30, 0x00	; 0
 6ea:	19 f1       	breq	.+70     	; 0x732 <malloc+0x6c>
 6ec:	40 81       	ld	r20, Z
 6ee:	51 81       	ldd	r21, Z+1	; 0x01
 6f0:	02 81       	ldd	r16, Z+2	; 0x02
 6f2:	13 81       	ldd	r17, Z+3	; 0x03
 6f4:	48 17       	cp	r20, r24
 6f6:	59 07       	cpc	r21, r25
 6f8:	c8 f0       	brcs	.+50     	; 0x72c <malloc+0x66>
 6fa:	84 17       	cp	r24, r20
 6fc:	95 07       	cpc	r25, r21
 6fe:	69 f4       	brne	.+26     	; 0x71a <malloc+0x54>
 700:	10 97       	sbiw	r26, 0x00	; 0
 702:	31 f0       	breq	.+12     	; 0x710 <malloc+0x4a>
 704:	12 96       	adiw	r26, 0x02	; 2
 706:	0c 93       	st	X, r16
 708:	12 97       	sbiw	r26, 0x02	; 2
 70a:	13 96       	adiw	r26, 0x03	; 3
 70c:	1c 93       	st	X, r17
 70e:	27 c0       	rjmp	.+78     	; 0x75e <malloc+0x98>
 710:	00 93 1a 01 	sts	0x011A, r16	; 0x80011a <__flp>
 714:	10 93 1b 01 	sts	0x011B, r17	; 0x80011b <__flp+0x1>
 718:	22 c0       	rjmp	.+68     	; 0x75e <malloc+0x98>
 71a:	21 15       	cp	r18, r1
 71c:	31 05       	cpc	r19, r1
 71e:	19 f0       	breq	.+6      	; 0x726 <malloc+0x60>
 720:	42 17       	cp	r20, r18
 722:	53 07       	cpc	r21, r19
 724:	18 f4       	brcc	.+6      	; 0x72c <malloc+0x66>
 726:	9a 01       	movw	r18, r20
 728:	bd 01       	movw	r22, r26
 72a:	ef 01       	movw	r28, r30
 72c:	df 01       	movw	r26, r30
 72e:	f8 01       	movw	r30, r16
 730:	db cf       	rjmp	.-74     	; 0x6e8 <malloc+0x22>
 732:	21 15       	cp	r18, r1
 734:	31 05       	cpc	r19, r1
 736:	f9 f0       	breq	.+62     	; 0x776 <malloc+0xb0>
 738:	28 1b       	sub	r18, r24
 73a:	39 0b       	sbc	r19, r25
 73c:	24 30       	cpi	r18, 0x04	; 4
 73e:	31 05       	cpc	r19, r1
 740:	80 f4       	brcc	.+32     	; 0x762 <malloc+0x9c>
 742:	8a 81       	ldd	r24, Y+2	; 0x02
 744:	9b 81       	ldd	r25, Y+3	; 0x03
 746:	61 15       	cp	r22, r1
 748:	71 05       	cpc	r23, r1
 74a:	21 f0       	breq	.+8      	; 0x754 <malloc+0x8e>
 74c:	fb 01       	movw	r30, r22
 74e:	93 83       	std	Z+3, r25	; 0x03
 750:	82 83       	std	Z+2, r24	; 0x02
 752:	04 c0       	rjmp	.+8      	; 0x75c <malloc+0x96>
 754:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__flp+0x1>
 758:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__flp>
 75c:	fe 01       	movw	r30, r28
 75e:	32 96       	adiw	r30, 0x02	; 2
 760:	44 c0       	rjmp	.+136    	; 0x7ea <malloc+0x124>
 762:	fe 01       	movw	r30, r28
 764:	e2 0f       	add	r30, r18
 766:	f3 1f       	adc	r31, r19
 768:	81 93       	st	Z+, r24
 76a:	91 93       	st	Z+, r25
 76c:	22 50       	subi	r18, 0x02	; 2
 76e:	31 09       	sbc	r19, r1
 770:	39 83       	std	Y+1, r19	; 0x01
 772:	28 83       	st	Y, r18
 774:	3a c0       	rjmp	.+116    	; 0x7ea <malloc+0x124>
 776:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__brkval>
 77a:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__brkval+0x1>
 77e:	23 2b       	or	r18, r19
 780:	41 f4       	brne	.+16     	; 0x792 <malloc+0xcc>
 782:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 786:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 78a:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <__brkval+0x1>
 78e:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <__brkval>
 792:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 796:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 79a:	21 15       	cp	r18, r1
 79c:	31 05       	cpc	r19, r1
 79e:	41 f4       	brne	.+16     	; 0x7b0 <malloc+0xea>
 7a0:	2d b7       	in	r18, 0x3d	; 61
 7a2:	3e b7       	in	r19, 0x3e	; 62
 7a4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 7a8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 7ac:	24 1b       	sub	r18, r20
 7ae:	35 0b       	sbc	r19, r21
 7b0:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <__brkval>
 7b4:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <__brkval+0x1>
 7b8:	e2 17       	cp	r30, r18
 7ba:	f3 07       	cpc	r31, r19
 7bc:	a0 f4       	brcc	.+40     	; 0x7e6 <malloc+0x120>
 7be:	2e 1b       	sub	r18, r30
 7c0:	3f 0b       	sbc	r19, r31
 7c2:	28 17       	cp	r18, r24
 7c4:	39 07       	cpc	r19, r25
 7c6:	78 f0       	brcs	.+30     	; 0x7e6 <malloc+0x120>
 7c8:	ac 01       	movw	r20, r24
 7ca:	4e 5f       	subi	r20, 0xFE	; 254
 7cc:	5f 4f       	sbci	r21, 0xFF	; 255
 7ce:	24 17       	cp	r18, r20
 7d0:	35 07       	cpc	r19, r21
 7d2:	48 f0       	brcs	.+18     	; 0x7e6 <malloc+0x120>
 7d4:	4e 0f       	add	r20, r30
 7d6:	5f 1f       	adc	r21, r31
 7d8:	50 93 19 01 	sts	0x0119, r21	; 0x800119 <__brkval+0x1>
 7dc:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <__brkval>
 7e0:	81 93       	st	Z+, r24
 7e2:	91 93       	st	Z+, r25
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <malloc+0x124>
 7e6:	e0 e0       	ldi	r30, 0x00	; 0
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	cf 01       	movw	r24, r30
 7ec:	df 91       	pop	r29
 7ee:	cf 91       	pop	r28
 7f0:	1f 91       	pop	r17
 7f2:	0f 91       	pop	r16
 7f4:	08 95       	ret

000007f6 <free>:
 7f6:	cf 93       	push	r28
 7f8:	df 93       	push	r29
 7fa:	00 97       	sbiw	r24, 0x00	; 0
 7fc:	09 f4       	brne	.+2      	; 0x800 <free+0xa>
 7fe:	81 c0       	rjmp	.+258    	; 0x902 <free+0x10c>
 800:	fc 01       	movw	r30, r24
 802:	32 97       	sbiw	r30, 0x02	; 2
 804:	13 82       	std	Z+3, r1	; 0x03
 806:	12 82       	std	Z+2, r1	; 0x02
 808:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__flp>
 80c:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__flp+0x1>
 810:	10 97       	sbiw	r26, 0x00	; 0
 812:	81 f4       	brne	.+32     	; 0x834 <free+0x3e>
 814:	20 81       	ld	r18, Z
 816:	31 81       	ldd	r19, Z+1	; 0x01
 818:	82 0f       	add	r24, r18
 81a:	93 1f       	adc	r25, r19
 81c:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__brkval>
 820:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__brkval+0x1>
 824:	28 17       	cp	r18, r24
 826:	39 07       	cpc	r19, r25
 828:	51 f5       	brne	.+84     	; 0x87e <free+0x88>
 82a:	f0 93 19 01 	sts	0x0119, r31	; 0x800119 <__brkval+0x1>
 82e:	e0 93 18 01 	sts	0x0118, r30	; 0x800118 <__brkval>
 832:	67 c0       	rjmp	.+206    	; 0x902 <free+0x10c>
 834:	ed 01       	movw	r28, r26
 836:	20 e0       	ldi	r18, 0x00	; 0
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	ce 17       	cp	r28, r30
 83c:	df 07       	cpc	r29, r31
 83e:	40 f4       	brcc	.+16     	; 0x850 <free+0x5a>
 840:	4a 81       	ldd	r20, Y+2	; 0x02
 842:	5b 81       	ldd	r21, Y+3	; 0x03
 844:	9e 01       	movw	r18, r28
 846:	41 15       	cp	r20, r1
 848:	51 05       	cpc	r21, r1
 84a:	f1 f0       	breq	.+60     	; 0x888 <free+0x92>
 84c:	ea 01       	movw	r28, r20
 84e:	f5 cf       	rjmp	.-22     	; 0x83a <free+0x44>
 850:	d3 83       	std	Z+3, r29	; 0x03
 852:	c2 83       	std	Z+2, r28	; 0x02
 854:	40 81       	ld	r20, Z
 856:	51 81       	ldd	r21, Z+1	; 0x01
 858:	84 0f       	add	r24, r20
 85a:	95 1f       	adc	r25, r21
 85c:	c8 17       	cp	r28, r24
 85e:	d9 07       	cpc	r29, r25
 860:	59 f4       	brne	.+22     	; 0x878 <free+0x82>
 862:	88 81       	ld	r24, Y
 864:	99 81       	ldd	r25, Y+1	; 0x01
 866:	84 0f       	add	r24, r20
 868:	95 1f       	adc	r25, r21
 86a:	02 96       	adiw	r24, 0x02	; 2
 86c:	91 83       	std	Z+1, r25	; 0x01
 86e:	80 83       	st	Z, r24
 870:	8a 81       	ldd	r24, Y+2	; 0x02
 872:	9b 81       	ldd	r25, Y+3	; 0x03
 874:	93 83       	std	Z+3, r25	; 0x03
 876:	82 83       	std	Z+2, r24	; 0x02
 878:	21 15       	cp	r18, r1
 87a:	31 05       	cpc	r19, r1
 87c:	29 f4       	brne	.+10     	; 0x888 <free+0x92>
 87e:	f0 93 1b 01 	sts	0x011B, r31	; 0x80011b <__flp+0x1>
 882:	e0 93 1a 01 	sts	0x011A, r30	; 0x80011a <__flp>
 886:	3d c0       	rjmp	.+122    	; 0x902 <free+0x10c>
 888:	e9 01       	movw	r28, r18
 88a:	fb 83       	std	Y+3, r31	; 0x03
 88c:	ea 83       	std	Y+2, r30	; 0x02
 88e:	49 91       	ld	r20, Y+
 890:	59 91       	ld	r21, Y+
 892:	c4 0f       	add	r28, r20
 894:	d5 1f       	adc	r29, r21
 896:	ec 17       	cp	r30, r28
 898:	fd 07       	cpc	r31, r29
 89a:	61 f4       	brne	.+24     	; 0x8b4 <free+0xbe>
 89c:	80 81       	ld	r24, Z
 89e:	91 81       	ldd	r25, Z+1	; 0x01
 8a0:	84 0f       	add	r24, r20
 8a2:	95 1f       	adc	r25, r21
 8a4:	02 96       	adiw	r24, 0x02	; 2
 8a6:	e9 01       	movw	r28, r18
 8a8:	99 83       	std	Y+1, r25	; 0x01
 8aa:	88 83       	st	Y, r24
 8ac:	82 81       	ldd	r24, Z+2	; 0x02
 8ae:	93 81       	ldd	r25, Z+3	; 0x03
 8b0:	9b 83       	std	Y+3, r25	; 0x03
 8b2:	8a 83       	std	Y+2, r24	; 0x02
 8b4:	e0 e0       	ldi	r30, 0x00	; 0
 8b6:	f0 e0       	ldi	r31, 0x00	; 0
 8b8:	12 96       	adiw	r26, 0x02	; 2
 8ba:	8d 91       	ld	r24, X+
 8bc:	9c 91       	ld	r25, X
 8be:	13 97       	sbiw	r26, 0x03	; 3
 8c0:	00 97       	sbiw	r24, 0x00	; 0
 8c2:	19 f0       	breq	.+6      	; 0x8ca <free+0xd4>
 8c4:	fd 01       	movw	r30, r26
 8c6:	dc 01       	movw	r26, r24
 8c8:	f7 cf       	rjmp	.-18     	; 0x8b8 <free+0xc2>
 8ca:	8d 91       	ld	r24, X+
 8cc:	9c 91       	ld	r25, X
 8ce:	11 97       	sbiw	r26, 0x01	; 1
 8d0:	9d 01       	movw	r18, r26
 8d2:	2e 5f       	subi	r18, 0xFE	; 254
 8d4:	3f 4f       	sbci	r19, 0xFF	; 255
 8d6:	82 0f       	add	r24, r18
 8d8:	93 1f       	adc	r25, r19
 8da:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__brkval>
 8de:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__brkval+0x1>
 8e2:	28 17       	cp	r18, r24
 8e4:	39 07       	cpc	r19, r25
 8e6:	69 f4       	brne	.+26     	; 0x902 <free+0x10c>
 8e8:	30 97       	sbiw	r30, 0x00	; 0
 8ea:	29 f4       	brne	.+10     	; 0x8f6 <free+0x100>
 8ec:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__flp+0x1>
 8f0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__flp>
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <free+0x104>
 8f6:	13 82       	std	Z+3, r1	; 0x03
 8f8:	12 82       	std	Z+2, r1	; 0x02
 8fa:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <__brkval+0x1>
 8fe:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <__brkval>
 902:	df 91       	pop	r29
 904:	cf 91       	pop	r28
 906:	08 95       	ret

00000908 <_exit>:
 908:	f8 94       	cli

0000090a <__stop_program>:
 90a:	ff cf       	rjmp	.-2      	; 0x90a <__stop_program>
