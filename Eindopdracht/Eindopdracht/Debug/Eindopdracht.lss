
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001036  000010ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001036  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800120  00800120  000010ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000111c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000255d  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000103c  00000000  00000000  00003941  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016c5  00000000  00000000  0000497d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000554  00000000  00000000  00006044  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000093b  00000000  00000000  00006598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001088  00000000  00000000  00006ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00007f5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
      22:	00 00       	nop
      24:	4b c5       	rjmp	.+2710   	; 0xabc <__vector_9>
      26:	00 00       	nop
      28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
      32:	00 00       	nop
      34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
      42:	00 00       	nop
      44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e3       	ldi	r30, 0x36	; 54
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 32       	cpi	r26, 0x20	; 32
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a0 e2       	ldi	r26, 0x20	; 32
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a7 34       	cpi	r26, 0x47	; 71
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	23 d5       	rcall	.+2630   	; 0xb0a <main>
      c4:	b6 c7       	rjmp	.+3948   	; 0x1032 <_exit>

000000c6 <__bad_interrupt>:
      c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <time>:
      c8:	fc 01       	movw	r30, r24
      ca:	0f b6       	in	r0, 0x3f	; 63
      cc:	f8 94       	cli
      ce:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <__system_time>
      d2:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <__system_time+0x1>
      d6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <__system_time+0x2>
      da:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <__system_time+0x3>
      de:	0f be       	out	0x3f, r0	; 63
      e0:	30 97       	sbiw	r30, 0x00	; 0
      e2:	21 f0       	breq	.+8      	; 0xec <time+0x24>
      e4:	60 83       	st	Z, r22
      e6:	71 83       	std	Z+1, r23	; 0x01
      e8:	82 83       	std	Z+2, r24	; 0x02
      ea:	93 83       	std	Z+3, r25	; 0x03
      ec:	08 95       	ret

000000ee <checkDirection>:
{
	//DDRB=0x01; // Set PB0 pin as output for display select
	//spi_masterInit(); // Initialize spi module
	//displayDriverInit(); // Initialize display chip
	
	DDRA = 0x0F;
      ee:	8f e0       	ldi	r24, 0x0F	; 15
      f0:	8a bb       	out	0x1a, r24	; 26

	if (PINA & 0x81 && moving != GOING_DOWN)
      f2:	89 b3       	in	r24, 0x19	; 25
      f4:	81 78       	andi	r24, 0x81	; 129
      f6:	51 f0       	breq	.+20     	; 0x10c <checkDirection+0x1e>
      f8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
      fc:	81 30       	cpi	r24, 0x01	; 1
      fe:	59 f1       	breq	.+86     	; 0x156 <checkDirection+0x68>
	{
		moving = GOING_UP;
     100:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
	}
	if (PINA & 0x82 && moving != GOING_UP)
     104:	89 b3       	in	r24, 0x19	; 25
     106:	82 78       	andi	r24, 0x82	; 130
     108:	51 f5       	brne	.+84     	; 0x15e <checkDirection+0x70>
     10a:	0b c0       	rjmp	.+22     	; 0x122 <checkDirection+0x34>
     10c:	89 b3       	in	r24, 0x19	; 25
     10e:	82 78       	andi	r24, 0x82	; 130
     110:	41 f0       	breq	.+16     	; 0x122 <checkDirection+0x34>
     112:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     116:	88 23       	and	r24, r24
     118:	11 f1       	breq	.+68     	; 0x15e <checkDirection+0x70>
	{
		moving = GOING_DOWN;
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
     120:	1e c0       	rjmp	.+60     	; 0x15e <checkDirection+0x70>
	}
	if (PINA & 0x84 && moving != GOING_RIGHT)
     122:	89 b3       	in	r24, 0x19	; 25
     124:	84 78       	andi	r24, 0x84	; 132
     126:	49 f0       	breq	.+18     	; 0x13a <checkDirection+0x4c>
     128:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     12c:	83 30       	cpi	r24, 0x03	; 3
     12e:	d9 f0       	breq	.+54     	; 0x166 <checkDirection+0x78>
	{
		moving = GOING_LEFT;
     130:	82 e0       	ldi	r24, 0x02	; 2
     132:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
	}
	if (PINA & 0x88 && moving != GOING_LEFT)
     136:	89 b3       	in	r24, 0x19	; 25
     138:	0a c0       	rjmp	.+20     	; 0x14e <checkDirection+0x60>
     13a:	89 b3       	in	r24, 0x19	; 25
     13c:	88 78       	andi	r24, 0x88	; 136
     13e:	39 f0       	breq	.+14     	; 0x14e <checkDirection+0x60>
     140:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     144:	82 30       	cpi	r24, 0x02	; 2
     146:	19 f0       	breq	.+6      	; 0x14e <checkDirection+0x60>
	{
		moving = GOING_RIGHT;
     148:	83 e0       	ldi	r24, 0x03	; 3
     14a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
	}
	
	return moving;
     14e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	08 95       	ret

	if (PINA & 0x81 && moving != GOING_DOWN)
	{
		moving = GOING_UP;
	}
	if (PINA & 0x82 && moving != GOING_UP)
     156:	89 b3       	in	r24, 0x19	; 25
     158:	82 78       	andi	r24, 0x82	; 130
     15a:	f9 f6       	brne	.-66     	; 0x11a <checkDirection+0x2c>
     15c:	08 c0       	rjmp	.+16     	; 0x16e <checkDirection+0x80>
	{
		moving = GOING_DOWN;
	}
	if (PINA & 0x84 && moving != GOING_RIGHT)
     15e:	89 b3       	in	r24, 0x19	; 25
     160:	84 78       	andi	r24, 0x84	; 132
     162:	31 f7       	brne	.-52     	; 0x130 <checkDirection+0x42>
     164:	ea cf       	rjmp	.-44     	; 0x13a <checkDirection+0x4c>
	{
		moving = GOING_LEFT;
	}
	if (PINA & 0x88 && moving != GOING_LEFT)
     166:	89 b3       	in	r24, 0x19	; 25
     168:	88 78       	andi	r24, 0x88	; 136
     16a:	71 f7       	brne	.-36     	; 0x148 <checkDirection+0x5a>
     16c:	f0 cf       	rjmp	.-32     	; 0x14e <checkDirection+0x60>
	}
	if (PINA & 0x82 && moving != GOING_UP)
	{
		moving = GOING_DOWN;
	}
	if (PINA & 0x84 && moving != GOING_RIGHT)
     16e:	89 b3       	in	r24, 0x19	; 25
     170:	84 78       	andi	r24, 0x84	; 132
     172:	f1 f6       	brne	.-68     	; 0x130 <checkDirection+0x42>
     174:	e2 cf       	rjmp	.-60     	; 0x13a <checkDirection+0x4c>

00000176 <drawImage>:
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
     176:	e5 e3       	ldi	r30, 0x35	; 53
     178:	f1 e0       	ldi	r31, 0x01	; 1
     17a:	10 82       	st	Z, r1
     17c:	86 e6       	ldi	r24, 0x66	; 102
     17e:	81 83       	std	Z+1, r24	; 0x01
     180:	82 83       	std	Z+2, r24	; 0x02
     182:	13 82       	std	Z+3, r1	; 0x03
     184:	9c e3       	ldi	r25, 0x3C	; 60
     186:	94 83       	std	Z+4, r25	; 0x04
     188:	85 83       	std	Z+5, r24	; 0x05
     18a:	83 ec       	ldi	r24, 0xC3	; 195
     18c:	86 83       	std	Z+6, r24	; 0x06
     18e:	17 82       	std	Z+7, r1	; 0x07
     190:	08 95       	ret

00000192 <drawCounting>:
     192:	82 30       	cpi	r24, 0x02	; 2
     194:	91 05       	cpc	r25, r1
     196:	99 f0       	breq	.+38     	; 0x1be <drawCounting+0x2c>
     198:	83 30       	cpi	r24, 0x03	; 3
     19a:	91 05       	cpc	r25, r1
     19c:	19 f0       	breq	.+6      	; 0x1a4 <drawCounting+0x12>
     19e:	01 97       	sbiw	r24, 0x01	; 1
     1a0:	51 f5       	brne	.+84     	; 0x1f6 <drawCounting+0x64>
     1a2:	1b c0       	rjmp	.+54     	; 0x1da <drawCounting+0x48>
     1a4:	e5 e3       	ldi	r30, 0x35	; 53
     1a6:	f1 e0       	ldi	r31, 0x01	; 1
     1a8:	8e e7       	ldi	r24, 0x7E	; 126
     1aa:	80 83       	st	Z, r24
     1ac:	81 83       	std	Z+1, r24	; 0x01
     1ae:	96 e0       	ldi	r25, 0x06	; 6
     1b0:	92 83       	std	Z+2, r25	; 0x02
     1b2:	83 83       	std	Z+3, r24	; 0x03
     1b4:	84 83       	std	Z+4, r24	; 0x04
     1b6:	95 83       	std	Z+5, r25	; 0x05
     1b8:	86 83       	std	Z+6, r24	; 0x06
     1ba:	87 83       	std	Z+7, r24	; 0x07
     1bc:	08 95       	ret
     1be:	e5 e3       	ldi	r30, 0x35	; 53
     1c0:	f1 e0       	ldi	r31, 0x01	; 1
     1c2:	8e e7       	ldi	r24, 0x7E	; 126
     1c4:	80 83       	st	Z, r24
     1c6:	81 83       	std	Z+1, r24	; 0x01
     1c8:	96 e0       	ldi	r25, 0x06	; 6
     1ca:	92 83       	std	Z+2, r25	; 0x02
     1cc:	83 83       	std	Z+3, r24	; 0x03
     1ce:	84 83       	std	Z+4, r24	; 0x04
     1d0:	90 e6       	ldi	r25, 0x60	; 96
     1d2:	95 83       	std	Z+5, r25	; 0x05
     1d4:	86 83       	std	Z+6, r24	; 0x06
     1d6:	87 83       	std	Z+7, r24	; 0x07
     1d8:	08 95       	ret
     1da:	e5 e3       	ldi	r30, 0x35	; 53
     1dc:	f1 e0       	ldi	r31, 0x01	; 1
     1de:	88 e1       	ldi	r24, 0x18	; 24
     1e0:	80 83       	st	Z, r24
     1e2:	98 e3       	ldi	r25, 0x38	; 56
     1e4:	91 83       	std	Z+1, r25	; 0x01
     1e6:	98 e7       	ldi	r25, 0x78	; 120
     1e8:	92 83       	std	Z+2, r25	; 0x02
     1ea:	83 83       	std	Z+3, r24	; 0x03
     1ec:	84 83       	std	Z+4, r24	; 0x04
     1ee:	85 83       	std	Z+5, r24	; 0x05
     1f0:	8e e7       	ldi	r24, 0x7E	; 126
     1f2:	86 83       	std	Z+6, r24	; 0x06
     1f4:	87 83       	std	Z+7, r24	; 0x07
     1f6:	08 95       	ret

000001f8 <displaySetPixel>:
     1f8:	e8 2f       	mov	r30, r24
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	eb 5c       	subi	r30, 0xCB	; 203
     1fe:	fe 4f       	sbci	r31, 0xFE	; 254
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	02 c0       	rjmp	.+4      	; 0x20a <displaySetPixel+0x12>
     206:	88 0f       	add	r24, r24
     208:	99 1f       	adc	r25, r25
     20a:	6a 95       	dec	r22
     20c:	e2 f7       	brpl	.-8      	; 0x206 <displaySetPixel+0xe>
     20e:	90 81       	ld	r25, Z
     210:	89 2b       	or	r24, r25
     212:	80 83       	st	Z, r24
     214:	08 95       	ret

00000216 <setStartLocation>:
     216:	e1 e3       	ldi	r30, 0x31	; 49
     218:	f1 e0       	ldi	r31, 0x01	; 1
     21a:	91 83       	std	Z+1, r25	; 0x01
     21c:	80 83       	st	Z, r24
     21e:	73 83       	std	Z+3, r23	; 0x03
     220:	62 83       	std	Z+2, r22	; 0x02
     222:	88 e0       	ldi	r24, 0x08	; 8
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	32 d5       	rcall	.+2660   	; 0xc8c <malloc>
     228:	fc 01       	movw	r30, r24
     22a:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <locationList+0x1>
     22e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <locationList>
     232:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <currentLocation>
     236:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <currentLocation+0x1>
     23a:	a0 91 33 01 	lds	r26, 0x0133	; 0x800133 <currentLocation+0x2>
     23e:	b0 91 34 01 	lds	r27, 0x0134	; 0x800134 <currentLocation+0x3>
     242:	80 83       	st	Z, r24
     244:	91 83       	std	Z+1, r25	; 0x01
     246:	a2 83       	std	Z+2, r26	; 0x02
     248:	b3 83       	std	Z+3, r27	; 0x03
     24a:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <counter>
     24e:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <counter+0x1>
     252:	35 83       	std	Z+5, r19	; 0x05
     254:	24 83       	std	Z+4, r18	; 0x04
     256:	17 82       	std	Z+7, r1	; 0x07
     258:	16 82       	std	Z+6, r1	; 0x06
     25a:	2f 5f       	subi	r18, 0xFF	; 255
     25c:	3f 4f       	sbci	r19, 0xFF	; 255
     25e:	30 93 22 01 	sts	0x0122, r19	; 0x800122 <counter+0x1>
     262:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <counter>
     266:	08 95       	ret

00000268 <displayClrPixel>:
     268:	e8 2f       	mov	r30, r24
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	eb 5c       	subi	r30, 0xCB	; 203
     26e:	fe 4f       	sbci	r31, 0xFE	; 254
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	02 c0       	rjmp	.+4      	; 0x27a <displayClrPixel+0x12>
     276:	88 0f       	add	r24, r24
     278:	99 1f       	adc	r25, r25
     27a:	6a 95       	dec	r22
     27c:	e2 f7       	brpl	.-8      	; 0x276 <displayClrPixel+0xe>
     27e:	90 81       	ld	r25, Z
     280:	89 27       	eor	r24, r25
     282:	80 83       	st	Z, r24
     284:	08 95       	ret

00000286 <displayClr>:
     286:	e5 e3       	ldi	r30, 0x35	; 53
     288:	f1 e0       	ldi	r31, 0x01	; 1
     28a:	8d e3       	ldi	r24, 0x3D	; 61
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	11 92       	st	Z+, r1
     290:	e8 17       	cp	r30, r24
     292:	f9 07       	cpc	r31, r25
     294:	e1 f7       	brne	.-8      	; 0x28e <displayClr+0x8>
     296:	08 95       	ret

00000298 <twi_init>:
     298:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     29c:	80 e2       	ldi	r24, 0x20	; 32
     29e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     2a2:	08 95       	ret

000002a4 <twi_start>:
     2a4:	84 ea       	ldi	r24, 0xA4	; 164
     2a6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     2aa:	e4 e7       	ldi	r30, 0x74	; 116
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	88 23       	and	r24, r24
     2b2:	ec f7       	brge	.-6      	; 0x2ae <twi_start+0xa>
     2b4:	08 95       	ret

000002b6 <twi_tx>:
}

void twi_tx(unsigned char data)
{
	//transmit 8 bits data
	TWDR = data;
     2b6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
     2ba:	84 e8       	ldi	r24, 0x84	; 132
     2bc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
     2c0:	e4 e7       	ldi	r30, 0x74	; 116
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	80 81       	ld	r24, Z
     2c6:	88 23       	and	r24, r24
     2c8:	ec f7       	brge	.-6      	; 0x2c4 <twi_tx+0xe>
}
     2ca:	08 95       	ret

000002cc <displayInitHT16K33>:
	}
}


void displayInitHT16K33(uint8_t i2c_address) 
{
     2cc:	0f 93       	push	r16
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	c8 2f       	mov	r28, r24
							// System setup page 30 ht16k33 datasheet
	twi_start();
     2d6:	e6 df       	rcall	.-52     	; 0x2a4 <twi_start>
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
     2d8:	8c 2f       	mov	r24, r28
     2da:	ed df       	rcall	.-38     	; 0x2b6 <twi_tx>
	twi_tx(0x21);			// Internal osc on (page 10 HT16K33)
     2dc:	81 e2       	ldi	r24, 0x21	; 33
     2de:	eb df       	rcall	.-42     	; 0x2b6 <twi_tx>
     2e0:	04 e7       	ldi	r16, 0x74	; 116
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
     2e2:	10 e0       	ldi	r17, 0x00	; 0
     2e4:	d4 e9       	ldi	r29, 0x94	; 148
     2e6:	f8 01       	movw	r30, r16
     2e8:	d0 83       	st	Z, r29
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
	twi_tx(0x21);			// Internal osc on (page 10 HT16K33)
	twi_stop();
		
							// ROW/INT set. Page 31 ht16k33 datasheet
	twi_start();
     2ea:	dc df       	rcall	.-72     	; 0x2a4 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
     2ec:	8c 2f       	mov	r24, r28
     2ee:	e3 df       	rcall	.-58     	; 0x2b6 <twi_tx>
	twi_tx(0xA0);			// HT16K33 pins all output (default)
     2f0:	80 ea       	ldi	r24, 0xA0	; 160
     2f2:	e1 df       	rcall	.-62     	; 0x2b6 <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
     2f4:	f8 01       	movw	r30, r16
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xA0);			// HT16K33 pins all output (default)
	twi_stop();

							// Dimming set
	twi_start();
     2f6:	d0 83       	st	Z, r29
	twi_tx(i2c_address);	// Display I2C address + R/W bit
     2f8:	d5 df       	rcall	.-86     	; 0x2a4 <twi_start>
     2fa:	8c 2f       	mov	r24, r28
	twi_tx(0xE1);			// Display Dimming 2/16 duty cycle
     2fc:	dc df       	rcall	.-72     	; 0x2b6 <twi_tx>
     2fe:	81 ee       	ldi	r24, 0xE1	; 225
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
     300:	da df       	rcall	.-76     	; 0x2b6 <twi_tx>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xE1);			// Display Dimming 2/16 duty cycle
	twi_stop();

							// Display set
	twi_start();
     302:	f8 01       	movw	r30, r16
	twi_tx(i2c_address);	// Display I2C address + R/W bit
     304:	d0 83       	st	Z, r29
     306:	ce df       	rcall	.-100    	; 0x2a4 <twi_start>
	twi_tx(0x81);			// Display ON, Blinking OFF
     308:	8c 2f       	mov	r24, r28
     30a:	d5 df       	rcall	.-86     	; 0x2b6 <twi_tx>
     30c:	81 e8       	ldi	r24, 0x81	; 129
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
     30e:	d3 df       	rcall	.-90     	; 0x2b6 <twi_tx>
     310:	f8 01       	movw	r30, r16
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0x81);			// Display ON, Blinking OFF
	twi_stop();
	
							// Beeld een patroon af op display (test)
	twi_start();
     312:	d0 83       	st	Z, r29
	twi_tx(i2c_address);
     314:	c7 df       	rcall	.-114    	; 0x2a4 <twi_start>
     316:	8c 2f       	mov	r24, r28
	twi_tx(0x00);
     318:	ce df       	rcall	.-100    	; 0x2b6 <twi_tx>
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	cc df       	rcall	.-104    	; 0x2b6 <twi_tx>
     31e:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t a = 0x55;
     320:	c5 e5       	ldi	r28, 0x55	; 85
	for( uint8_t idx = 0; idx < 8; idx++ ) {
		a ^= 0xFF;
     322:	c0 95       	com	r28
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
     324:	8c 2f       	mov	r24, r28
     326:	80 fb       	bst	r24, 0
     328:	87 95       	ror	r24
     32a:	87 f9       	bld	r24, 7
     32c:	c4 df       	rcall	.-120    	; 0x2b6 <twi_tx>
     32e:	80 e0       	ldi	r24, 0x00	; 0
		twi_tx( 0x00);
     330:	c2 df       	rcall	.-124    	; 0x2b6 <twi_tx>
     332:	d1 50       	subi	r29, 0x01	; 1
     334:	b1 f7       	brne	.-20     	; 0x322 <displayInitHT16K33+0x56>
     336:	84 e9       	ldi	r24, 0x94	; 148
							// Beeld een patroon af op display (test)
	twi_start();
	twi_tx(i2c_address);
	twi_tx(0x00);
	uint8_t a = 0x55;
	for( uint8_t idx = 0; idx < 8; idx++ ) {
     338:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
}
     340:	1f 91       	pop	r17
     342:	0f 91       	pop	r16
     344:	08 95       	ret

00000346 <displayInit>:
     346:	a8 df       	rcall	.-176    	; 0x298 <twi_init>
     348:	84 ee       	ldi	r24, 0xE4	; 228


void displayInit(void) 
{
	twi_init();							// Enable TWI interface
	displayInitHT16K33(D0_I2C_ADDR);	// Iit display
     34a:	c0 df       	rcall	.-128    	; 0x2cc <displayInitHT16K33>
	locationList = NULL;
     34c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <locationList+0x1>
     350:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <locationList>
	
	srand((unsigned)time(&t));
     354:	89 e2       	ldi	r24, 0x29	; 41
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	b7 de       	rcall	.-658    	; 0xc8 <time>
     35a:	cb 01       	movw	r24, r22
	rand(),rand(),rand();
     35c:	02 d6       	rcall	.+3076   	; 0xf62 <srand>
     35e:	fe d5       	rcall	.+3068   	; 0xf5c <rand>
     360:	fd d5       	rcall	.+3066   	; 0xf5c <rand>
     362:	fc c5       	rjmp	.+3064   	; 0xf5c <rand>
     364:	08 95       	ret

00000366 <update>:
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
								//writeLedDisplay(x+y * 100);
	buf[x] = buf[x] ^ newByte;
}

void update( void )
{
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
								// Second display
	twi_start();
     36e:	9a df       	rcall	.-204    	; 0x2a4 <twi_start>
	twi_tx(D0_I2C_ADDR);
     370:	84 ee       	ldi	r24, 0xE4	; 228
     372:	a1 df       	rcall	.-190    	; 0x2b6 <twi_tx>
	twi_tx(0x00);
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	9f df       	rcall	.-194    	; 0x2b6 <twi_tx>
     378:	cd e3       	ldi	r28, 0x3D	; 61
     37a:	d1 e0       	ldi	r29, 0x01	; 1
     37c:	05 e3       	ldi	r16, 0x35	; 53
     37e:	11 e0       	ldi	r17, 0x01	; 1
     380:	8a 91       	ld	r24, -Y
	for( uint8_t idx = 0; idx < 8; idx++ ) {
		uint8_t a = buf[7 + 0 * 8 - idx];
     382:	80 fb       	bst	r24, 0
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
     384:	87 95       	ror	r24
     386:	87 f9       	bld	r24, 7
     388:	96 df       	rcall	.-212    	; 0x2b6 <twi_tx>
		twi_tx( 0x00);
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	94 df       	rcall	.-216    	; 0x2b6 <twi_tx>
     38e:	c0 17       	cp	r28, r16
{
								// Second display
	twi_start();
	twi_tx(D0_I2C_ADDR);
	twi_tx(0x00);
	for( uint8_t idx = 0; idx < 8; idx++ ) {
     390:	d1 07       	cpc	r29, r17
     392:	b1 f7       	brne	.-20     	; 0x380 <update+0x1a>
     394:	84 e9       	ldi	r24, 0x94	; 148
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
     396:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     39a:	df 91       	pop	r29
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
}
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	08 95       	ret

000003a4 <displayDrawStart>:
     3a4:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <locationList>
}


void displayDrawStart()
{
	displaySetPixel(locationList->location.x,locationList->location.y);
     3a8:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <locationList+0x1>
     3ac:	62 81       	ldd	r22, Z+2	; 0x02
     3ae:	80 81       	ld	r24, Z
     3b0:	23 df       	rcall	.-442    	; 0x1f8 <displaySetPixel>
	update();
     3b2:	d9 cf       	rjmp	.-78     	; 0x366 <update>
     3b4:	08 95       	ret

000003b6 <getLocationListSize>:
     3b6:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <locationList>
	while( 0 == (TWCR & 0x80) );
}

int getLocationListSize(void)
{
	LocationList *locationlist = locationList;
     3ba:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <locationList+0x1>
	int locationListSize = 0;
	while (locationlist != NULL){
     3be:	30 97       	sbiw	r30, 0x00	; 0
     3c0:	49 f0       	breq	.+18     	; 0x3d4 <getLocationListSize+0x1e>
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	90 e0       	ldi	r25, 0x00	; 0
		locationListSize++;
     3c6:	01 96       	adiw	r24, 0x01	; 1
		locationlist = locationlist->next;
     3c8:	06 80       	ldd	r0, Z+6	; 0x06
     3ca:	f7 81       	ldd	r31, Z+7	; 0x07
     3cc:	e0 2d       	mov	r30, r0

int getLocationListSize(void)
{
	LocationList *locationlist = locationList;
	int locationListSize = 0;
	while (locationlist != NULL){
     3ce:	30 97       	sbiw	r30, 0x00	; 0
     3d0:	d1 f7       	brne	.-12     	; 0x3c6 <getLocationListSize+0x10>
     3d2:	08 95       	ret
}

int getLocationListSize(void)
{
	LocationList *locationlist = locationList;
	int locationListSize = 0;
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	90 e0       	ldi	r25, 0x00	; 0
	while (locationlist != NULL){
		locationListSize++;
		locationlist = locationlist->next;
	}
	return locationListSize;
}
     3d8:	08 95       	ret

000003da <increaseSnakeSize>:

void increaseSnakeSize(void)
{
	maxSnakeSize++;
     3da:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <maxSnakeSize>
     3de:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <maxSnakeSize+0x1>
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <maxSnakeSize+0x1>
     3e8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <maxSnakeSize>
     3ec:	08 95       	ret

000003ee <addCandy>:
	//calculateNewScoreAppleCollected();
}

void addCandy(void)
{
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
	
	//int random = (rand() % 8);

	
	rand(),rand(),rand(),rand(),rand(),rand();
     3f2:	b4 d5       	rcall	.+2920   	; 0xf5c <rand>
     3f4:	b3 d5       	rcall	.+2918   	; 0xf5c <rand>
     3f6:	b2 d5       	rcall	.+2916   	; 0xf5c <rand>
     3f8:	b1 d5       	rcall	.+2914   	; 0xf5c <rand>
     3fa:	b0 d5       	rcall	.+2912   	; 0xf5c <rand>
     3fc:	af d5       	rcall	.+2910   	; 0xf5c <rand>
	
	int x = (rand() % 8);
     3fe:	ae d5       	rcall	.+2908   	; 0xf5c <rand>
     400:	87 70       	andi	r24, 0x07	; 7
     402:	90 78       	andi	r25, 0x80	; 128
     404:	99 23       	and	r25, r25
     406:	24 f4       	brge	.+8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	88 6f       	ori	r24, 0xF8	; 248
     40c:	9f 6f       	ori	r25, 0xFF	; 255
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	ec 01       	movw	r28, r24
	int y = (rand() % 8);
     412:	a4 d5       	rcall	.+2888   	; 0xf5c <rand>
     414:	87 70       	andi	r24, 0x07	; 7
     416:	90 78       	andi	r25, 0x80	; 128
     418:	99 23       	and	r25, r25
     41a:	24 f4       	brge	.+8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     41c:	01 97       	sbiw	r24, 0x01	; 1
     41e:	88 6f       	ori	r24, 0xF8	; 248
     420:	9f 6f       	ori	r25, 0xFF	; 255
     422:	01 96       	adiw	r24, 0x01	; 1
     424:	bc 01       	movw	r22, r24
     426:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <locationList>
	LocationList *locationlist = locationList;
     42a:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <locationList+0x1>
     42e:	30 97       	sbiw	r30, 0x00	; 0
	while(locationlist != NULL){
     430:	59 f1       	breq	.+86     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     432:	20 81       	ld	r18, Z
		if(locationlist->location.x == x && locationlist->location.y == y){
     434:	31 81       	ldd	r19, Z+1	; 0x01
     436:	2c 17       	cp	r18, r28
     438:	3d 07       	cpc	r19, r29
     43a:	09 f5       	brne	.+66     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     43c:	82 81       	ldd	r24, Z+2	; 0x02
     43e:	93 81       	ldd	r25, Z+3	; 0x03
     440:	86 17       	cp	r24, r22
     442:	97 07       	cpc	r25, r23
			rand(),rand();
     444:	d9 f4       	brne	.+54     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     446:	8a d5       	rcall	.+2836   	; 0xf5c <rand>
     448:	89 d5       	rcall	.+2834   	; 0xf5c <rand>
     44a:	88 d5       	rcall	.+2832   	; 0xf5c <rand>
			x = (rand() % 8);
     44c:	87 70       	andi	r24, 0x07	; 7
     44e:	90 78       	andi	r25, 0x80	; 128
     450:	99 23       	and	r25, r25
     452:	24 f4       	brge	.+8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     454:	01 97       	sbiw	r24, 0x01	; 1
     456:	88 6f       	ori	r24, 0xF8	; 248
     458:	9f 6f       	ori	r25, 0xFF	; 255
     45a:	01 96       	adiw	r24, 0x01	; 1
     45c:	ec 01       	movw	r28, r24
     45e:	7e d5       	rcall	.+2812   	; 0xf5c <rand>
			y = (rand() % 8);
     460:	87 70       	andi	r24, 0x07	; 7
     462:	90 78       	andi	r25, 0x80	; 128
     464:	99 23       	and	r25, r25
     466:	24 f4       	brge	.+8      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	88 6f       	ori	r24, 0xF8	; 248
     46c:	9f 6f       	ori	r25, 0xFF	; 255
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	bc 01       	movw	r22, r24
     472:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <locationList>
			locationlist = locationList;
     476:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <locationList+0x1>
     47a:	01 c0       	rjmp	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     47c:	e9 01       	movw	r28, r18
     47e:	06 80       	ldd	r0, Z+6	; 0x06
     480:	f7 81       	ldd	r31, Z+7	; 0x07
		}
		locationlist = locationlist->next;
     482:	e0 2d       	mov	r30, r0
	rand(),rand(),rand(),rand(),rand(),rand();
	
	int x = (rand() % 8);
	int y = (rand() % 8);
	LocationList *locationlist = locationList;
	while(locationlist != NULL){
     484:	30 97       	sbiw	r30, 0x00	; 0
     486:	a9 f6       	brne	.-86     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
			y = (rand() % 8);
			locationlist = locationList;
		}
		locationlist = locationlist->next;
	}
	candy.x = x;
     488:	ed e2       	ldi	r30, 0x2D	; 45
     48a:	f1 e0       	ldi	r31, 0x01	; 1
     48c:	d1 83       	std	Z+1, r29	; 0x01
     48e:	c0 83       	st	Z, r28
	candy.y = y;
     490:	73 83       	std	Z+3, r23	; 0x03
     492:	62 83       	std	Z+2, r22	; 0x02
	displaySetPixel(x,y);
     494:	8c 2f       	mov	r24, r28
     496:	b0 de       	rcall	.-672    	; 0x1f8 <displaySetPixel>
     498:	66 df       	rcall	.-308    	; 0x366 <update>
	update();
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
}
     49e:	08 95       	ret

000004a0 <checkForCollision>:
     4a0:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <locationList>

int checkForCollision(int x, int y)
{
	LocationList *locationlist = locationList;
     4a4:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <locationList+0x1>
	while(locationlist != NULL){
     4a8:	30 97       	sbiw	r30, 0x00	; 0
     4aa:	91 f0       	breq	.+36     	; 0x4d0 <checkForCollision+0x30>
		if(locationlist->location.x == x && locationlist->location.y == y){
     4ac:	20 81       	ld	r18, Z
     4ae:	31 81       	ldd	r19, Z+1	; 0x01
     4b0:	28 17       	cp	r18, r24
     4b2:	39 07       	cpc	r19, r25
     4b4:	29 f4       	brne	.+10     	; 0x4c0 <checkForCollision+0x20>
     4b6:	22 81       	ldd	r18, Z+2	; 0x02
     4b8:	33 81       	ldd	r19, Z+3	; 0x03
     4ba:	26 17       	cp	r18, r22
     4bc:	37 07       	cpc	r19, r23
     4be:	59 f0       	breq	.+22     	; 0x4d6 <checkForCollision+0x36>
			return 1;
		}
		locationlist = locationlist->next;
     4c0:	06 80       	ldd	r0, Z+6	; 0x06
     4c2:	f7 81       	ldd	r31, Z+7	; 0x07
     4c4:	e0 2d       	mov	r30, r0
}

int checkForCollision(int x, int y)
{
	LocationList *locationlist = locationList;
	while(locationlist != NULL){
     4c6:	30 97       	sbiw	r30, 0x00	; 0
     4c8:	89 f7       	brne	.-30     	; 0x4ac <checkForCollision+0xc>
		if(locationlist->location.x == x && locationlist->location.y == y){
			return 1;
		}
		locationlist = locationlist->next;
	}
	return 0;
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	08 95       	ret
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	08 95       	ret
int checkForCollision(int x, int y)
{
	LocationList *locationlist = locationList;
	while(locationlist != NULL){
		if(locationlist->location.x == x && locationlist->location.y == y){
			return 1;
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	90 e0       	ldi	r25, 0x00	; 0
		}
		locationlist = locationlist->next;
	}
	return 0;
}
     4da:	08 95       	ret

000004dc <resetDisplay>:

void resetDisplay(void)
{
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
	LocationList *locationlist = locationList;
     4e0:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <locationList>
     4e4:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <locationList+0x1>
	while(locationList == NULL){
     4e8:	00 97       	sbiw	r24, 0x00	; 0
     4ea:	99 f4       	brne	.+38     	; 0x512 <resetDisplay+0x36>
	}
	return 0;
}

void resetDisplay(void)
{
     4ec:	d8 2f       	mov	r29, r24
     4ee:	c9 2f       	mov	r28, r25
     4f0:	ed 2f       	mov	r30, r29
     4f2:	fc 2f       	mov	r31, r28
     4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <resetDisplay+0x1c>
	LocationList *locationlist = locationList;
	while(locationList == NULL){
		while(locationlist->next != NULL){
		locationlist = locationlist->next;
     4f6:	f9 01       	movw	r30, r18

void resetDisplay(void)
{
	LocationList *locationlist = locationList;
	while(locationList == NULL){
		while(locationlist->next != NULL){
     4f8:	26 81       	ldd	r18, Z+6	; 0x06
     4fa:	37 81       	ldd	r19, Z+7	; 0x07
     4fc:	21 15       	cp	r18, r1
     4fe:	31 05       	cpc	r19, r1
     500:	d1 f7       	brne	.-12     	; 0x4f6 <resetDisplay+0x1a>
		locationlist = locationlist->next;
		}
		free(locationlist);
     502:	cf 01       	movw	r24, r30
     504:	5b d4       	rcall	.+2230   	; 0xdbc <free>
}

void resetDisplay(void)
{
	LocationList *locationlist = locationList;
	while(locationList == NULL){
     506:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <locationList>
     50a:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <locationList+0x1>
     50e:	89 2b       	or	r24, r25
     510:	79 f3       	breq	.-34     	; 0x4f0 <resetDisplay+0x14>
		}
		free(locationlist);
		locationlist = NULL;
		locationlist = locationList;
	}
	maxSnakeSize = 4;
     512:	84 e0       	ldi	r24, 0x04	; 4
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <maxSnakeSize+0x1>
     51a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <maxSnakeSize>
}
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <moveToNewLocation>:


int moveToNewLocation(int x, int y)
{
     524:	6f 92       	push	r6
     526:	7f 92       	push	r7
     528:	8f 92       	push	r8
     52a:	9f 92       	push	r9
     52c:	af 92       	push	r10
     52e:	bf 92       	push	r11
     530:	cf 92       	push	r12
     532:	df 92       	push	r13
     534:	ef 92       	push	r14
     536:	ff 92       	push	r15
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	6c 01       	movw	r12, r24
     542:	5b 01       	movw	r10, r22
	
	if(x == candy.x && y == candy.y){
     544:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <candy>
     548:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <candy+0x1>
     54c:	8c 15       	cp	r24, r12
     54e:	9d 05       	cpc	r25, r13
     550:	51 f4       	brne	.+20     	; 0x566 <moveToNewLocation+0x42>
     552:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <candy+0x2>
     556:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <candy+0x3>
     55a:	86 17       	cp	r24, r22
     55c:	97 07       	cpc	r25, r23
     55e:	19 f4       	brne	.+6      	; 0x566 <moveToNewLocation+0x42>
		increaseSnakeSize();
     560:	3c df       	rcall	.-392    	; 0x3da <increaseSnakeSize>
		addCandy();
     562:	45 df       	rcall	.-374    	; 0x3ee <addCandy>
		calculateNewScoreAppleCollected();
     564:	c7 d1       	rcall	.+910    	; 0x8f4 <calculateNewScoreAppleCollected>
	}
	if(!checkForCollision(x,y)){
     566:	b5 01       	movw	r22, r10
     568:	c6 01       	movw	r24, r12
     56a:	9a df       	rcall	.-204    	; 0x4a0 <checkForCollision>
     56c:	89 2b       	or	r24, r25
     56e:	09 f0       	breq	.+2      	; 0x572 <moveToNewLocation+0x4e>
	Location location;
	location.x = x;
	location.y = y;
	calculateNewScoreMovement();
     570:	9a c0       	rjmp	.+308    	; 0x6a6 <moveToNewLocation+0x182>
     572:	d3 d1       	rcall	.+934    	; 0x91a <calculateNewScoreMovement>
	// add sound
	int size = getLocationListSize();
     574:	20 df       	rcall	.-448    	; 0x3b6 <getLocationListSize>
     576:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <maxSnakeSize>
	if(size < maxSnakeSize){
     57a:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <maxSnakeSize+0x1>
     57e:	82 17       	cp	r24, r18
     580:	93 07       	cpc	r25, r19
     582:	6c f5       	brge	.+90     	; 0x5de <moveToNewLocation+0xba>
		displaySetPixel(x,y);
     584:	6a 2d       	mov	r22, r10
     586:	8c 2d       	mov	r24, r12
     588:	37 de       	rcall	.-914    	; 0x1f8 <displaySetPixel>
     58a:	c0 91 3d 01 	lds	r28, 0x013D	; 0x80013d <locationList>
		LocationList *locactionlist = locationList;
     58e:	d0 91 3e 01 	lds	r29, 0x013E	; 0x80013e <locationList+0x1>
     592:	01 c0       	rjmp	.+2      	; 0x596 <moveToNewLocation+0x72>
		while(locactionlist->next != NULL){
     594:	ec 01       	movw	r28, r24
     596:	8e 81       	ldd	r24, Y+6	; 0x06
     598:	9f 81       	ldd	r25, Y+7	; 0x07
     59a:	00 97       	sbiw	r24, 0x00	; 0
     59c:	d9 f7       	brne	.-10     	; 0x594 <moveToNewLocation+0x70>
			locactionlist = locactionlist->next;
		}
		
		LocationList *newLocation = (LocationList *)malloc(sizeof(LocationList));
     59e:	88 e0       	ldi	r24, 0x08	; 8
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	74 d3       	rcall	.+1768   	; 0xc8c <malloc>
     5a4:	fc 01       	movw	r30, r24
     5a6:	d1 82       	std	Z+1, r13	; 0x01
		newLocation->location = location;
     5a8:	c0 82       	st	Z, r12
     5aa:	b3 82       	std	Z+3, r11	; 0x03
     5ac:	a2 82       	std	Z+2, r10	; 0x02
     5ae:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <counter>
		newLocation->number = counter;
     5b2:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <counter+0x1>
     5b6:	95 83       	std	Z+5, r25	; 0x05
     5b8:	84 83       	std	Z+4, r24	; 0x04
     5ba:	17 82       	std	Z+7, r1	; 0x07
		//writeLedDisplay(counter);
		newLocation->next = NULL;
     5bc:	16 82       	std	Z+6, r1	; 0x06
     5be:	ff 83       	std	Y+7, r31	; 0x07
		locactionlist->next = newLocation;
     5c0:	ee 83       	std	Y+6, r30	; 0x06
     5c2:	01 96       	adiw	r24, 0x01	; 1
		
		counter++;
     5c4:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <counter+0x1>
     5c8:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <counter>
     5cc:	e1 e3       	ldi	r30, 0x31	; 49
		currentLocation.x = x;
     5ce:	f1 e0       	ldi	r31, 0x01	; 1
     5d0:	d1 82       	std	Z+1, r13	; 0x01
     5d2:	c0 82       	st	Z, r12
		currentLocation.y = y;
     5d4:	b3 82       	std	Z+3, r11	; 0x03
     5d6:	a2 82       	std	Z+2, r10	; 0x02
	}else
	{
		displayClr();
		return 0;
	}
	return 1;
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	73 c0       	rjmp	.+230    	; 0x6c4 <moveToNewLocation+0x1a0>
		counter++;
		currentLocation.x = x;
		currentLocation.y = y;
	}else{
		//writeLedDisplay(2);
		displaySetPixel(x,y);
     5de:	6a 2d       	mov	r22, r10
     5e0:	8c 2d       	mov	r24, r12
     5e2:	0a de       	rcall	.-1004   	; 0x1f8 <displaySetPixel>
     5e4:	e0 90 3d 01 	lds	r14, 0x013D	; 0x80013d <locationList>
		LocationList *locationlist = locationList;
     5e8:	f0 90 3e 01 	lds	r15, 0x013E	; 0x80013e <locationList+0x1>
     5ec:	f7 01       	movw	r30, r14
		int minimal = locationlist->number;
     5ee:	44 81       	ldd	r20, Z+4	; 0x04
     5f0:	55 81       	ldd	r21, Z+5	; 0x05
     5f2:	e1 14       	cp	r14, r1
		int locationCounter = 0;
		int position = 0;
		while(locationlist != NULL){
     5f4:	f1 04       	cpc	r15, r1
     5f6:	59 f4       	brne	.+22     	; 0x60e <moveToNewLocation+0xea>
     5f8:	81 e0       	ldi	r24, 0x01	; 1
			previousLocation = locationlist;
			locationlist = locationlist->next;
			locationCounter++;
			
		}
		return 1;
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	63 c0       	rjmp	.+198    	; 0x6c4 <moveToNewLocation+0x1a0>
     5fe:	2c 81       	ldd	r18, Y+4	; 0x04
		LocationList *locationlist = locationList;
		int minimal = locationlist->number;
		int locationCounter = 0;
		int position = 0;
		while(locationlist != NULL){
			if(locationlist->number < minimal){
     600:	3d 81       	ldd	r19, Y+5	; 0x05
     602:	24 17       	cp	r18, r20
     604:	35 07       	cpc	r19, r21
     606:	44 f4       	brge	.+16     	; 0x618 <moveToNewLocation+0xf4>
     608:	4c 01       	movw	r8, r24
				minimal = locationlist->number;
				position = locationCounter;
			}
			locationCounter++;
     60a:	a9 01       	movw	r20, r18
		LocationList *locationlist = locationList;
		int minimal = locationlist->number;
		int locationCounter = 0;
		int position = 0;
		while(locationlist != NULL){
			if(locationlist->number < minimal){
     60c:	05 c0       	rjmp	.+10     	; 0x618 <moveToNewLocation+0xf4>
     60e:	e7 01       	movw	r28, r14
		displaySetPixel(x,y);
		LocationList *locationlist = locationList;
		int minimal = locationlist->number;
		int locationCounter = 0;
		int position = 0;
		while(locationlist != NULL){
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	81 2c       	mov	r8, r1
     616:	91 2c       	mov	r9, r1
     618:	01 96       	adiw	r24, 0x01	; 1
			if(locationlist->number < minimal){
				minimal = locationlist->number;
				position = locationCounter;
			}
			locationCounter++;
     61a:	0e 80       	ldd	r0, Y+6	; 0x06
			locationlist = locationlist->next;
     61c:	df 81       	ldd	r29, Y+7	; 0x07
     61e:	c0 2d       	mov	r28, r0
     620:	20 97       	sbiw	r28, 0x00	; 0
		displaySetPixel(x,y);
		LocationList *locationlist = locationList;
		int minimal = locationlist->number;
		int locationCounter = 0;
		int position = 0;
		while(locationlist != NULL){
     622:	69 f7       	brne	.-38     	; 0x5fe <moveToNewLocation+0xda>
     624:	44 c0       	rjmp	.+136    	; 0x6ae <moveToNewLocation+0x18a>
     626:	88 16       	cp	r8, r24
		locationlist = locationList;
		locationCounter = 0;
		LocationList *newLocation = (LocationList *)malloc(sizeof(LocationList));
		LocationList *previousLocation = NULL; 
		while(locationlist != NULL){
			if(locationCounter == position){
     628:	99 06       	cpc	r9, r25
     62a:	91 f5       	brne	.+100    	; 0x690 <moveToNewLocation+0x16c>
     62c:	02 c0       	rjmp	.+4      	; 0x632 <moveToNewLocation+0x10e>
			}
			locationCounter++;
			locationlist = locationlist->next;
		}
		
		locationlist = locationList;
     62e:	87 01       	movw	r16, r14
		locationCounter = 0;
		LocationList *newLocation = (LocationList *)malloc(sizeof(LocationList));
		LocationList *previousLocation = NULL; 
     630:	7e 01       	movw	r14, r28
		while(locationlist != NULL){
			if(locationCounter == position){
				displayClrPixel(locationlist->location.x,locationlist->location.y);
     632:	f8 01       	movw	r30, r16
     634:	62 81       	ldd	r22, Z+2	; 0x02
     636:	80 81       	ld	r24, Z
     638:	17 de       	rcall	.-978    	; 0x268 <displayClrPixel>
     63a:	f3 01       	movw	r30, r6
			//	writeLedDisplay(p->number);
				newLocation->location = location;
     63c:	d1 82       	std	Z+1, r13	; 0x01
     63e:	c0 82       	st	Z, r12
     640:	b3 82       	std	Z+3, r11	; 0x03
     642:	a2 82       	std	Z+2, r10	; 0x02
     644:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <counter>
				newLocation->number = counter;
     648:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <counter+0x1>
     64c:	95 83       	std	Z+5, r25	; 0x05
     64e:	84 83       	std	Z+4, r24	; 0x04
     650:	f8 01       	movw	r30, r16
				newLocation->next = locationlist->next;
     652:	26 81       	ldd	r18, Z+6	; 0x06
     654:	37 81       	ldd	r19, Z+7	; 0x07
     656:	f3 01       	movw	r30, r6
     658:	37 83       	std	Z+7, r19	; 0x07
     65a:	26 83       	std	Z+6, r18	; 0x06
				counter++;
     65c:	01 96       	adiw	r24, 0x01	; 1
     65e:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <counter+0x1>
     662:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <counter>
				free(locationlist);
     666:	c8 01       	movw	r24, r16
     668:	a9 d3       	rcall	.+1874   	; 0xdbc <free>
     66a:	89 28       	or	r8, r9
				if(position == 0){
     66c:	29 f4       	brne	.+10     	; 0x678 <moveToNewLocation+0x154>
     66e:	70 92 3e 01 	sts	0x013E, r7	; 0x80013e <locationList+0x1>
					locationList = newLocation;	
     672:	60 92 3d 01 	sts	0x013D, r6	; 0x80013d <locationList>
     676:	03 c0       	rjmp	.+6      	; 0x67e <moveToNewLocation+0x15a>
     678:	f7 01       	movw	r30, r14
				}else{
					previousLocation->next = newLocation;
     67a:	77 82       	std	Z+7, r7	; 0x07
     67c:	66 82       	std	Z+6, r6	; 0x06
     67e:	e1 e3       	ldi	r30, 0x31	; 49
				}
				currentLocation.x = x;
     680:	f1 e0       	ldi	r31, 0x01	; 1
     682:	d1 82       	std	Z+1, r13	; 0x01
     684:	c0 82       	st	Z, r12
     686:	b3 82       	std	Z+3, r11	; 0x03
				currentLocation.y = y;
     688:	a2 82       	std	Z+2, r10	; 0x02
     68a:	81 e0       	ldi	r24, 0x01	; 1
			previousLocation = locationlist;
			locationlist = locationlist->next;
			locationCounter++;
			
		}
		return 1;
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	1a c0       	rjmp	.+52     	; 0x6c4 <moveToNewLocation+0x1a0>
				}else{
					previousLocation->next = newLocation;
				}
				currentLocation.x = x;
				currentLocation.y = y;
				break;
     690:	78 01       	movw	r14, r16
			}
			previousLocation = locationlist;
			locationlist = locationlist->next;
     692:	f7 01       	movw	r30, r14
     694:	06 81       	ldd	r16, Z+6	; 0x06
     696:	17 81       	ldd	r17, Z+7	; 0x07
			locationCounter++;
     698:	01 96       	adiw	r24, 0x01	; 1
		
		locationlist = locationList;
		locationCounter = 0;
		LocationList *newLocation = (LocationList *)malloc(sizeof(LocationList));
		LocationList *previousLocation = NULL; 
		while(locationlist != NULL){
     69a:	01 15       	cp	r16, r1
     69c:	11 05       	cpc	r17, r1
			previousLocation = locationlist;
			locationlist = locationlist->next;
			locationCounter++;
			
		}
		return 1;
     69e:	19 f6       	brne	.-122    	; 0x626 <moveToNewLocation+0x102>
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	90 e0       	ldi	r25, 0x00	; 0
		}
	}else
	{
		displayClr();
     6a4:	0f c0       	rjmp	.+30     	; 0x6c4 <moveToNewLocation+0x1a0>
     6a6:	ef dd       	rcall	.-1058   	; 0x286 <displayClr>
		return 0;
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	0b c0       	rjmp	.+22     	; 0x6c4 <moveToNewLocation+0x1a0>
			locationlist = locationlist->next;
		}
		
		locationlist = locationList;
		locationCounter = 0;
		LocationList *newLocation = (LocationList *)malloc(sizeof(LocationList));
     6ae:	88 e0       	ldi	r24, 0x08	; 8
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	ec d2       	rcall	.+1496   	; 0xc8c <malloc>
     6b4:	3c 01       	movw	r6, r24
     6b6:	81 14       	cp	r8, r1
		LocationList *previousLocation = NULL; 
		while(locationlist != NULL){
			if(locationCounter == position){
     6b8:	91 04       	cpc	r9, r1
     6ba:	09 f4       	brne	.+2      	; 0x6be <moveToNewLocation+0x19a>
     6bc:	b8 cf       	rjmp	.-144    	; 0x62e <moveToNewLocation+0x10a>
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	e7 cf       	rjmp	.-50     	; 0x692 <moveToNewLocation+0x16e>
     6c4:	df 91       	pop	r29
	{
		displayClr();
		return 0;
	}
	return 1;
}
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	ff 90       	pop	r15
     6ce:	ef 90       	pop	r14
     6d0:	df 90       	pop	r13
     6d2:	cf 90       	pop	r12
     6d4:	bf 90       	pop	r11
     6d6:	af 90       	pop	r10
     6d8:	9f 90       	pop	r9
     6da:	8f 90       	pop	r8
     6dc:	7f 90       	pop	r7
     6de:	6f 90       	pop	r6
     6e0:	08 95       	ret

000006e2 <moveSnakeUp>:
     6e2:	e1 e3       	ldi	r30, 0x31	; 49
		
int moveSnakeUp(){
	
	int x = currentLocation.x;
     6e4:	f1 e0       	ldi	r31, 0x01	; 1
     6e6:	80 81       	ld	r24, Z
     6e8:	91 81       	ldd	r25, Z+1	; 0x01
	int y = currentLocation.y;
     6ea:	62 81       	ldd	r22, Z+2	; 0x02
     6ec:	73 81       	ldd	r23, Z+3	; 0x03
	
	x--;
     6ee:	01 97       	sbiw	r24, 0x01	; 1
     6f0:	10 f4       	brcc	.+4      	; 0x6f6 <moveSnakeUp+0x14>
	if(x == -1){
		x = 7;
     6f2:	87 e0       	ldi	r24, 0x07	; 7
     6f4:	90 e0       	ldi	r25, 0x00	; 0
	}
	if(moveToNewLocation(x,y)){
     6f6:	16 df       	rcall	.-468    	; 0x524 <moveToNewLocation>
     6f8:	00 97       	sbiw	r24, 0x00	; 0
     6fa:	19 f0       	breq	.+6      	; 0x702 <moveSnakeUp+0x20>
		update();
     6fc:	34 de       	rcall	.-920    	; 0x366 <update>
     6fe:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	08 95       	ret

00000704 <moveSnakeDown>:
	}else{
		return 0;
	}
	
}
     704:	e1 e3       	ldi	r30, 0x31	; 49
int moveSnakeDown(){
	int x = currentLocation.x;
     706:	f1 e0       	ldi	r31, 0x01	; 1
     708:	80 81       	ld	r24, Z
     70a:	91 81       	ldd	r25, Z+1	; 0x01
	int y = currentLocation.y;
     70c:	62 81       	ldd	r22, Z+2	; 0x02
     70e:	73 81       	ldd	r23, Z+3	; 0x03
	
	x++;
     710:	01 96       	adiw	r24, 0x01	; 1
	if(x == 8){
     712:	88 30       	cpi	r24, 0x08	; 8
     714:	91 05       	cpc	r25, r1
     716:	11 f4       	brne	.+4      	; 0x71c <moveSnakeDown+0x18>
		x = 0;
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
	}
	if(moveToNewLocation(x,y)){
     71c:	03 df       	rcall	.-506    	; 0x524 <moveToNewLocation>
     71e:	00 97       	sbiw	r24, 0x00	; 0
     720:	19 f0       	breq	.+6      	; 0x728 <moveSnakeDown+0x24>
		update();
     722:	21 de       	rcall	.-958    	; 0x366 <update>
     724:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	08 95       	ret

0000072a <moveSnakeLeft>:
	}else{
		return 0;
	}
}
     72a:	e1 e3       	ldi	r30, 0x31	; 49

int moveSnakeLeft(){
	int x = currentLocation.x;
     72c:	f1 e0       	ldi	r31, 0x01	; 1
     72e:	80 81       	ld	r24, Z
     730:	91 81       	ldd	r25, Z+1	; 0x01
	int y = currentLocation.y;
     732:	62 81       	ldd	r22, Z+2	; 0x02
     734:	73 81       	ldd	r23, Z+3	; 0x03

	y++;
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
	if(y == 8){
     73a:	68 30       	cpi	r22, 0x08	; 8
     73c:	71 05       	cpc	r23, r1
     73e:	11 f4       	brne	.+4      	; 0x744 <moveSnakeLeft+0x1a>
		y = 0;
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	70 e0       	ldi	r23, 0x00	; 0
	}
	if(moveToNewLocation(x,y)){
     744:	ef de       	rcall	.-546    	; 0x524 <moveToNewLocation>
     746:	00 97       	sbiw	r24, 0x00	; 0
     748:	19 f0       	breq	.+6      	; 0x750 <moveSnakeLeft+0x26>
		update();
     74a:	0d de       	rcall	.-998    	; 0x366 <update>
     74c:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	08 95       	ret

00000752 <moveSnakeRight>:
		}else{
		return 0;
	}
}
     752:	e1 e3       	ldi	r30, 0x31	; 49

int moveSnakeRight(){
	int x = currentLocation.x;
     754:	f1 e0       	ldi	r31, 0x01	; 1
     756:	80 81       	ld	r24, Z
     758:	91 81       	ldd	r25, Z+1	; 0x01
	int y = currentLocation.y;
     75a:	62 81       	ldd	r22, Z+2	; 0x02
     75c:	73 81       	ldd	r23, Z+3	; 0x03
	
	y--;
     75e:	61 50       	subi	r22, 0x01	; 1
     760:	71 09       	sbc	r23, r1
     762:	10 f4       	brcc	.+4      	; 0x768 <moveSnakeRight+0x16>
	if(y == -1){
		y = 7;
     764:	67 e0       	ldi	r22, 0x07	; 7
     766:	70 e0       	ldi	r23, 0x00	; 0
	}
	if(moveToNewLocation(x,y)){
     768:	dd de       	rcall	.-582    	; 0x524 <moveToNewLocation>
     76a:	00 97       	sbiw	r24, 0x00	; 0
     76c:	19 f0       	breq	.+6      	; 0x774 <moveSnakeRight+0x22>
		update();
     76e:	fb dd       	rcall	.-1034   	; 0x366 <update>
     770:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	08 95       	ret

00000776 <spi_masterInit>:
		}else{
		return 0;
	}
     776:	8f ef       	ldi	r24, 0xFF	; 255
void displayOff(void)
{
	spi_slaveSelect(0);		// Select display chip
	spi_write(0x0C);		// Register 0B: Shutdown register
	spi_write(0x00);		// -> 1 = Normal operation
	spi_slaveDeSelect(0);	// Deselect display chip
     778:	87 bb       	out	0x17, r24	; 23
     77a:	bb 98       	cbi	0x17, 3	; 23
     77c:	c0 9a       	sbi	0x18, 0	; 24
     77e:	82 e5       	ldi	r24, 0x52	; 82
     780:	8d b9       	out	0x0d, r24	; 13
     782:	08 95       	ret

00000784 <spi_write>:
     784:	8f b9       	out	0x0f, r24	; 15
     786:	77 9b       	sbis	0x0e, 7	; 14
     788:	fe cf       	rjmp	.-4      	; 0x786 <spi_write+0x2>
     78a:	08 95       	ret

0000078c <spi_slaveSelect>:
     78c:	98 b3       	in	r25, 0x18	; 24
     78e:	21 e0       	ldi	r18, 0x01	; 1
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	02 c0       	rjmp	.+4      	; 0x798 <spi_slaveSelect+0xc>
     794:	22 0f       	add	r18, r18
     796:	33 1f       	adc	r19, r19
     798:	8a 95       	dec	r24
     79a:	e2 f7       	brpl	.-8      	; 0x794 <spi_slaveSelect+0x8>
     79c:	20 95       	com	r18
     79e:	29 23       	and	r18, r25
     7a0:	28 bb       	out	0x18, r18	; 24
     7a2:	08 95       	ret

000007a4 <spi_slaveDeSelect>:
     7a4:	98 b3       	in	r25, 0x18	; 24
     7a6:	21 e0       	ldi	r18, 0x01	; 1
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <spi_slaveDeSelect+0xc>
     7ac:	22 0f       	add	r18, r18
     7ae:	33 1f       	adc	r19, r19
     7b0:	8a 95       	dec	r24
     7b2:	e2 f7       	brpl	.-8      	; 0x7ac <spi_slaveDeSelect+0x8>
     7b4:	29 2b       	or	r18, r25
     7b6:	28 bb       	out	0x18, r18	; 24
     7b8:	08 95       	ret

000007ba <displayDriverInit>:
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	e7 df       	rcall	.-50     	; 0x78c <spi_slaveSelect>
     7be:	89 e0       	ldi	r24, 0x09	; 9
     7c0:	e1 df       	rcall	.-62     	; 0x784 <spi_write>
     7c2:	8f ef       	ldi	r24, 0xFF	; 255
     7c4:	df df       	rcall	.-66     	; 0x784 <spi_write>
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	ed df       	rcall	.-38     	; 0x7a4 <spi_slaveDeSelect>
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	df df       	rcall	.-66     	; 0x78c <spi_slaveSelect>
     7ce:	8a e0       	ldi	r24, 0x0A	; 10
     7d0:	d9 df       	rcall	.-78     	; 0x784 <spi_write>
     7d2:	8f e0       	ldi	r24, 0x0F	; 15
     7d4:	d7 df       	rcall	.-82     	; 0x784 <spi_write>
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	e5 df       	rcall	.-54     	; 0x7a4 <spi_slaveDeSelect>
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	d7 df       	rcall	.-82     	; 0x78c <spi_slaveSelect>
     7de:	8b e0       	ldi	r24, 0x0B	; 11
     7e0:	d1 df       	rcall	.-94     	; 0x784 <spi_write>
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	cf df       	rcall	.-98     	; 0x784 <spi_write>
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	dd df       	rcall	.-70     	; 0x7a4 <spi_slaveDeSelect>
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	cf df       	rcall	.-98     	; 0x78c <spi_slaveSelect>
     7ee:	8c e0       	ldi	r24, 0x0C	; 12
     7f0:	c9 df       	rcall	.-110    	; 0x784 <spi_write>
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	c7 df       	rcall	.-114    	; 0x784 <spi_write>
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	d5 cf       	rjmp	.-86     	; 0x7a4 <spi_slaveDeSelect>
     7fa:	08 95       	ret

000007fc <spi_writeWord>:
}

void spi_writeWord(unsigned char adress, unsigned char data )
{
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	d8 2f       	mov	r29, r24
     802:	c6 2f       	mov	r28, r22
	spi_slaveSelect(0);		// Select display chip
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	c2 df       	rcall	.-124    	; 0x78c <spi_slaveSelect>
	spi_write(adress);		// digit adress: (digit place)
     808:	8d 2f       	mov	r24, r29
     80a:	bc df       	rcall	.-136    	; 0x784 <spi_write>
	spi_write(data);		// digit value: 0
     80c:	8c 2f       	mov	r24, r28
     80e:	ba df       	rcall	.-140    	; 0x784 <spi_write>
	spi_slaveDeSelect(0);	// Deselect display chip
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	c8 df       	rcall	.-112    	; 0x7a4 <spi_slaveDeSelect>
     814:	df 91       	pop	r29
}
     816:	cf 91       	pop	r28
     818:	08 95       	ret

0000081a <clearDisplay>:
     81a:	cf 93       	push	r28
	}
}

void clearDisplay(void)
{
	for (char i =1; i<=4; i++)
     81c:	c1 e0       	ldi	r28, 0x01	; 1
	{
		spi_writeWord(i, 0);
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	8c 2f       	mov	r24, r28
     822:	ec df       	rcall	.-40     	; 0x7fc <spi_writeWord>
	}
}

void clearDisplay(void)
{
	for (char i =1; i<=4; i++)
     824:	cf 5f       	subi	r28, 0xFF	; 255
     826:	c5 30       	cpi	r28, 0x05	; 5
     828:	d1 f7       	brne	.-12     	; 0x81e <clearDisplay+0x4>
	{
		spi_writeWord(i, 0);
	}
}
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret

0000082e <writeLedDisplay>:
	spi_write(data);		// digit value: 0
	spi_slaveDeSelect(0);	// Deselect display chip
}

void writeLedDisplay(int value)
{
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	08 2f       	mov	r16, r24
     838:	19 2f       	mov	r17, r25
	clearDisplay();
     83a:	ef df       	rcall	.-34     	; 0x81a <clearDisplay>
     83c:	c0 2f       	mov	r28, r16
     83e:	d1 2f       	mov	r29, r17
     840:	c0 31       	cpi	r28, 0x10	; 16
     842:	87 e2       	ldi	r24, 0x27	; 39
     844:	d8 07       	cpc	r29, r24
     846:	14 f0       	brlt	.+4      	; 0x84c <writeLedDisplay+0x1e>
     848:	cf e0       	ldi	r28, 0x0F	; 15
     84a:	d7 e2       	ldi	r29, 0x27	; 39
	if(value > 9999){
		value = 9999;
	}
	if(value < 0)
     84c:	dd 23       	and	r29, r29
     84e:	54 f5       	brge	.+84     	; 0x8a4 <writeLedDisplay+0x76>
		if(value < -999)
		{
			value = -999;
		}

		int tempValue = abs(value);
     850:	c9 31       	cpi	r28, 0x19	; 25
     852:	8c ef       	ldi	r24, 0xFC	; 252
     854:	d8 07       	cpc	r29, r24
     856:	14 f4       	brge	.+4      	; 0x85c <writeLedDisplay+0x2e>
     858:	c9 e1       	ldi	r28, 0x19	; 25
     85a:	dc ef       	ldi	r29, 0xFC	; 252
     85c:	8e 01       	movw	r16, r28
     85e:	dd 23       	and	r29, r29
     860:	24 f4       	brge	.+8      	; 0x86a <writeLedDisplay+0x3c>
     862:	00 27       	eor	r16, r16
     864:	11 27       	eor	r17, r17
     866:	0c 1b       	sub	r16, r28
     868:	1d 0b       	sbc	r17, r29
		int num3 = (tempValue / 1) % 10;
		int num2 = (tempValue / 10) % 10;
		int num1 = (tempValue / 100) % 10;

		spi_writeWord(4, 10);
     86a:	6a e0       	ldi	r22, 0x0A	; 10
     86c:	84 e0       	ldi	r24, 0x04	; 4
     86e:	c6 df       	rcall	.-116    	; 0x7fc <spi_writeWord>
		spi_writeWord(3, num1);
     870:	c8 01       	movw	r24, r16
     872:	64 e6       	ldi	r22, 0x64	; 100
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	e3 d1       	rcall	.+966    	; 0xc3e <__divmodhi4>
     878:	cb 01       	movw	r24, r22
     87a:	ca e0       	ldi	r28, 0x0A	; 10
     87c:	d0 e0       	ldi	r29, 0x00	; 0
     87e:	be 01       	movw	r22, r28
     880:	de d1       	rcall	.+956    	; 0xc3e <__divmodhi4>
     882:	68 2f       	mov	r22, r24
     884:	83 e0       	ldi	r24, 0x03	; 3
     886:	ba df       	rcall	.-140    	; 0x7fc <spi_writeWord>
		spi_writeWord(2, num2);
     888:	c8 01       	movw	r24, r16
     88a:	be 01       	movw	r22, r28
     88c:	d8 d1       	rcall	.+944    	; 0xc3e <__divmodhi4>
     88e:	18 2f       	mov	r17, r24
     890:	cb 01       	movw	r24, r22
     892:	be 01       	movw	r22, r28
     894:	d4 d1       	rcall	.+936    	; 0xc3e <__divmodhi4>
     896:	68 2f       	mov	r22, r24
     898:	82 e0       	ldi	r24, 0x02	; 2
     89a:	b0 df       	rcall	.-160    	; 0x7fc <spi_writeWord>
		spi_writeWord(1, num3);
     89c:	61 2f       	mov	r22, r17
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	ad df       	rcall	.-166    	; 0x7fc <spi_writeWord>
     8a2:	23 c0       	rjmp	.+70     	; 0x8ea <writeLedDisplay+0xbc>
		int num4 = (value / 1) % 10;
		int num3 = (value / 10) % 10;
		int num2 = (value / 100) % 10;
		int num1 = (value / 1000) % 10;

		spi_writeWord(4, num1);
     8a4:	ce 01       	movw	r24, r28
     8a6:	68 ee       	ldi	r22, 0xE8	; 232
     8a8:	73 e0       	ldi	r23, 0x03	; 3
     8aa:	c9 d1       	rcall	.+914    	; 0xc3e <__divmodhi4>
     8ac:	cb 01       	movw	r24, r22
     8ae:	0a e0       	ldi	r16, 0x0A	; 10
     8b0:	10 e0       	ldi	r17, 0x00	; 0
     8b2:	b8 01       	movw	r22, r16
     8b4:	c4 d1       	rcall	.+904    	; 0xc3e <__divmodhi4>
     8b6:	68 2f       	mov	r22, r24
     8b8:	84 e0       	ldi	r24, 0x04	; 4
     8ba:	a0 df       	rcall	.-192    	; 0x7fc <spi_writeWord>
		spi_writeWord(3, num2);
     8bc:	ce 01       	movw	r24, r28
     8be:	64 e6       	ldi	r22, 0x64	; 100
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	bd d1       	rcall	.+890    	; 0xc3e <__divmodhi4>
     8c4:	cb 01       	movw	r24, r22
     8c6:	b8 01       	movw	r22, r16
     8c8:	ba d1       	rcall	.+884    	; 0xc3e <__divmodhi4>
     8ca:	68 2f       	mov	r22, r24
     8cc:	83 e0       	ldi	r24, 0x03	; 3
     8ce:	96 df       	rcall	.-212    	; 0x7fc <spi_writeWord>
		spi_writeWord(2, num3);
     8d0:	ce 01       	movw	r24, r28
     8d2:	b8 01       	movw	r22, r16
     8d4:	b4 d1       	rcall	.+872    	; 0xc3e <__divmodhi4>
     8d6:	c8 2f       	mov	r28, r24
     8d8:	cb 01       	movw	r24, r22
     8da:	b8 01       	movw	r22, r16
     8dc:	b0 d1       	rcall	.+864    	; 0xc3e <__divmodhi4>
     8de:	68 2f       	mov	r22, r24
     8e0:	82 e0       	ldi	r24, 0x02	; 2
     8e2:	8c df       	rcall	.-232    	; 0x7fc <spi_writeWord>
     8e4:	6c 2f       	mov	r22, r28
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	89 df       	rcall	.-238    	; 0x7fc <spi_writeWord>
		spi_writeWord(1, num4);
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
	}
}
     8f2:	08 95       	ret

000008f4 <calculateNewScoreAppleCollected>:
     8f4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <score>
     8f8:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <score+0x1>
	}
}

void calculateNewScoreAppleCollected()
{
	score += 20;
     8fc:	44 96       	adiw	r24, 0x14	; 20
     8fe:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <score+0x1>
     902:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <score>
	writeLedDisplay(score);
     906:	93 cf       	rjmp	.-218    	; 0x82e <writeLedDisplay>
     908:	08 95       	ret

0000090a <resetScore>:
}

void resetScore(){
	score = 0;
     90a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <score+0x1>
     90e:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <score>
	writeLedDisplay(score);
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	8b cf       	rjmp	.-234    	; 0x82e <writeLedDisplay>
     918:	08 95       	ret

0000091a <calculateNewScoreMovement>:
}

void calculateNewScoreMovement()
{
     91a:	08 95       	ret

0000091c <menu>:
int tick = 0;
int check = 1;

void menu(){
	int position = 0;
	init_4bits_mode();
     91c:	23 d1       	rcall	.+582    	; 0xb64 <init_4bits_mode>
	lcd_write_command(1);
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	53 d1       	rcall	.+678    	; 0xbc8 <lcd_write_command>
	lcd_write_command(12);
     922:	8c e0       	ldi	r24, 0x0C	; 12
     924:	51 d1       	rcall	.+674    	; 0xbc8 <lcd_write_command>
	lcd_write_command(2);
     926:	82 e0       	ldi	r24, 0x02	; 2
     928:	4f d1       	rcall	.+670    	; 0xbc8 <lcd_write_command>
	
	if(position == 0){
		lcd_write_string("> Easy");
     92a:	8e e0       	ldi	r24, 0x0E	; 14
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	3e d1       	rcall	.+636    	; 0xbac <lcd_write_string>
		lcd_write_command(168);
     930:	88 ea       	ldi	r24, 0xA8	; 168
     932:	4a d1       	rcall	.+660    	; 0xbc8 <lcd_write_command>
		lcd_write_string(" ");
     934:	85 e1       	ldi	r24, 0x15	; 21
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	39 d1       	rcall	.+626    	; 0xbac <lcd_write_string>
		lcd_write_command(168);
     93a:	88 ea       	ldi	r24, 0xA8	; 168
     93c:	45 d1       	rcall	.+650    	; 0xbc8 <lcd_write_command>
     93e:	87 e1       	ldi	r24, 0x17	; 23
		lcd_write_string("  Normal");
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	34 d1       	rcall	.+616    	; 0xbac <lcd_write_string>
     944:	ff cf       	rjmp	.-2      	; 0x944 <menu+0x28>

00000946 <gameOver>:
     946:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <tick>
	wait(1000);
}

void gameOver(){
	
	if(1 == tick)
     94a:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <tick+0x1>
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	91 05       	cpc	r25, r1
     952:	21 f4       	brne	.+8      	; 0x95c <gameOver+0x16>
	{
		drawImage();
     954:	10 dc       	rcall	.-2016   	; 0x176 <drawImage>
		update();
     956:	07 dd       	rcall	.-1522   	; 0x366 <update>
		beepGameOver();
     958:	48 c1       	rjmp	.+656    	; 0xbea <beepGameOver>
     95a:	08 95       	ret
     95c:	81 3a       	cpi	r24, 0xA1	; 161
	}else
	if(tick > 4000)
     95e:	9f 40       	sbci	r25, 0x0F	; 15
     960:	7c f0       	brlt	.+30     	; 0x980 <gameOver+0x3a>
	{
		gStatus = COUNTING;
     962:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <gStatus>
		resetDisplay();
		resetScore();
     966:	ba dd       	rcall	.-1164   	; 0x4dc <resetDisplay>
     968:	d0 df       	rcall	.-96     	; 0x90a <resetScore>
		displayClr();
     96a:	8d dc       	rcall	.-1766   	; 0x286 <displayClr>
		update();
     96c:	fc dc       	rcall	.-1544   	; 0x366 <update>
     96e:	64 e0       	ldi	r22, 0x04	; 4
		setStartLocation(4,4);
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	84 e0       	ldi	r24, 0x04	; 4
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	4f dc       	rcall	.-1890   	; 0x216 <setStartLocation>
     978:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <tick+0x1>
		tick = 0;
     97c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <tick>
     980:	08 95       	ret

00000982 <playing>:
     982:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <check>
	}
	
}

void playing(){
	if(check)
     986:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <check+0x1>
     98a:	89 2b       	or	r24, r25
     98c:	59 f0       	breq	.+22     	; 0x9a4 <playing+0x22>
	{
		enum eStatus newStatus = checkDirection();
     98e:	af db       	rcall	.-2210   	; 0xee <checkDirection>
		if(status != newStatus)
     990:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <status>
     994:	89 17       	cp	r24, r25
     996:	31 f0       	breq	.+12     	; 0x9a4 <playing+0x22>
		{
			check = 0;
     998:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <check+0x1>
     99c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <check>
			status = newStatus;
     9a0:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <status>
		}
	}
	if (tick == 200)
     9a4:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <tick>
     9a8:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <tick+0x1>
     9ac:	88 3c       	cpi	r24, 0xC8	; 200
     9ae:	91 05       	cpc	r25, r1
     9b0:	79 f5       	brne	.+94     	; 0xa10 <playing+0x8e>
	{
		tick = 0;
     9b2:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <tick+0x1>
     9b6:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <tick>
		switch (status)
     9ba:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <status>
     9be:	81 30       	cpi	r24, 0x01	; 1
     9c0:	69 f0       	breq	.+26     	; 0x9dc <playing+0x5a>
     9c2:	28 f0       	brcs	.+10     	; 0x9ce <playing+0x4c>
     9c4:	82 30       	cpi	r24, 0x02	; 2
     9c6:	89 f0       	breq	.+34     	; 0x9ea <playing+0x68>
     9c8:	83 30       	cpi	r24, 0x03	; 3
     9ca:	b1 f0       	breq	.+44     	; 0x9f8 <playing+0x76>
		{
			case GOING_UP:
			if(!moveSnakeUp())
     9cc:	1b c0       	rjmp	.+54     	; 0xa04 <playing+0x82>
     9ce:	89 de       	rcall	.-750    	; 0x6e2 <moveSnakeUp>
     9d0:	89 2b       	or	r24, r25
     9d2:	c1 f4       	brne	.+48     	; 0xa04 <playing+0x82>
			{
				gStatus = GAMEOVER;
     9d4:	82 e0       	ldi	r24, 0x02	; 2
     9d6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <gStatus>
			}
			break;
			
			
			case GOING_DOWN :
			if(!moveSnakeDown())
     9da:	14 c0       	rjmp	.+40     	; 0xa04 <playing+0x82>
     9dc:	93 de       	rcall	.-730    	; 0x704 <moveSnakeDown>
     9de:	89 2b       	or	r24, r25
     9e0:	89 f4       	brne	.+34     	; 0xa04 <playing+0x82>
			{
				gStatus = GAMEOVER;
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <gStatus>
			}
			break;
			
			
			case GOING_LEFT:
			if(!moveSnakeLeft())
     9e8:	0d c0       	rjmp	.+26     	; 0xa04 <playing+0x82>
     9ea:	9f de       	rcall	.-706    	; 0x72a <moveSnakeLeft>
     9ec:	89 2b       	or	r24, r25
     9ee:	51 f4       	brne	.+20     	; 0xa04 <playing+0x82>
			{
				gStatus = GAMEOVER;
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <gStatus>
			}
			break;
			
			
			case GOING_RIGHT:
			if(!moveSnakeRight())
     9f6:	06 c0       	rjmp	.+12     	; 0xa04 <playing+0x82>
     9f8:	ac de       	rcall	.-680    	; 0x752 <moveSnakeRight>
     9fa:	89 2b       	or	r24, r25
     9fc:	19 f4       	brne	.+6      	; 0xa04 <playing+0x82>
			{
				gStatus = GAMEOVER;
     9fe:	82 e0       	ldi	r24, 0x02	; 2
     a00:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <gStatus>
			
			
			case WAITING:
			break;
		}
		check = 1;
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <check+0x1>
     a0c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <check>
     a10:	08 95       	ret

00000a12 <counting>:
	}
}

void counting(){
	if(tick == 700)
     a12:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <tick>
     a16:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <tick+0x1>
     a1a:	8c 3b       	cpi	r24, 0xBC	; 188
     a1c:	22 e0       	ldi	r18, 0x02	; 2
     a1e:	92 07       	cpc	r25, r18
     a20:	39 f4       	brne	.+14     	; 0xa30 <counting+0x1e>
	{
		beepOn();
     a22:	de d0       	rcall	.+444    	; 0xbe0 <beepOn>
		drawCounting(3);
     a24:	83 e0       	ldi	r24, 0x03	; 3
     a26:	90 e0       	ldi	r25, 0x00	; 0
		update();
     a28:	b4 db       	rcall	.-2200   	; 0x192 <drawCounting>
     a2a:	9d dc       	rcall	.-1734   	; 0x366 <update>
		beepOff();
     a2c:	dc c0       	rjmp	.+440    	; 0xbe6 <beepOff>
     a2e:	08 95       	ret
     a30:	88 37       	cpi	r24, 0x78	; 120
	}else
	if(tick == 1400)
     a32:	25 e0       	ldi	r18, 0x05	; 5
     a34:	92 07       	cpc	r25, r18
     a36:	39 f4       	brne	.+14     	; 0xa46 <counting+0x34>
	{
		beepOn();
     a38:	d3 d0       	rcall	.+422    	; 0xbe0 <beepOn>
		drawCounting(2);
     a3a:	82 e0       	ldi	r24, 0x02	; 2
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a9 db       	rcall	.-2222   	; 0x192 <drawCounting>
     a40:	92 dc       	rcall	.-1756   	; 0x366 <update>
		update();
     a42:	d1 c0       	rjmp	.+418    	; 0xbe6 <beepOff>
		beepOff();
     a44:	08 95       	ret
     a46:	84 33       	cpi	r24, 0x34	; 52
	}else
	if(tick == 2100)
     a48:	28 e0       	ldi	r18, 0x08	; 8
     a4a:	92 07       	cpc	r25, r18
	{
		beepOn();
     a4c:	39 f4       	brne	.+14     	; 0xa5c <counting+0x4a>
     a4e:	c8 d0       	rcall	.+400    	; 0xbe0 <beepOn>
		drawCounting(1);
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	90 e0       	ldi	r25, 0x00	; 0
		update();
     a54:	9e db       	rcall	.-2244   	; 0x192 <drawCounting>
		beepOff();
     a56:	87 dc       	rcall	.-1778   	; 0x366 <update>
     a58:	c6 c0       	rjmp	.+396    	; 0xbe6 <beepOff>
     a5a:	08 95       	ret
	}else
	if (tick == 2800)
     a5c:	80 3f       	cpi	r24, 0xF0	; 240
     a5e:	9a 40       	sbci	r25, 0x0A	; 10
     a60:	89 f4       	brne	.+34     	; 0xa84 <counting+0x72>
	{
		beepOn();
     a62:	be d0       	rcall	.+380    	; 0xbe0 <beepOn>
     a64:	10 dc       	rcall	.-2016   	; 0x286 <displayClr>
		displayClr();
     a66:	9e dc       	rcall	.-1732   	; 0x3a4 <displayDrawStart>
     a68:	c2 dc       	rcall	.-1660   	; 0x3ee <addCandy>
		displayDrawStart();
     a6a:	7d dc       	rcall	.-1798   	; 0x366 <update>
     a6c:	bc d0       	rcall	.+376    	; 0xbe6 <beepOff>
		addCandy();
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <gStatus>
		update();
     a74:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <check+0x1>
		beepOff();
     a78:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <check>
		gStatus = PLAYING;
     a7c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <tick+0x1>
		check = 0;
     a80:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <tick>
     a84:	08 95       	ret

00000a86 <startGame>:
     a86:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <gStatus>
		tick = 0;
     a8a:	81 30       	cpi	r24, 0x01	; 1
     a8c:	31 f0       	breq	.+12     	; 0xa9a <startGame+0x14>
     a8e:	38 f0       	brcs	.+14     	; 0xa9e <startGame+0x18>
     a90:	82 30       	cpi	r24, 0x02	; 2
}


void startGame()
{
	switch(gStatus)
     a92:	39 f0       	breq	.+14     	; 0xaa2 <startGame+0x1c>
     a94:	83 30       	cpi	r24, 0x03	; 3
     a96:	39 f0       	breq	.+14     	; 0xaa6 <startGame+0x20>
     a98:	07 c0       	rjmp	.+14     	; 0xaa8 <startGame+0x22>
	{
		case PLAYING :
		{
			playing();
     a9a:	73 df       	rcall	.-282    	; 0x982 <playing>
		}
		
		
		case COUNTING :
		{
			counting();
     a9c:	05 c0       	rjmp	.+10     	; 0xaa8 <startGame+0x22>
			break;
     a9e:	b9 df       	rcall	.-142    	; 0xa12 <counting>
		}
		
		
		case GAMEOVER :
		{
			gameOver();
     aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <startGame+0x22>
			break;
     aa2:	51 df       	rcall	.-350    	; 0x946 <gameOver>
		}
		case MENU :
		{
			menu();
     aa4:	01 c0       	rjmp	.+2      	; 0xaa8 <startGame+0x22>
     aa6:	3a df       	rcall	.-396    	; 0x91c <menu>
			break;
		}
	}
	tick++;
     aa8:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <tick>
     aac:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <tick+0x1>
     ab0:	01 96       	adiw	r24, 0x01	; 1
     ab2:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <tick+0x1>
     ab6:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <tick>
     aba:	08 95       	ret

00000abc <__vector_9>:
#include "headers/buttons.h"
#include "headers/sound.h"
#include "headers/game.h"

ISR( TIMER2_COMP_vect )
{
     abc:	1f 92       	push	r1
     abe:	0f 92       	push	r0
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	0f 92       	push	r0
     ac4:	11 24       	eor	r1, r1
     ac6:	0b b6       	in	r0, 0x3b	; 59
     ac8:	0f 92       	push	r0
     aca:	2f 93       	push	r18
     acc:	3f 93       	push	r19
     ace:	4f 93       	push	r20
     ad0:	5f 93       	push	r21
     ad2:	6f 93       	push	r22
     ad4:	7f 93       	push	r23
     ad6:	8f 93       	push	r24
     ad8:	9f 93       	push	r25
     ada:	af 93       	push	r26
     adc:	bf 93       	push	r27
     ade:	ef 93       	push	r30
     ae0:	ff 93       	push	r31
	startGame();
     ae2:	d1 df       	rcall	.-94     	; 0xa86 <startGame>
}
     ae4:	ff 91       	pop	r31
     ae6:	ef 91       	pop	r30
     ae8:	bf 91       	pop	r27
     aea:	af 91       	pop	r26
     aec:	9f 91       	pop	r25
     aee:	8f 91       	pop	r24
     af0:	7f 91       	pop	r23
     af2:	6f 91       	pop	r22
     af4:	5f 91       	pop	r21
     af6:	4f 91       	pop	r20
     af8:	3f 91       	pop	r19
     afa:	2f 91       	pop	r18
     afc:	0f 90       	pop	r0
     afe:	0b be       	out	0x3b, r0	; 59
     b00:	0f 90       	pop	r0
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	0f 90       	pop	r0
     b06:	1f 90       	pop	r1
     b08:	18 95       	reti

00000b0a <main>:


int main(void)
{
								//initializatie voor het scoreBord
	DDRB=0x01;					// Set PB0 pin as output for display select
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	87 bb       	out	0x17, r24	; 23
	spi_masterInit();			// Initialize spi module
     b0e:	33 de       	rcall	.-922    	; 0x776 <spi_masterInit>
	displayDriverInit();		// Initialize display chip
     b10:	54 de       	rcall	.-856    	; 0x7ba <displayDriverInit>
	displayInit();
     b12:	19 dc       	rcall	.-1998   	; 0x346 <displayInit>
	wait(500);
     b14:	84 ef       	ldi	r24, 0xF4	; 244
     b16:	91 e0       	ldi	r25, 0x01	; 1
     b18:	81 d0       	rcall	.+258    	; 0xc1c <wait>
     b1a:	8f e0       	ldi	r24, 0x0F	; 15
	DDRA = 0x0F;
     b1c:	8a bb       	out	0x1a, r24	; 26
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
	
	 DDRC = 0xff;           
     b20:	84 bb       	out	0x14, r24	; 20
     b22:	64 e0       	ldi	r22, 0x04	; 4

	setStartLocation(4,4);
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	84 e0       	ldi	r24, 0x04	; 4
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	75 db       	rcall	.-2326   	; 0x216 <setStartLocation>
     b2c:	87 e0       	ldi	r24, 0x07	; 7


	    OCR2 = 519;
     b2e:	83 bd       	out	0x23, r24	; 35
     b30:	88 e0       	ldi	r24, 0x08	; 8
	    TCCR2 = 1<<WGM21;
     b32:	85 bd       	out	0x25, r24	; 37
     b34:	87 b7       	in	r24, 0x37	; 55
	    
	    TIMSK = TIMSK | 1<<TOIE1 | 1<<OCIE2;
     b36:	84 68       	ori	r24, 0x84	; 132
     b38:	87 bf       	out	0x37, r24	; 55
     b3a:	85 b5       	in	r24, 0x25	; 37
	    TCCR2 |= 1<<CS22 | 0<<CS21 | 1<<CS20;
     b3c:	85 60       	ori	r24, 0x05	; 5
     b3e:	85 bd       	out	0x25, r24	; 37
     b40:	14 bc       	out	0x24, r1	; 36
	    TCNT2 = 0;
     b42:	78 94       	sei
	sei();
     b44:	ff cf       	rjmp	.-2      	; 0xb44 <main+0x3a>

00000b46 <lcd_strobe_lcd_e>:
void lcd_write_data(unsigned char byte);
void lcd_write_command(unsigned char byte);

void lcd_strobe_lcd_e(void)
{
	PORTC |= (1<<LCD_E);	// E high
     b46:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b48:	8f ec       	ldi	r24, 0xCF	; 207
     b4a:	97 e0       	ldi	r25, 0x07	; 7
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	f1 f7       	brne	.-4      	; 0xb4c <lcd_strobe_lcd_e+0x6>
     b50:	00 c0       	rjmp	.+0      	; 0xb52 <lcd_strobe_lcd_e+0xc>
     b52:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTC &= ~(1<<LCD_E);  	// E low
     b54:	ab 98       	cbi	0x15, 3	; 21
     b56:	8f ec       	ldi	r24, 0xCF	; 207
     b58:	97 e0       	ldi	r25, 0x07	; 7
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	f1 f7       	brne	.-4      	; 0xb5a <lcd_strobe_lcd_e+0x14>
     b5e:	00 c0       	rjmp	.+0      	; 0xb60 <lcd_strobe_lcd_e+0x1a>
     b60:	00 00       	nop
     b62:	08 95       	ret

00000b64 <init_4bits_mode>:
	_delay_ms(1);			// nodig?
}

void init_4bits_mode(void)
{
     b64:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
     b6a:	15 ba       	out	0x15, r1	; 21

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
     b6c:	c0 e2       	ldi	r28, 0x20	; 32
     b6e:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
     b70:	ea df       	rcall	.-44     	; 0xb46 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
	lcd_strobe_lcd_e();
     b72:	c5 bb       	out	0x15, r28	; 21
     b74:	e8 df       	rcall	.-48     	; 0xb46 <lcd_strobe_lcd_e>
	PORTC = 0x80;
     b76:	80 e8       	ldi	r24, 0x80	; 128
	lcd_strobe_lcd_e();
     b78:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
     b7a:	e5 df       	rcall	.-54     	; 0xb46 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
     b7c:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
     b7e:	e3 df       	rcall	.-58     	; 0xb46 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
     b80:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
     b82:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
     b84:	e0 df       	rcall	.-64     	; 0xb46 <lcd_strobe_lcd_e>
     b86:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x60;
     b88:	de df       	rcall	.-68     	; 0xb46 <lcd_strobe_lcd_e>
     b8a:	80 e6       	ldi	r24, 0x60	; 96
	lcd_strobe_lcd_e();
     b8c:	85 bb       	out	0x15, r24	; 21
     b8e:	db df       	rcall	.-74     	; 0xb46 <lcd_strobe_lcd_e>

}
     b90:	cf 91       	pop	r28
     b92:	08 95       	ret

00000b94 <lcd_write_data>:
		lcd_write_data(*str);
	}
}

void lcd_write_data(unsigned char byte)
{
     b94:	cf 93       	push	r28
     b96:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
     b98:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
     b9a:	aa 9a       	sbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
     b9c:	d4 df       	rcall	.-88     	; 0xb46 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
     b9e:	c2 95       	swap	r28
     ba0:	c0 7f       	andi	r28, 0xF0	; 240
     ba2:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
	lcd_strobe_lcd_e();
     ba4:	aa 9a       	sbi	0x15, 2	; 21
     ba6:	cf df       	rcall	.-98     	; 0xb46 <lcd_strobe_lcd_e>
}
     ba8:	cf 91       	pop	r28
     baa:	08 95       	ret

00000bac <lcd_write_string>:
	lcd_strobe_lcd_e();

}

void lcd_write_string(char *str)
{
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
     bb2:	88 81       	ld	r24, Y
     bb4:	88 23       	and	r24, r24
     bb6:	29 f0       	breq	.+10     	; 0xbc2 <lcd_write_string+0x16>
     bb8:	21 96       	adiw	r28, 0x01	; 1
		lcd_write_data(*str);
     bba:	ec df       	rcall	.-40     	; 0xb94 <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
     bbc:	89 91       	ld	r24, Y+
     bbe:	81 11       	cpse	r24, r1
     bc0:	fc cf       	rjmp	.-8      	; 0xbba <lcd_write_string+0xe>
		lcd_write_data(*str);
	}
}
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <lcd_write_command>:
	PORTC |= (1<<LCD_RS);
	lcd_strobe_lcd_e();
}

void lcd_write_command(unsigned char byte)
{
     bc8:	cf 93       	push	r28
     bca:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
     bcc:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<LCD_RS);
     bce:	aa 98       	cbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
     bd0:	ba df       	rcall	.-140    	; 0xb46 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
     bd2:	c2 95       	swap	r28
     bd4:	c0 7f       	andi	r28, 0xF0	; 240
     bd6:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<LCD_RS);
	lcd_strobe_lcd_e();
     bd8:	aa 98       	cbi	0x15, 2	; 21
     bda:	b5 df       	rcall	.-150    	; 0xb46 <lcd_strobe_lcd_e>
}
     bdc:	cf 91       	pop	r28
     bde:	08 95       	ret

00000be0 <beepOn>:

#define F_CPU 2000  // change this value to change the sound produced by the beep

void beepOn(void)
{
	 PORTC = 0xff;        // Turn ON the Buzzer conneted to PORTC
     be0:	8f ef       	ldi	r24, 0xFF	; 255
     be2:	85 bb       	out	0x15, r24	; 21
     be4:	08 95       	ret

00000be6 <beepOff>:
}

void beepOff(void)
{
	  PORTC = 0x00;        // Turn OFF the Buzzer connected to PORTC
     be6:	15 ba       	out	0x15, r1	; 21
     be8:	08 95       	ret

00000bea <beepGameOver>:

}

void beepGameOver()
{
     bea:	cf 93       	push	r28
		PORTC = 0xff;        // Turn ON the Buzzer conneted to PORTC
     bec:	cf ef       	ldi	r28, 0xFF	; 255
     bee:	c5 bb       	out	0x15, r28	; 21
		wait(300);
     bf0:	8c e2       	ldi	r24, 0x2C	; 44
     bf2:	91 e0       	ldi	r25, 0x01	; 1
     bf4:	13 d0       	rcall	.+38     	; 0xc1c <wait>
	    PORTC = 0x00;
     bf6:	15 ba       	out	0x15, r1	; 21
	    wait(500);        // Turn OFF the Buzzer connected to PORTC
     bf8:	84 ef       	ldi	r24, 0xF4	; 244
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	0f d0       	rcall	.+30     	; 0xc1c <wait>
	  	PORTC = 0xff;        // Turn ON the Buzzer conneted to PORTC
     bfe:	c5 bb       	out	0x15, r28	; 21
	  	wait(500);
     c00:	84 ef       	ldi	r24, 0xF4	; 244
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	0b d0       	rcall	.+22     	; 0xc1c <wait>
	    PORTC = 0x00;        // Turn OFF the Buzzer connected to PORTC
		wait(500);
     c06:	15 ba       	out	0x15, r1	; 21
     c08:	84 ef       	ldi	r24, 0xF4	; 244
     c0a:	91 e0       	ldi	r25, 0x01	; 1
		PORTC = 0xff;        // Turn ON the Buzzer conneted to PORTC
     c0c:	07 d0       	rcall	.+14     	; 0xc1c <wait>
	    wait(2000);
     c0e:	c5 bb       	out	0x15, r28	; 21
     c10:	80 ed       	ldi	r24, 0xD0	; 208
     c12:	97 e0       	ldi	r25, 0x07	; 7
     c14:	03 d0       	rcall	.+6      	; 0xc1c <wait>
		PORTC = 0x00;        // Turn OFF the Buzzer connected to PORTC
     c16:	15 ba       	out	0x15, r1	; 21
	  

     c18:	cf 91       	pop	r28
     c1a:	08 95       	ret

00000c1c <wait>:
#include <avr/io.h>
#include <util/delay.h>

void wait( int ms )
{
	for (int i=0; i<ms; i++)
     c1c:	18 16       	cp	r1, r24
     c1e:	19 06       	cpc	r1, r25
     c20:	6c f4       	brge	.+26     	; 0xc3c <wait+0x20>
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	ef ec       	ldi	r30, 0xCF	; 207
     c28:	f7 e0       	ldi	r31, 0x07	; 7
     c2a:	31 97       	sbiw	r30, 0x01	; 1
     c2c:	f1 f7       	brne	.-4      	; 0xc2a <wait+0xe>
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <wait+0x14>
     c30:	00 00       	nop
     c32:	2f 5f       	subi	r18, 0xFF	; 255
     c34:	3f 4f       	sbci	r19, 0xFF	; 255
     c36:	82 17       	cp	r24, r18
     c38:	93 07       	cpc	r25, r19
     c3a:	a9 f7       	brne	.-22     	; 0xc26 <wait+0xa>
     c3c:	08 95       	ret

00000c3e <__divmodhi4>:
     c3e:	97 fb       	bst	r25, 7
     c40:	07 2e       	mov	r0, r23
     c42:	16 f4       	brtc	.+4      	; 0xc48 <__divmodhi4+0xa>
     c44:	00 94       	com	r0
     c46:	06 d0       	rcall	.+12     	; 0xc54 <__divmodhi4_neg1>
     c48:	77 fd       	sbrc	r23, 7
     c4a:	08 d0       	rcall	.+16     	; 0xc5c <__divmodhi4_neg2>
     c4c:	0b d0       	rcall	.+22     	; 0xc64 <__udivmodhi4>
     c4e:	07 fc       	sbrc	r0, 7
     c50:	05 d0       	rcall	.+10     	; 0xc5c <__divmodhi4_neg2>
     c52:	3e f4       	brtc	.+14     	; 0xc62 <__divmodhi4_exit>

00000c54 <__divmodhi4_neg1>:
     c54:	90 95       	com	r25
     c56:	81 95       	neg	r24
     c58:	9f 4f       	sbci	r25, 0xFF	; 255
     c5a:	08 95       	ret

00000c5c <__divmodhi4_neg2>:
     c5c:	70 95       	com	r23
     c5e:	61 95       	neg	r22
     c60:	7f 4f       	sbci	r23, 0xFF	; 255

00000c62 <__divmodhi4_exit>:
     c62:	08 95       	ret

00000c64 <__udivmodhi4>:
     c64:	aa 1b       	sub	r26, r26
     c66:	bb 1b       	sub	r27, r27
     c68:	51 e1       	ldi	r21, 0x11	; 17
     c6a:	07 c0       	rjmp	.+14     	; 0xc7a <__udivmodhi4_ep>

00000c6c <__udivmodhi4_loop>:
     c6c:	aa 1f       	adc	r26, r26
     c6e:	bb 1f       	adc	r27, r27
     c70:	a6 17       	cp	r26, r22
     c72:	b7 07       	cpc	r27, r23
     c74:	10 f0       	brcs	.+4      	; 0xc7a <__udivmodhi4_ep>
     c76:	a6 1b       	sub	r26, r22
     c78:	b7 0b       	sbc	r27, r23

00000c7a <__udivmodhi4_ep>:
     c7a:	88 1f       	adc	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	5a 95       	dec	r21
     c80:	a9 f7       	brne	.-22     	; 0xc6c <__udivmodhi4_loop>
     c82:	80 95       	com	r24
     c84:	90 95       	com	r25
     c86:	bc 01       	movw	r22, r24
     c88:	cd 01       	movw	r24, r26
     c8a:	08 95       	ret

00000c8c <malloc>:
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	91 05       	cpc	r25, r1
     c98:	10 f4       	brcc	.+4      	; 0xc9e <malloc+0x12>
     c9a:	82 e0       	ldi	r24, 0x02	; 2
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <__flp>
     ca2:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <__flp+0x1>
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	a0 e0       	ldi	r26, 0x00	; 0
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	30 97       	sbiw	r30, 0x00	; 0
     cb0:	19 f1       	breq	.+70     	; 0xcf8 <malloc+0x6c>
     cb2:	40 81       	ld	r20, Z
     cb4:	51 81       	ldd	r21, Z+1	; 0x01
     cb6:	02 81       	ldd	r16, Z+2	; 0x02
     cb8:	13 81       	ldd	r17, Z+3	; 0x03
     cba:	48 17       	cp	r20, r24
     cbc:	59 07       	cpc	r21, r25
     cbe:	c8 f0       	brcs	.+50     	; 0xcf2 <malloc+0x66>
     cc0:	84 17       	cp	r24, r20
     cc2:	95 07       	cpc	r25, r21
     cc4:	69 f4       	brne	.+26     	; 0xce0 <malloc+0x54>
     cc6:	10 97       	sbiw	r26, 0x00	; 0
     cc8:	31 f0       	breq	.+12     	; 0xcd6 <malloc+0x4a>
     cca:	12 96       	adiw	r26, 0x02	; 2
     ccc:	0c 93       	st	X, r16
     cce:	12 97       	sbiw	r26, 0x02	; 2
     cd0:	13 96       	adiw	r26, 0x03	; 3
     cd2:	1c 93       	st	X, r17
     cd4:	27 c0       	rjmp	.+78     	; 0xd24 <malloc+0x98>
     cd6:	00 93 41 01 	sts	0x0141, r16	; 0x800141 <__flp>
     cda:	10 93 42 01 	sts	0x0142, r17	; 0x800142 <__flp+0x1>
     cde:	22 c0       	rjmp	.+68     	; 0xd24 <malloc+0x98>
     ce0:	21 15       	cp	r18, r1
     ce2:	31 05       	cpc	r19, r1
     ce4:	19 f0       	breq	.+6      	; 0xcec <malloc+0x60>
     ce6:	42 17       	cp	r20, r18
     ce8:	53 07       	cpc	r21, r19
     cea:	18 f4       	brcc	.+6      	; 0xcf2 <malloc+0x66>
     cec:	9a 01       	movw	r18, r20
     cee:	bd 01       	movw	r22, r26
     cf0:	ef 01       	movw	r28, r30
     cf2:	df 01       	movw	r26, r30
     cf4:	f8 01       	movw	r30, r16
     cf6:	db cf       	rjmp	.-74     	; 0xcae <malloc+0x22>
     cf8:	21 15       	cp	r18, r1
     cfa:	31 05       	cpc	r19, r1
     cfc:	f9 f0       	breq	.+62     	; 0xd3c <malloc+0xb0>
     cfe:	28 1b       	sub	r18, r24
     d00:	39 0b       	sbc	r19, r25
     d02:	24 30       	cpi	r18, 0x04	; 4
     d04:	31 05       	cpc	r19, r1
     d06:	80 f4       	brcc	.+32     	; 0xd28 <malloc+0x9c>
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	9b 81       	ldd	r25, Y+3	; 0x03
     d0c:	61 15       	cp	r22, r1
     d0e:	71 05       	cpc	r23, r1
     d10:	21 f0       	breq	.+8      	; 0xd1a <malloc+0x8e>
     d12:	fb 01       	movw	r30, r22
     d14:	93 83       	std	Z+3, r25	; 0x03
     d16:	82 83       	std	Z+2, r24	; 0x02
     d18:	04 c0       	rjmp	.+8      	; 0xd22 <malloc+0x96>
     d1a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__flp+0x1>
     d1e:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <__flp>
     d22:	fe 01       	movw	r30, r28
     d24:	32 96       	adiw	r30, 0x02	; 2
     d26:	44 c0       	rjmp	.+136    	; 0xdb0 <malloc+0x124>
     d28:	fe 01       	movw	r30, r28
     d2a:	e2 0f       	add	r30, r18
     d2c:	f3 1f       	adc	r31, r19
     d2e:	81 93       	st	Z+, r24
     d30:	91 93       	st	Z+, r25
     d32:	22 50       	subi	r18, 0x02	; 2
     d34:	31 09       	sbc	r19, r1
     d36:	39 83       	std	Y+1, r19	; 0x01
     d38:	28 83       	st	Y, r18
     d3a:	3a c0       	rjmp	.+116    	; 0xdb0 <malloc+0x124>
     d3c:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <__brkval>
     d40:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <__brkval+0x1>
     d44:	23 2b       	or	r18, r19
     d46:	41 f4       	brne	.+16     	; 0xd58 <malloc+0xcc>
     d48:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     d4c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     d50:	30 93 40 01 	sts	0x0140, r19	; 0x800140 <__brkval+0x1>
     d54:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <__brkval>
     d58:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     d5c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     d60:	21 15       	cp	r18, r1
     d62:	31 05       	cpc	r19, r1
     d64:	41 f4       	brne	.+16     	; 0xd76 <malloc+0xea>
     d66:	2d b7       	in	r18, 0x3d	; 61
     d68:	3e b7       	in	r19, 0x3e	; 62
     d6a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     d6e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     d72:	24 1b       	sub	r18, r20
     d74:	35 0b       	sbc	r19, r21
     d76:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <__brkval>
     d7a:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <__brkval+0x1>
     d7e:	e2 17       	cp	r30, r18
     d80:	f3 07       	cpc	r31, r19
     d82:	a0 f4       	brcc	.+40     	; 0xdac <malloc+0x120>
     d84:	2e 1b       	sub	r18, r30
     d86:	3f 0b       	sbc	r19, r31
     d88:	28 17       	cp	r18, r24
     d8a:	39 07       	cpc	r19, r25
     d8c:	78 f0       	brcs	.+30     	; 0xdac <malloc+0x120>
     d8e:	ac 01       	movw	r20, r24
     d90:	4e 5f       	subi	r20, 0xFE	; 254
     d92:	5f 4f       	sbci	r21, 0xFF	; 255
     d94:	24 17       	cp	r18, r20
     d96:	35 07       	cpc	r19, r21
     d98:	48 f0       	brcs	.+18     	; 0xdac <malloc+0x120>
     d9a:	4e 0f       	add	r20, r30
     d9c:	5f 1f       	adc	r21, r31
     d9e:	50 93 40 01 	sts	0x0140, r21	; 0x800140 <__brkval+0x1>
     da2:	40 93 3f 01 	sts	0x013F, r20	; 0x80013f <__brkval>
     da6:	81 93       	st	Z+, r24
     da8:	91 93       	st	Z+, r25
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <malloc+0x124>
     dac:	e0 e0       	ldi	r30, 0x00	; 0
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	cf 01       	movw	r24, r30
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	08 95       	ret

00000dbc <free>:
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <free+0xa>
     dc4:	81 c0       	rjmp	.+258    	; 0xec8 <free+0x10c>
     dc6:	fc 01       	movw	r30, r24
     dc8:	32 97       	sbiw	r30, 0x02	; 2
     dca:	13 82       	std	Z+3, r1	; 0x03
     dcc:	12 82       	std	Z+2, r1	; 0x02
     dce:	a0 91 41 01 	lds	r26, 0x0141	; 0x800141 <__flp>
     dd2:	b0 91 42 01 	lds	r27, 0x0142	; 0x800142 <__flp+0x1>
     dd6:	10 97       	sbiw	r26, 0x00	; 0
     dd8:	81 f4       	brne	.+32     	; 0xdfa <free+0x3e>
     dda:	20 81       	ld	r18, Z
     ddc:	31 81       	ldd	r19, Z+1	; 0x01
     dde:	82 0f       	add	r24, r18
     de0:	93 1f       	adc	r25, r19
     de2:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <__brkval>
     de6:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <__brkval+0x1>
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	51 f5       	brne	.+84     	; 0xe44 <free+0x88>
     df0:	f0 93 40 01 	sts	0x0140, r31	; 0x800140 <__brkval+0x1>
     df4:	e0 93 3f 01 	sts	0x013F, r30	; 0x80013f <__brkval>
     df8:	67 c0       	rjmp	.+206    	; 0xec8 <free+0x10c>
     dfa:	ed 01       	movw	r28, r26
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	ce 17       	cp	r28, r30
     e02:	df 07       	cpc	r29, r31
     e04:	40 f4       	brcc	.+16     	; 0xe16 <free+0x5a>
     e06:	4a 81       	ldd	r20, Y+2	; 0x02
     e08:	5b 81       	ldd	r21, Y+3	; 0x03
     e0a:	9e 01       	movw	r18, r28
     e0c:	41 15       	cp	r20, r1
     e0e:	51 05       	cpc	r21, r1
     e10:	f1 f0       	breq	.+60     	; 0xe4e <free+0x92>
     e12:	ea 01       	movw	r28, r20
     e14:	f5 cf       	rjmp	.-22     	; 0xe00 <free+0x44>
     e16:	d3 83       	std	Z+3, r29	; 0x03
     e18:	c2 83       	std	Z+2, r28	; 0x02
     e1a:	40 81       	ld	r20, Z
     e1c:	51 81       	ldd	r21, Z+1	; 0x01
     e1e:	84 0f       	add	r24, r20
     e20:	95 1f       	adc	r25, r21
     e22:	c8 17       	cp	r28, r24
     e24:	d9 07       	cpc	r29, r25
     e26:	59 f4       	brne	.+22     	; 0xe3e <free+0x82>
     e28:	88 81       	ld	r24, Y
     e2a:	99 81       	ldd	r25, Y+1	; 0x01
     e2c:	84 0f       	add	r24, r20
     e2e:	95 1f       	adc	r25, r21
     e30:	02 96       	adiw	r24, 0x02	; 2
     e32:	91 83       	std	Z+1, r25	; 0x01
     e34:	80 83       	st	Z, r24
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	9b 81       	ldd	r25, Y+3	; 0x03
     e3a:	93 83       	std	Z+3, r25	; 0x03
     e3c:	82 83       	std	Z+2, r24	; 0x02
     e3e:	21 15       	cp	r18, r1
     e40:	31 05       	cpc	r19, r1
     e42:	29 f4       	brne	.+10     	; 0xe4e <free+0x92>
     e44:	f0 93 42 01 	sts	0x0142, r31	; 0x800142 <__flp+0x1>
     e48:	e0 93 41 01 	sts	0x0141, r30	; 0x800141 <__flp>
     e4c:	3d c0       	rjmp	.+122    	; 0xec8 <free+0x10c>
     e4e:	e9 01       	movw	r28, r18
     e50:	fb 83       	std	Y+3, r31	; 0x03
     e52:	ea 83       	std	Y+2, r30	; 0x02
     e54:	49 91       	ld	r20, Y+
     e56:	59 91       	ld	r21, Y+
     e58:	c4 0f       	add	r28, r20
     e5a:	d5 1f       	adc	r29, r21
     e5c:	ec 17       	cp	r30, r28
     e5e:	fd 07       	cpc	r31, r29
     e60:	61 f4       	brne	.+24     	; 0xe7a <free+0xbe>
     e62:	80 81       	ld	r24, Z
     e64:	91 81       	ldd	r25, Z+1	; 0x01
     e66:	84 0f       	add	r24, r20
     e68:	95 1f       	adc	r25, r21
     e6a:	02 96       	adiw	r24, 0x02	; 2
     e6c:	e9 01       	movw	r28, r18
     e6e:	99 83       	std	Y+1, r25	; 0x01
     e70:	88 83       	st	Y, r24
     e72:	82 81       	ldd	r24, Z+2	; 0x02
     e74:	93 81       	ldd	r25, Z+3	; 0x03
     e76:	9b 83       	std	Y+3, r25	; 0x03
     e78:	8a 83       	std	Y+2, r24	; 0x02
     e7a:	e0 e0       	ldi	r30, 0x00	; 0
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	12 96       	adiw	r26, 0x02	; 2
     e80:	8d 91       	ld	r24, X+
     e82:	9c 91       	ld	r25, X
     e84:	13 97       	sbiw	r26, 0x03	; 3
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	19 f0       	breq	.+6      	; 0xe90 <free+0xd4>
     e8a:	fd 01       	movw	r30, r26
     e8c:	dc 01       	movw	r26, r24
     e8e:	f7 cf       	rjmp	.-18     	; 0xe7e <free+0xc2>
     e90:	8d 91       	ld	r24, X+
     e92:	9c 91       	ld	r25, X
     e94:	11 97       	sbiw	r26, 0x01	; 1
     e96:	9d 01       	movw	r18, r26
     e98:	2e 5f       	subi	r18, 0xFE	; 254
     e9a:	3f 4f       	sbci	r19, 0xFF	; 255
     e9c:	82 0f       	add	r24, r18
     e9e:	93 1f       	adc	r25, r19
     ea0:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <__brkval>
     ea4:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <__brkval+0x1>
     ea8:	28 17       	cp	r18, r24
     eaa:	39 07       	cpc	r19, r25
     eac:	69 f4       	brne	.+26     	; 0xec8 <free+0x10c>
     eae:	30 97       	sbiw	r30, 0x00	; 0
     eb0:	29 f4       	brne	.+10     	; 0xebc <free+0x100>
     eb2:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__flp+0x1>
     eb6:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__flp>
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <free+0x104>
     ebc:	13 82       	std	Z+3, r1	; 0x03
     ebe:	12 82       	std	Z+2, r1	; 0x02
     ec0:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <__brkval+0x1>
     ec4:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <__brkval>
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	08 95       	ret

00000ece <do_rand>:
     ece:	8f 92       	push	r8
     ed0:	9f 92       	push	r9
     ed2:	af 92       	push	r10
     ed4:	bf 92       	push	r11
     ed6:	cf 92       	push	r12
     ed8:	df 92       	push	r13
     eda:	ef 92       	push	r14
     edc:	ff 92       	push	r15
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	ec 01       	movw	r28, r24
     ee4:	68 81       	ld	r22, Y
     ee6:	79 81       	ldd	r23, Y+1	; 0x01
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	9b 81       	ldd	r25, Y+3	; 0x03
     eec:	61 15       	cp	r22, r1
     eee:	71 05       	cpc	r23, r1
     ef0:	81 05       	cpc	r24, r1
     ef2:	91 05       	cpc	r25, r1
     ef4:	21 f4       	brne	.+8      	; 0xefe <do_rand+0x30>
     ef6:	64 e2       	ldi	r22, 0x24	; 36
     ef8:	79 ed       	ldi	r23, 0xD9	; 217
     efa:	8b e5       	ldi	r24, 0x5B	; 91
     efc:	97 e0       	ldi	r25, 0x07	; 7
     efe:	2d e1       	ldi	r18, 0x1D	; 29
     f00:	33 ef       	ldi	r19, 0xF3	; 243
     f02:	41 e0       	ldi	r20, 0x01	; 1
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	38 d0       	rcall	.+112    	; 0xf78 <__divmodsi4>
     f08:	49 01       	movw	r8, r18
     f0a:	5a 01       	movw	r10, r20
     f0c:	9b 01       	movw	r18, r22
     f0e:	ac 01       	movw	r20, r24
     f10:	a7 ea       	ldi	r26, 0xA7	; 167
     f12:	b1 e4       	ldi	r27, 0x41	; 65
     f14:	4d d0       	rcall	.+154    	; 0xfb0 <__muluhisi3>
     f16:	6b 01       	movw	r12, r22
     f18:	7c 01       	movw	r14, r24
     f1a:	ac ee       	ldi	r26, 0xEC	; 236
     f1c:	b4 ef       	ldi	r27, 0xF4	; 244
     f1e:	a5 01       	movw	r20, r10
     f20:	94 01       	movw	r18, r8
     f22:	52 d0       	rcall	.+164    	; 0xfc8 <__mulohisi3>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	8c 0d       	add	r24, r12
     f2a:	9d 1d       	adc	r25, r13
     f2c:	ae 1d       	adc	r26, r14
     f2e:	bf 1d       	adc	r27, r15
     f30:	b7 ff       	sbrs	r27, 7
     f32:	03 c0       	rjmp	.+6      	; 0xf3a <do_rand+0x6c>
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	a1 09       	sbc	r26, r1
     f38:	b0 48       	sbci	r27, 0x80	; 128
     f3a:	88 83       	st	Y, r24
     f3c:	99 83       	std	Y+1, r25	; 0x01
     f3e:	aa 83       	std	Y+2, r26	; 0x02
     f40:	bb 83       	std	Y+3, r27	; 0x03
     f42:	9f 77       	andi	r25, 0x7F	; 127
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	df 90       	pop	r13
     f4e:	cf 90       	pop	r12
     f50:	bf 90       	pop	r11
     f52:	af 90       	pop	r10
     f54:	9f 90       	pop	r9
     f56:	8f 90       	pop	r8
     f58:	08 95       	ret

00000f5a <rand_r>:
     f5a:	b9 cf       	rjmp	.-142    	; 0xece <do_rand>

00000f5c <rand>:
     f5c:	86 e0       	ldi	r24, 0x06	; 6
     f5e:	91 e0       	ldi	r25, 0x01	; 1
     f60:	b6 cf       	rjmp	.-148    	; 0xece <do_rand>

00000f62 <srand>:
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
     f6a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
     f6e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
     f72:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
     f76:	08 95       	ret

00000f78 <__divmodsi4>:
     f78:	05 2e       	mov	r0, r21
     f7a:	97 fb       	bst	r25, 7
     f7c:	16 f4       	brtc	.+4      	; 0xf82 <__divmodsi4+0xa>
     f7e:	00 94       	com	r0
     f80:	0f d0       	rcall	.+30     	; 0xfa0 <__negsi2>
     f82:	57 fd       	sbrc	r21, 7
     f84:	05 d0       	rcall	.+10     	; 0xf90 <__divmodsi4_neg2>
     f86:	24 d0       	rcall	.+72     	; 0xfd0 <__udivmodsi4>
     f88:	07 fc       	sbrc	r0, 7
     f8a:	02 d0       	rcall	.+4      	; 0xf90 <__divmodsi4_neg2>
     f8c:	46 f4       	brtc	.+16     	; 0xf9e <__divmodsi4_exit>
     f8e:	08 c0       	rjmp	.+16     	; 0xfa0 <__negsi2>

00000f90 <__divmodsi4_neg2>:
     f90:	50 95       	com	r21
     f92:	40 95       	com	r20
     f94:	30 95       	com	r19
     f96:	21 95       	neg	r18
     f98:	3f 4f       	sbci	r19, 0xFF	; 255
     f9a:	4f 4f       	sbci	r20, 0xFF	; 255
     f9c:	5f 4f       	sbci	r21, 0xFF	; 255

00000f9e <__divmodsi4_exit>:
     f9e:	08 95       	ret

00000fa0 <__negsi2>:
     fa0:	90 95       	com	r25
     fa2:	80 95       	com	r24
     fa4:	70 95       	com	r23
     fa6:	61 95       	neg	r22
     fa8:	7f 4f       	sbci	r23, 0xFF	; 255
     faa:	8f 4f       	sbci	r24, 0xFF	; 255
     fac:	9f 4f       	sbci	r25, 0xFF	; 255
     fae:	08 95       	ret

00000fb0 <__muluhisi3>:
     fb0:	31 d0       	rcall	.+98     	; 0x1014 <__umulhisi3>
     fb2:	a5 9f       	mul	r26, r21
     fb4:	90 0d       	add	r25, r0
     fb6:	b4 9f       	mul	r27, r20
     fb8:	90 0d       	add	r25, r0
     fba:	a4 9f       	mul	r26, r20
     fbc:	80 0d       	add	r24, r0
     fbe:	91 1d       	adc	r25, r1
     fc0:	11 24       	eor	r1, r1
     fc2:	08 95       	ret

00000fc4 <__mulshisi3>:
     fc4:	b7 ff       	sbrs	r27, 7
     fc6:	f4 cf       	rjmp	.-24     	; 0xfb0 <__muluhisi3>

00000fc8 <__mulohisi3>:
     fc8:	f3 df       	rcall	.-26     	; 0xfb0 <__muluhisi3>
     fca:	82 1b       	sub	r24, r18
     fcc:	93 0b       	sbc	r25, r19
     fce:	08 95       	ret

00000fd0 <__udivmodsi4>:
     fd0:	a1 e2       	ldi	r26, 0x21	; 33
     fd2:	1a 2e       	mov	r1, r26
     fd4:	aa 1b       	sub	r26, r26
     fd6:	bb 1b       	sub	r27, r27
     fd8:	fd 01       	movw	r30, r26
     fda:	0d c0       	rjmp	.+26     	; 0xff6 <__udivmodsi4_ep>

00000fdc <__udivmodsi4_loop>:
     fdc:	aa 1f       	adc	r26, r26
     fde:	bb 1f       	adc	r27, r27
     fe0:	ee 1f       	adc	r30, r30
     fe2:	ff 1f       	adc	r31, r31
     fe4:	a2 17       	cp	r26, r18
     fe6:	b3 07       	cpc	r27, r19
     fe8:	e4 07       	cpc	r30, r20
     fea:	f5 07       	cpc	r31, r21
     fec:	20 f0       	brcs	.+8      	; 0xff6 <__udivmodsi4_ep>
     fee:	a2 1b       	sub	r26, r18
     ff0:	b3 0b       	sbc	r27, r19
     ff2:	e4 0b       	sbc	r30, r20
     ff4:	f5 0b       	sbc	r31, r21

00000ff6 <__udivmodsi4_ep>:
     ff6:	66 1f       	adc	r22, r22
     ff8:	77 1f       	adc	r23, r23
     ffa:	88 1f       	adc	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	1a 94       	dec	r1
    1000:	69 f7       	brne	.-38     	; 0xfdc <__udivmodsi4_loop>
    1002:	60 95       	com	r22
    1004:	70 95       	com	r23
    1006:	80 95       	com	r24
    1008:	90 95       	com	r25
    100a:	9b 01       	movw	r18, r22
    100c:	ac 01       	movw	r20, r24
    100e:	bd 01       	movw	r22, r26
    1010:	cf 01       	movw	r24, r30
    1012:	08 95       	ret

00001014 <__umulhisi3>:
    1014:	a2 9f       	mul	r26, r18
    1016:	b0 01       	movw	r22, r0
    1018:	b3 9f       	mul	r27, r19
    101a:	c0 01       	movw	r24, r0
    101c:	a3 9f       	mul	r26, r19
    101e:	70 0d       	add	r23, r0
    1020:	81 1d       	adc	r24, r1
    1022:	11 24       	eor	r1, r1
    1024:	91 1d       	adc	r25, r1
    1026:	b2 9f       	mul	r27, r18
    1028:	70 0d       	add	r23, r0
    102a:	81 1d       	adc	r24, r1
    102c:	11 24       	eor	r1, r1
    102e:	91 1d       	adc	r25, r1
    1030:	08 95       	ret

00001032 <_exit>:
    1032:	f8 94       	cli

00001034 <__stop_program>:
    1034:	ff cf       	rjmp	.-2      	; 0x1034 <__stop_program>
